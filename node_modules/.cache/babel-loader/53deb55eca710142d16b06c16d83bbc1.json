{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\n\nfunction googleProtobufTimestampToProto3JSON(obj) {\n  var _a; // seconds is an instance of Long so it won't be undefined\n\n\n  const durationSeconds = obj.seconds;\n  const date = new Date(durationSeconds * 1000).toISOString(); // Pad leading zeros if nano string length is less than 9.\n\n  let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, '0'); // Trim the unsignificant zeros and keep 3, 6, or 9 decimal digits.\n\n  while (nanos && nanos.length > 3 && nanos.endsWith('000')) {\n    nanos = nanos.slice(0, -3);\n  }\n\n  return date.replace(/(?:\\.\\d{0,9})/, '.' + nanos);\n}\n\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\n\nfunction googleProtobufTimestampFromProto3JSON(json) {\n  const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n\n  if (!match) {\n    throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n  }\n\n  const date = new Date(json);\n  const millisecondsSinceEpoch = date.getTime();\n  const seconds = Math.floor(millisecondsSinceEpoch / 1000); // The fractional seconds in the JSON timestamps can go up to 9 digits (i.e. up to 1 nanosecond resolution).\n  // However, Javascript Date object represent any date and time to millisecond precision.\n  // To keep the precision, we extract the fractional seconds and append 0 until the length is equal to 9.\n\n  let nanos = 0;\n  const secondsFromDate = json.split('.')[1];\n\n  if (secondsFromDate) {\n    nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, '0'));\n  }\n\n  const result = {};\n\n  if (seconds !== 0) {\n    result.seconds = seconds;\n  }\n\n  if (nanos !== 0) {\n    result.nanos = nanos;\n  }\n\n  return result;\n}\n\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;","map":{"version":3,"sources":["../../typescript/src/timestamp.ts"],"names":[],"mappings":"cAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAUA,SAAgB,mCAAhB,CACE,GADF,EACmC;SAAA,CAEjC;;;AACA,QAAM,eAAe,GAAG,GAAG,CAAC,OAA5B;AACA,QAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,eAAe,GAAG,IAA3B,EAAiC,WAAjC,EAAb,CAJiC,CAKjC;;AACA,MAAI,KAAK,GAAG,CAAA,EAAA,GAAA,GAAG,CAAC,KAAJ,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,QAAF,GAAa,QAAb,CAAsB,CAAtB,EAAyB,GAAzB,CAArB,CANiC,CAOjC;;AACA,SAAO,KAAK,IAAI,KAAK,CAAC,MAAN,GAAe,CAAxB,IAA6B,KAAK,CAAC,QAAN,CAAe,KAAf,CAApC,EAA2D;AACzD,IAAA,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAR;AACD;;AACD,SAAO,IAAI,CAAC,OAAL,CAAa,eAAb,EAA8B,MAAM,KAApC,CAAP;AACD;;AAbD,OAAA,CAAA,mCAAA,GAAA,mCAAA;;AAeA,SAAgB,qCAAhB,CAAsD,IAAtD,EAAkE;AAChE,QAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,gDAAX,CAAd;;AACA,MAAI,CAAC,KAAL,EAAY;AACV,UAAM,IAAI,KAAJ,CACJ,yDAAyD,IAAI,qCADzD,CAAN;AAGD;;AACD,QAAM,IAAI,GAAG,IAAI,IAAJ,CAAS,IAAT,CAAb;AACA,QAAM,sBAAsB,GAAG,IAAI,CAAC,OAAL,EAA/B;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,sBAAsB,GAAG,IAApC,CAAhB,CATgE,CAUhE;AACA;AACA;;AACA,MAAI,KAAK,GAAG,CAAZ;AACA,QAAM,eAAe,GAAG,IAAI,CAAC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAxB;;AACA,MAAI,eAAJ,EAAqB;AACnB,IAAA,KAAK,GAAG,QAAQ,CAAC,eAAe,CAAC,KAAhB,CAAsB,CAAtB,EAAyB,CAAC,CAA1B,EAA6B,MAA7B,CAAoC,CAApC,EAAuC,GAAvC,CAAD,CAAhB;AACD;;AACD,QAAM,MAAM,GAAoB,EAAhC;;AACA,MAAI,OAAO,KAAK,CAAhB,EAAmB;AACjB,IAAA,MAAM,CAAC,OAAP,GAAiB,OAAjB;AACD;;AACD,MAAI,KAAK,KAAK,CAAd,EAAiB;AACf,IAAA,MAAM,CAAC,KAAP,GAAe,KAAf;AACD;;AACD,SAAO,MAAP;AACD;;AA1BD,OAAA,CAAA,qCAAA,GAAA,qCAAA","sourcesContent":["\"use strict\";\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\nfunction googleProtobufTimestampToProto3JSON(obj) {\n    var _a;\n    // seconds is an instance of Long so it won't be undefined\n    const durationSeconds = obj.seconds;\n    const date = new Date(durationSeconds * 1000).toISOString();\n    // Pad leading zeros if nano string length is less than 9.\n    let nanos = (_a = obj.nanos) === null || _a === void 0 ? void 0 : _a.toString().padStart(9, '0');\n    // Trim the unsignificant zeros and keep 3, 6, or 9 decimal digits.\n    while (nanos && nanos.length > 3 && nanos.endsWith('000')) {\n        nanos = nanos.slice(0, -3);\n    }\n    return date.replace(/(?:\\.\\d{0,9})/, '.' + nanos);\n}\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\nfunction googleProtobufTimestampFromProto3JSON(json) {\n    const match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n    if (!match) {\n        throw new Error(`googleProtobufDurationFromProto3JSON: incorrect value ${json} passed as google.protobuf.Duration`);\n    }\n    const date = new Date(json);\n    const millisecondsSinceEpoch = date.getTime();\n    const seconds = Math.floor(millisecondsSinceEpoch / 1000);\n    // The fractional seconds in the JSON timestamps can go up to 9 digits (i.e. up to 1 nanosecond resolution).\n    // However, Javascript Date object represent any date and time to millisecond precision.\n    // To keep the precision, we extract the fractional seconds and append 0 until the length is equal to 9.\n    let nanos = 0;\n    const secondsFromDate = json.split('.')[1];\n    if (secondsFromDate) {\n        nanos = parseInt(secondsFromDate.slice(0, -1).padEnd(9, '0'));\n    }\n    const result = {};\n    if (seconds !== 0) {\n        result.seconds = seconds;\n    }\n    if (nanos !== 0) {\n        result.nanos = nanos;\n    }\n    return result;\n}\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;\n"]},"metadata":{},"sourceType":"script"}
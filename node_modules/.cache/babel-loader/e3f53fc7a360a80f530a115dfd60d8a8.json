{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimental = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\n\nconst call_credentials_1 = require(\"./call-credentials\");\n\nObject.defineProperty(exports, \"CallCredentials\", {\n  enumerable: true,\n  get: function () {\n    return call_credentials_1.CallCredentials;\n  }\n});\n\nconst channel_1 = require(\"./channel\");\n\nObject.defineProperty(exports, \"Channel\", {\n  enumerable: true,\n  get: function () {\n    return channel_1.ChannelImplementation;\n  }\n});\n\nconst compression_algorithms_1 = require(\"./compression-algorithms\");\n\nObject.defineProperty(exports, \"compressionAlgorithms\", {\n  enumerable: true,\n  get: function () {\n    return compression_algorithms_1.CompressionAlgorithms;\n  }\n});\n\nconst connectivity_state_1 = require(\"./connectivity-state\");\n\nObject.defineProperty(exports, \"connectivityState\", {\n  enumerable: true,\n  get: function () {\n    return connectivity_state_1.ConnectivityState;\n  }\n});\n\nconst channel_credentials_1 = require(\"./channel-credentials\");\n\nObject.defineProperty(exports, \"ChannelCredentials\", {\n  enumerable: true,\n  get: function () {\n    return channel_credentials_1.ChannelCredentials;\n  }\n});\n\nconst client_1 = require(\"./client\");\n\nObject.defineProperty(exports, \"Client\", {\n  enumerable: true,\n  get: function () {\n    return client_1.Client;\n  }\n});\n\nconst constants_1 = require(\"./constants\");\n\nObject.defineProperty(exports, \"logVerbosity\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.LogVerbosity;\n  }\n});\nObject.defineProperty(exports, \"status\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Status;\n  }\n});\nObject.defineProperty(exports, \"propagate\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Propagate;\n  }\n});\n\nconst logging = require(\"./logging\");\n\nconst make_client_1 = require(\"./make-client\");\n\nObject.defineProperty(exports, \"loadPackageDefinition\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.loadPackageDefinition;\n  }\n});\nObject.defineProperty(exports, \"makeClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\nObject.defineProperty(exports, \"makeGenericClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\n\nconst metadata_1 = require(\"./metadata\");\n\nObject.defineProperty(exports, \"Metadata\", {\n  enumerable: true,\n  get: function () {\n    return metadata_1.Metadata;\n  }\n});\n\nconst server_1 = require(\"./server\");\n\nObject.defineProperty(exports, \"Server\", {\n  enumerable: true,\n  get: function () {\n    return server_1.Server;\n  }\n});\n\nconst server_credentials_1 = require(\"./server-credentials\");\n\nObject.defineProperty(exports, \"ServerCredentials\", {\n  enumerable: true,\n  get: function () {\n    return server_credentials_1.ServerCredentials;\n  }\n});\n\nconst status_builder_1 = require(\"./status-builder\");\n\nObject.defineProperty(exports, \"StatusBuilder\", {\n  enumerable: true,\n  get: function () {\n    return status_builder_1.StatusBuilder;\n  }\n});\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\n\nexports.credentials = {\n  /**\n   * Combine a ChannelCredentials with any number of CallCredentials into a\n   * single ChannelCredentials object.\n   * @param channelCredentials The ChannelCredentials object.\n   * @param callCredentials Any number of CallCredentials objects.\n   * @return The resulting ChannelCredentials object.\n   */\n  combineChannelCredentials: function (channelCredentials) {\n    for (var _len = arguments.length, callCredentials = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      callCredentials[_key - 1] = arguments[_key];\n    }\n\n    return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n  },\n\n  /**\n   * Combine any number of CallCredentials into a single CallCredentials\n   * object.\n   * @param first The first CallCredentials object.\n   * @param additional Any number of additional CallCredentials objects.\n   * @return The resulting CallCredentials object.\n   */\n  combineCallCredentials: function (first) {\n    for (var _len2 = arguments.length, additional = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      additional[_key2 - 1] = arguments[_key2];\n    }\n\n    return additional.reduce((acc, other) => acc.compose(other), first);\n  },\n  // from channel-credentials.ts\n  createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n  createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n  // from call-credentials.ts\n  createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n  createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n  createEmpty: call_credentials_1.CallCredentials.createEmpty\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */\n\nexports.closeClient = client => client.close();\n\nexports.waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**** Unimplemented function stubs ****/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n\nexports.loadObject = (value, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.load = (filename, format, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\n\nexports.setLogger = logger => {\n  logging.setLogger(logger);\n};\n\nexports.setLogVerbosity = verbosity => {\n  logging.setLoggerVerbosity(verbosity);\n};\n\nexports.getClientChannel = client => {\n  return client_1.Client.prototype.getChannel.call(client);\n};\n\nvar client_interceptors_1 = require(\"./client-interceptors\");\n\nObject.defineProperty(exports, \"ListenerBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.ListenerBuilder;\n  }\n});\nObject.defineProperty(exports, \"RequesterBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.RequesterBuilder;\n  }\n});\nObject.defineProperty(exports, \"InterceptingCall\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptingCall;\n  }\n});\nObject.defineProperty(exports, \"InterceptorConfigurationError\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptorConfigurationError;\n  }\n});\n\nvar channelz_1 = require(\"./channelz\");\n\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", {\n  enumerable: true,\n  get: function () {\n    return channelz_1.getChannelzServiceDefinition;\n  }\n});\nObject.defineProperty(exports, \"getChannelzHandlers\", {\n  enumerable: true,\n  get: function () {\n    return channelz_1.getChannelzHandlers;\n  }\n});\n\nvar admin_1 = require(\"./admin\");\n\nObject.defineProperty(exports, \"addAdminServicesToServer\", {\n  enumerable: true,\n  get: function () {\n    return admin_1.addAdminServicesToServer;\n  }\n});\n\nconst experimental = require(\"./experimental\");\n\nexports.experimental = experimental;\n\nconst resolver_dns = require(\"./resolver-dns\");\n\nconst resolver_uds = require(\"./resolver-uds\");\n\nconst resolver_ip = require(\"./resolver-ip\");\n\nconst load_balancer_pick_first = require(\"./load-balancer-pick-first\");\n\nconst load_balancer_round_robin = require(\"./load-balancer-round-robin\");\n\nconst channelz = require(\"./channelz\");\n\nconst clientVersion = require('../../package.json').version;\n\n(() => {\n  logging.trace(constants_1.LogVerbosity.DEBUG, 'index', 'Loading @grpc/grpc-js version ' + clientVersion);\n  resolver_dns.setup();\n  resolver_uds.setup();\n  resolver_ip.setup();\n  load_balancer_pick_first.setup();\n  load_balancer_round_robin.setup();\n  channelz.setup();\n})();","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  ClientDuplexStream,\n  ClientReadableStream,\n  ClientUnaryCall,\n  ClientWritableStream,\n  ServiceError,\n} from './call';\nimport { CallCredentials, OAuth2Client } from './call-credentials';\nimport { Deadline, StatusObject } from './call-stream';\nimport { Channel, ChannelImplementation } from './channel';\nimport { CompressionAlgorithms } from './compression-algorithms';\nimport { ConnectivityState } from './connectivity-state';\nimport { ChannelCredentials } from './channel-credentials';\nimport {\n  CallOptions,\n  Client,\n  ClientOptions,\n  CallInvocationTransformer,\n  CallProperties,\n  UnaryCallback,\n} from './client';\nimport { LogVerbosity, Status, Propagate } from './constants';\nimport * as logging from './logging';\nimport {\n  Deserialize,\n  loadPackageDefinition,\n  makeClientConstructor,\n  MethodDefinition,\n  ProtobufTypeDefinition,\n  Serialize,\n  ServiceClientConstructor,\n  ServiceDefinition,\n} from './make-client';\nimport { Metadata, MetadataValue } from './metadata';\nimport {\n  Server,\n  UntypedHandleCall,\n  UntypedServiceImplementation,\n} from './server';\nimport { KeyCertPair, ServerCredentials } from './server-credentials';\nimport { StatusBuilder } from './status-builder';\nimport {\n  handleBidiStreamingCall,\n  handleServerStreamingCall,\n  handleClientStreamingCall,\n  handleUnaryCall,\n  sendUnaryData,\n  ServerUnaryCall,\n  ServerReadableStream,\n  ServerWritableStream,\n  ServerDuplexStream,\n  ServerErrorResponse,\n} from './server-call';\n\nexport { OAuth2Client };\n\n/**** Client Credentials ****/\n\n// Using assign only copies enumerable properties, which is what we want\nexport const credentials = {\n  /**\n   * Combine a ChannelCredentials with any number of CallCredentials into a\n   * single ChannelCredentials object.\n   * @param channelCredentials The ChannelCredentials object.\n   * @param callCredentials Any number of CallCredentials objects.\n   * @return The resulting ChannelCredentials object.\n   */\n  combineChannelCredentials: (\n    channelCredentials: ChannelCredentials,\n    ...callCredentials: CallCredentials[]\n  ): ChannelCredentials => {\n    return callCredentials.reduce(\n      (acc, other) => acc.compose(other),\n      channelCredentials\n    );\n  },\n\n  /**\n   * Combine any number of CallCredentials into a single CallCredentials\n   * object.\n   * @param first The first CallCredentials object.\n   * @param additional Any number of additional CallCredentials objects.\n   * @return The resulting CallCredentials object.\n   */\n  combineCallCredentials: (\n    first: CallCredentials,\n    ...additional: CallCredentials[]\n  ): CallCredentials => {\n    return additional.reduce((acc, other) => acc.compose(other), first);\n  },\n\n  // from channel-credentials.ts\n  createInsecure: ChannelCredentials.createInsecure,\n  createSsl: ChannelCredentials.createSsl,\n\n  // from call-credentials.ts\n  createFromMetadataGenerator: CallCredentials.createFromMetadataGenerator,\n  createFromGoogleCredential: CallCredentials.createFromGoogleCredential,\n  createEmpty: CallCredentials.createEmpty,\n};\n\n/**** Metadata ****/\n\nexport { Metadata, MetadataValue };\n\n/**** Constants ****/\n\nexport {\n  LogVerbosity as logVerbosity,\n  Status as status,\n  ConnectivityState as connectivityState,\n  Propagate as propagate,\n  CompressionAlgorithms as compressionAlgorithms\n  // TODO: Other constants as well\n};\n\n/**** Client ****/\n\nexport {\n  Client,\n  ClientOptions,\n  loadPackageDefinition,\n  makeClientConstructor,\n  makeClientConstructor as makeGenericClientConstructor,\n  CallProperties,\n  CallInvocationTransformer,\n  ChannelImplementation as Channel,\n  Channel as ChannelInterface,\n  UnaryCallback as requestCallback,\n};\n\n/**\n * Close a Client object.\n * @param client The client to close.\n */\nexport const closeClient = (client: Client) => client.close();\n\nexport const waitForClientReady = (\n  client: Client,\n  deadline: Date | number,\n  callback: (error?: Error) => void\n) => client.waitForReady(deadline, callback);\n\n/* Interfaces */\n\nexport {\n  sendUnaryData,\n  ChannelCredentials,\n  CallCredentials,\n  Deadline,\n  Serialize as serialize,\n  Deserialize as deserialize,\n  ClientUnaryCall,\n  ClientReadableStream,\n  ClientWritableStream,\n  ClientDuplexStream,\n  CallOptions,\n  MethodDefinition,\n  StatusObject,\n  ServiceError,\n  ServerUnaryCall,\n  ServerReadableStream,\n  ServerWritableStream,\n  ServerDuplexStream,\n  ServerErrorResponse,\n  ServiceDefinition,\n  UntypedHandleCall,\n  UntypedServiceImplementation,\n};\n\n/**** Server ****/\n\nexport {\n  handleBidiStreamingCall,\n  handleServerStreamingCall,\n  handleUnaryCall,\n  handleClientStreamingCall,\n};\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport type Call =\n  | ClientUnaryCall\n  | ClientReadableStream<any>\n  | ClientWritableStream<any>\n  | ClientDuplexStream<any, any>;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**** Unimplemented function stubs ****/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport const loadObject = (value: any, options: any) => {\n  throw new Error(\n    'Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead'\n  );\n};\n\nexport const load = (filename: any, format: any, options: any) => {\n  throw new Error(\n    'Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead'\n  );\n};\n\nexport const setLogger = (logger: Partial<Console>): void => {\n  logging.setLogger(logger);\n};\n\nexport const setLogVerbosity = (verbosity: LogVerbosity): void => {\n  logging.setLoggerVerbosity(verbosity);\n};\n\nexport { Server };\nexport { ServerCredentials };\nexport { KeyCertPair };\n\nexport const getClientChannel = (client: Client) => {\n  return Client.prototype.getChannel.call(client);\n};\n\nexport { StatusBuilder };\n\nexport { Listener } from './call-stream';\n\nexport {\n  Requester,\n  ListenerBuilder,\n  RequesterBuilder,\n  Interceptor,\n  InterceptorOptions,\n  InterceptorProvider,\n  InterceptingCall,\n  InterceptorConfigurationError,\n} from './client-interceptors';\n\nexport {\n  GrpcObject,\n  ServiceClientConstructor,\n  ProtobufTypeDefinition\n} from './make-client';\n\nexport { ChannelOptions } from './channel-options';\n\nexport {\n  getChannelzServiceDefinition,\n  getChannelzHandlers\n} from './channelz';\n\nexport { addAdminServicesToServer } from './admin';\n\nimport * as experimental from './experimental';\nexport { experimental };\n\nimport * as resolver_dns from './resolver-dns';\nimport * as resolver_uds from './resolver-uds';\nimport * as resolver_ip from './resolver-ip';\nimport * as load_balancer_pick_first from './load-balancer-pick-first';\nimport * as load_balancer_round_robin from './load-balancer-round-robin';\nimport * as channelz from './channelz';\n\nconst clientVersion = require('../../package.json').version;\n\n(() => {\n  logging.trace(LogVerbosity.DEBUG, 'index', 'Loading @grpc/grpc-js version ' + clientVersion);\n  resolver_dns.setup();\n  resolver_uds.setup();\n  resolver_ip.setup();\n  load_balancer_pick_first.setup();\n  load_balancer_round_robin.setup();\n  channelz.setup();\n})();\n"]},"metadata":{},"sourceType":"script"}
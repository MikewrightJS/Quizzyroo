{"ast":null,"code":"/**\n * Object#toString() ref for stringify().\n */\nvar toString = Object.prototype.toString;\n/**\n * Cache non-integer test regexp.\n */\n\nvar isint = /^[0-9]+$/;\n\nfunction promote(parent, key) {\n  if (parent[key].length == 0) return parent[key] = {};\n  var t = {};\n\n  for (var i in parent[key]) t[i] = parent[key][i];\n\n  parent[key] = t;\n  return t;\n}\n\nfunction parse(parts, parent, key, val) {\n  var part = parts.shift(); // end\n\n  if (!part) {\n    if (Array.isArray(parent[key])) {\n      parent[key].push(val);\n    } else if ('object' == typeof parent[key]) {\n      parent[key] = val;\n    } else if ('undefined' == typeof parent[key]) {\n      parent[key] = val;\n    } else {\n      parent[key] = [parent[key], val];\n    } // array\n\n  } else {\n    var obj = parent[key] = parent[key] || [];\n\n    if (']' == part) {\n      if (Array.isArray(obj)) {\n        if ('' != val) obj.push(val);\n      } else if ('object' == typeof obj) {\n        obj[Object.keys(obj).length] = val;\n      } else {\n        obj = parent[key] = [parent[key], val];\n      } // prop\n\n    } else if (~part.indexOf(']')) {\n      part = part.substr(0, part.length - 1);\n      if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);\n      parse(parts, obj, part, val); // key\n    } else {\n      if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);\n      parse(parts, obj, part, val);\n    }\n  }\n}\n/**\n * Merge parent key/val pair.\n */\n\n\nfunction merge(parent, key, val) {\n  if (~key.indexOf(']')) {\n    var parts = key.split('['),\n        len = parts.length,\n        last = len - 1;\n    parse(parts, parent, 'base', val); // optimize\n  } else {\n    if (!isint.test(key) && Array.isArray(parent.base)) {\n      var t = {};\n\n      for (var k in parent.base) t[k] = parent.base[k];\n\n      parent.base = t;\n    }\n\n    set(parent.base, key, val);\n  }\n\n  return parent;\n}\n/**\n * Parse the given obj.\n */\n\n\nfunction parseObject(obj) {\n  var ret = {\n    base: {}\n  };\n  Object.keys(obj).forEach(function (name) {\n    merge(ret, name, obj[name]);\n  });\n  return ret.base;\n}\n/**\n * Parse the given str.\n */\n\n\nfunction parseString(str) {\n  return String(str).split('&').reduce(function (ret, pair) {\n    var eql = pair.indexOf('='),\n        brace = lastBraceInKey(pair),\n        key = pair.substr(0, brace || eql),\n        val = pair.substr(brace || eql, pair.length),\n        val = val.substr(val.indexOf('=') + 1, val.length); // ?foo\n\n    if ('' == key) key = pair, val = '';\n    if ('' == key) return ret;\n    return merge(ret, decode(key), decode(val));\n  }, {\n    base: {}\n  }).base;\n}\n/**\n * Parse the given query `str` or `obj`, returning an object.\n *\n * @param {String} str | {Object} obj\n * @return {Object}\n * @api public\n */\n\n\nexports.parse = function (str) {\n  if (null == str || '' == str) return {};\n  return 'object' == typeof str ? parseObject(str) : parseString(str);\n};\n/**\n * Turn the given `obj` into a query string\n *\n * @param {Object} obj\n * @return {String}\n * @api public\n */\n\n\nvar stringify = exports.stringify = function (obj, prefix) {\n  if (Array.isArray(obj)) {\n    return stringifyArray(obj, prefix);\n  } else if ('[object Object]' == toString.call(obj)) {\n    return stringifyObject(obj, prefix);\n  } else if ('string' == typeof obj) {\n    return stringifyString(obj, prefix);\n  } else {\n    return prefix + '=' + encodeURIComponent(String(obj));\n  }\n};\n/**\n * Stringify the given `str`.\n *\n * @param {String} str\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\n\nfunction stringifyString(str, prefix) {\n  if (!prefix) throw new TypeError('stringify expects an object');\n  return prefix + '=' + encodeURIComponent(str);\n}\n/**\n * Stringify the given `arr`.\n *\n * @param {Array} arr\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\n\nfunction stringifyArray(arr, prefix) {\n  var ret = [];\n  if (!prefix) throw new TypeError('stringify expects an object');\n\n  for (var i = 0; i < arr.length; i++) {\n    ret.push(stringify(arr[i], prefix + '[' + i + ']'));\n  }\n\n  return ret.join('&');\n}\n/**\n * Stringify the given `obj`.\n *\n * @param {Object} obj\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\n\nfunction stringifyObject(obj, prefix) {\n  var ret = [],\n      keys = Object.keys(obj),\n      key;\n\n  for (var i = 0, len = keys.length; i < len; ++i) {\n    key = keys[i];\n    if ('' == key) continue;\n\n    if (null == obj[key]) {\n      ret.push(encodeURIComponent(key) + '=');\n    } else {\n      ret.push(stringify(obj[key], prefix ? prefix + '[' + encodeURIComponent(key) + ']' : encodeURIComponent(key)));\n    }\n  }\n\n  return ret.join('&');\n}\n/**\n * Set `obj`'s `key` to `val` respecting\n * the weird and wonderful syntax of a qs,\n * where \"foo=bar&foo=baz\" becomes an array.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {String} val\n * @api private\n */\n\n\nfunction set(obj, key, val) {\n  var v = obj[key];\n\n  if (undefined === v) {\n    obj[key] = val;\n  } else if (Array.isArray(v)) {\n    v.push(val);\n  } else {\n    obj[key] = [v, val];\n  }\n}\n/**\n * Locate last brace in `str` within the key.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\n\nfunction lastBraceInKey(str) {\n  var len = str.length,\n      brace,\n      c;\n\n  for (var i = 0; i < len; ++i) {\n    c = str[i];\n    if (']' == c) brace = false;\n    if ('[' == c) brace = true;\n    if ('=' == c && !brace) return i;\n  }\n}\n/**\n * Decode `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\n\nfunction decode(str) {\n  try {\n    return decodeURIComponent(str.replace(/\\+/g, ' '));\n  } catch (err) {\n    return str;\n  }\n}","map":{"version":3,"sources":["C:/react/quiz/node_modules/request/node_modules/qs/index.js"],"names":["toString","Object","prototype","isint","promote","parent","key","length","t","i","parse","parts","val","part","shift","Array","isArray","push","obj","keys","indexOf","substr","test","merge","split","len","last","base","k","set","parseObject","ret","forEach","name","parseString","str","String","reduce","pair","eql","brace","lastBraceInKey","decode","exports","stringify","prefix","stringifyArray","call","stringifyObject","stringifyString","encodeURIComponent","TypeError","arr","join","v","undefined","c","decodeURIComponent","replace","err"],"mappings":"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","sourcesContent":["\n/**\n * Object#toString() ref for stringify().\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Cache non-integer test regexp.\n */\n\nvar isint = /^[0-9]+$/;\n\nfunction promote(parent, key) {\n  if (parent[key].length == 0) return parent[key] = {};\n  var t = {};\n  for (var i in parent[key]) t[i] = parent[key][i];\n  parent[key] = t;\n  return t;\n}\n\nfunction parse(parts, parent, key, val) {\n  var part = parts.shift();\n  // end\n  if (!part) {\n    if (Array.isArray(parent[key])) {\n      parent[key].push(val);\n    } else if ('object' == typeof parent[key]) {\n      parent[key] = val;\n    } else if ('undefined' == typeof parent[key]) {\n      parent[key] = val;\n    } else {\n      parent[key] = [parent[key], val];\n    }\n    // array\n  } else {\n    var obj = parent[key] = parent[key] || [];\n    if (']' == part) {\n      if (Array.isArray(obj)) {\n        if ('' != val) obj.push(val);\n      } else if ('object' == typeof obj) {\n        obj[Object.keys(obj).length] = val;\n      } else {\n        obj = parent[key] = [parent[key], val];\n      }\n      // prop\n    } else if (~part.indexOf(']')) {\n      part = part.substr(0, part.length - 1);\n      if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);\n      parse(parts, obj, part, val);\n      // key\n    } else {\n      if (!isint.test(part) && Array.isArray(obj)) obj = promote(parent, key);\n      parse(parts, obj, part, val);\n    }\n  }\n}\n\n/**\n * Merge parent key/val pair.\n */\n\nfunction merge(parent, key, val){\n  if (~key.indexOf(']')) {\n    var parts = key.split('[')\n      , len = parts.length\n      , last = len - 1;\n    parse(parts, parent, 'base', val);\n    // optimize\n  } else {\n    if (!isint.test(key) && Array.isArray(parent.base)) {\n      var t = {};\n      for (var k in parent.base) t[k] = parent.base[k];\n      parent.base = t;\n    }\n    set(parent.base, key, val);\n  }\n\n  return parent;\n}\n\n/**\n * Parse the given obj.\n */\n\nfunction parseObject(obj){\n  var ret = { base: {} };\n  Object.keys(obj).forEach(function(name){\n    merge(ret, name, obj[name]);\n  });\n  return ret.base;\n}\n\n/**\n * Parse the given str.\n */\n\nfunction parseString(str){\n  return String(str)\n    .split('&')\n    .reduce(function(ret, pair){\n      var eql = pair.indexOf('=')\n        , brace = lastBraceInKey(pair)\n        , key = pair.substr(0, brace || eql)\n        , val = pair.substr(brace || eql, pair.length)\n        , val = val.substr(val.indexOf('=') + 1, val.length);\n\n      // ?foo\n      if ('' == key) key = pair, val = '';\n      if ('' == key) return ret;\n\n      return merge(ret, decode(key), decode(val));\n    }, { base: {} }).base;\n}\n\n/**\n * Parse the given query `str` or `obj`, returning an object.\n *\n * @param {String} str | {Object} obj\n * @return {Object}\n * @api public\n */\n\nexports.parse = function(str){\n  if (null == str || '' == str) return {};\n  return 'object' == typeof str\n    ? parseObject(str)\n    : parseString(str);\n};\n\n/**\n * Turn the given `obj` into a query string\n *\n * @param {Object} obj\n * @return {String}\n * @api public\n */\n\nvar stringify = exports.stringify = function(obj, prefix) {\n  if (Array.isArray(obj)) {\n    return stringifyArray(obj, prefix);\n  } else if ('[object Object]' == toString.call(obj)) {\n    return stringifyObject(obj, prefix);\n  } else if ('string' == typeof obj) {\n    return stringifyString(obj, prefix);\n  } else {\n    return prefix + '=' + encodeURIComponent(String(obj));\n  }\n};\n\n/**\n * Stringify the given `str`.\n *\n * @param {String} str\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\nfunction stringifyString(str, prefix) {\n  if (!prefix) throw new TypeError('stringify expects an object');\n  return prefix + '=' + encodeURIComponent(str);\n}\n\n/**\n * Stringify the given `arr`.\n *\n * @param {Array} arr\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\nfunction stringifyArray(arr, prefix) {\n  var ret = [];\n  if (!prefix) throw new TypeError('stringify expects an object');\n  for (var i = 0; i < arr.length; i++) {\n    ret.push(stringify(arr[i], prefix + '[' + i + ']'));\n  }\n  return ret.join('&');\n}\n\n/**\n * Stringify the given `obj`.\n *\n * @param {Object} obj\n * @param {String} prefix\n * @return {String}\n * @api private\n */\n\nfunction stringifyObject(obj, prefix) {\n  var ret = []\n    , keys = Object.keys(obj)\n    , key;\n\n  for (var i = 0, len = keys.length; i < len; ++i) {\n    key = keys[i];\n    if ('' == key) continue;\n    if (null == obj[key]) {\n      ret.push(encodeURIComponent(key) + '=');\n    } else {\n      ret.push(stringify(obj[key], prefix\n        ? prefix + '[' + encodeURIComponent(key) + ']'\n        : encodeURIComponent(key)));\n    }\n  }\n\n  return ret.join('&');\n}\n\n/**\n * Set `obj`'s `key` to `val` respecting\n * the weird and wonderful syntax of a qs,\n * where \"foo=bar&foo=baz\" becomes an array.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {String} val\n * @api private\n */\n\nfunction set(obj, key, val) {\n  var v = obj[key];\n  if (undefined === v) {\n    obj[key] = val;\n  } else if (Array.isArray(v)) {\n    v.push(val);\n  } else {\n    obj[key] = [v, val];\n  }\n}\n\n/**\n * Locate last brace in `str` within the key.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction lastBraceInKey(str) {\n  var len = str.length\n    , brace\n    , c;\n  for (var i = 0; i < len; ++i) {\n    c = str[i];\n    if (']' == c) brace = false;\n    if ('[' == c) brace = true;\n    if ('=' == c && !brace) return i;\n  }\n}\n\n/**\n * Decode `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction decode(str) {\n  try {\n    return decodeURIComponent(str.replace(/\\+/g, ' '));\n  } catch (err) {\n    return str;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\quiz\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Question from \"./Question\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quiz() {\n  _s();\n\n  const [questions, setQuestions] = useState([]);\n  const [quizComplete, setQuizComplete] = useState(false);\n  const [correctAnswers, setcorrectAnswers] = useState(0);\n  const questionAmount = 5;\n  var defaultPlayerAnswers = [];\n\n  for (let x = 0; x < questionAmount; x++) {\n    defaultPlayerAnswers.push({\n      questionNum: x,\n      answer: false\n    });\n  }\n\n  const [playersAnswers, setPlayersAnswers] = useState(defaultPlayerAnswers);\n  useEffect(() => {\n    let q = fetch(`https://opentdb.com/api.php?amount=${questionAmount}`).then(res => res.json()).then(data => setQuestions(data.results));\n  }, []);\n\n  function handleQuestion(event, playerAnswer, key) {\n    !quizComplete && setPlayersAnswers(prev => playersAnswers.map(answer => {\n      return answer.questionNum === key ? { ...answer,\n        answer: playerAnswer\n      } : answer;\n    }));\n    console.log('dasads');\n  }\n\n  function checkScores() {\n    setcorrectAnswers(0);\n    playersAnswers.map(answer => {\n      return answer.answer === questions[answer.questionNum].correct_answer ? setcorrectAnswers(prev => prev + 1) : correctAnswers;\n    });\n    setQuizComplete(true);\n  }\n\n  function handleSubmission() {\n    quizComplete ? newGame() : checkScores();\n  }\n\n  function newGame() {\n    setPlayersAnswers(defaultPlayerAnswers);\n    console.log(defaultPlayerAnswers);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [questions.map((question, key) => {\n        return /*#__PURE__*/_jsxDEV(Question, {\n          id: key,\n          playerAnswer: playersAnswers[`${key}`],\n          handleQuestion: handleQuestion,\n          question: question.question,\n          correct: question.correct_answer,\n          incorrect: question.incorrect_answers,\n          category: question.category,\n          quizComplete: quizComplete\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 28\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmission,\n        children: quizComplete ? 'Play Again' : 'Check your scores!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Back to main menu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: quizComplete && `${correctAnswers} / ${questionAmount}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Quiz, \"NUJ5/9MC0th46JVJwoQSt7YGNT4=\");\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["C:/react/quiz/src/components/Quiz.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Route","Switch","Question","nanoid","Quiz","questions","setQuestions","quizComplete","setQuizComplete","correctAnswers","setcorrectAnswers","questionAmount","defaultPlayerAnswers","x","push","questionNum","answer","playersAnswers","setPlayersAnswers","q","fetch","then","res","json","data","results","handleQuestion","event","playerAnswer","key","prev","map","console","log","checkScores","correct_answer","handleSubmission","newGame","question","incorrect_answers","category"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Question from \"./Question\";\r\nimport {nanoid} from \"nanoid\"\r\n\r\n\r\nfunction Quiz() {\r\n    const [questions, setQuestions] = useState([]);\r\n    const [quizComplete, setQuizComplete] = useState(false)\r\n    const [correctAnswers, setcorrectAnswers] = useState(0)\r\n    \r\n    const questionAmount = 5;\r\n    var defaultPlayerAnswers = [];\r\n\r\n    for (let x = 0; x < questionAmount; x++) {\r\n        defaultPlayerAnswers.push({questionNum: x, answer:false});\r\n    }\r\n\r\n    const [playersAnswers, setPlayersAnswers] = useState(defaultPlayerAnswers);\r\n\r\n    useEffect(() => {\r\n        let q = fetch(`https://opentdb.com/api.php?amount=${questionAmount}`)\r\n            .then(res => res.json())\r\n            .then(data => setQuestions(data.results))\r\n        },[])\r\n\r\n    function handleQuestion(event, playerAnswer, key){\r\n        !quizComplete &&\r\n        setPlayersAnswers(prev => playersAnswers.map(answer =>{\r\n           return answer.questionNum === key ? \r\n                {...answer, answer:playerAnswer} :\r\n                answer;\r\n            }))\r\n            console.log('dasads');\r\n    }\r\n\r\n    function checkScores(){\r\n        setcorrectAnswers(0)\r\n        playersAnswers.map(answer =>{\r\n            return answer.answer === questions[answer.questionNum].correct_answer ? setcorrectAnswers(prev=>prev+1) : correctAnswers;\r\n        })\r\n        setQuizComplete(true) \r\n    }\r\n\r\n    function handleSubmission(){\r\n        quizComplete ?\r\n        newGame(): \r\n        checkScores() ;\r\n    }\r\n\r\n    function newGame(){\r\n        setPlayersAnswers(defaultPlayerAnswers)\r\n        console.log(defaultPlayerAnswers);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container\">\r\n                {questions.map((question,key) => {\r\n                    return <Question key={key} id={key} playerAnswer={playersAnswers[`${key}`]} \r\n                    handleQuestion={handleQuestion} question={question.question} correct={question.correct_answer} \r\n                    incorrect={question.incorrect_answers} category={question.category}\r\n                    quizComplete={quizComplete}/>\r\n                })}\r\n\r\n                <button onClick={handleSubmission}>{quizComplete ? 'Play Again' : 'Check your scores!'}</button>\r\n                <a href=\"/\"><button>Back to main menu</button></a>\r\n\r\n                <h4>{quizComplete && `${correctAnswers} / ${questionAmount}` }</h4>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;"]},"metadata":{},"sourceType":"module"}
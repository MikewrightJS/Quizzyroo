{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst http2 = require(\"http2\");\n\nconst constants_1 = require(\"./constants\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst server_call_1 = require(\"./server-call\");\n\nconst server_credentials_1 = require(\"./server-credentials\");\n\nconst resolver_1 = require(\"./resolver\");\n\nconst logging = require(\"./logging\");\n\nconst subchannel_address_1 = require(\"./subchannel-address\");\n\nconst uri_parser_1 = require(\"./uri-parser\");\n\nconst channelz_1 = require(\"./channelz\");\n\nconst TRACER_NAME = 'server';\n\nfunction noop() {}\n\nfunction getUnimplementedStatusResponse(methodName) {\n  return {\n    code: constants_1.Status.UNIMPLEMENTED,\n    details: `The server does not implement the method ${methodName}`,\n    metadata: new metadata_1.Metadata()\n  };\n}\n\nfunction getDefaultHandler(handlerType, methodName) {\n  const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\n\n  switch (handlerType) {\n    case 'unary':\n      return (call, callback) => {\n        callback(unimplementedStatusResponse, null);\n      };\n\n    case 'clientStream':\n      return (call, callback) => {\n        callback(unimplementedStatusResponse, null);\n      };\n\n    case 'serverStream':\n      return call => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n\n    case 'bidi':\n      return call => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n\n    default:\n      throw new Error(`Invalid handlerType ${handlerType}`);\n  }\n}\n\nclass Server {\n  constructor(options) {\n    this.http2ServerList = [];\n    this.handlers = new Map();\n    this.sessions = new Map();\n    this.started = false; // Channelz Info\n\n    this.channelzEnabled = true;\n    this.channelzTrace = new channelz_1.ChannelzTrace();\n    this.callTracker = new channelz_1.ChannelzCallTracker();\n    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n    this.options = options !== null && options !== void 0 ? options : {};\n\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n\n    if (this.channelzEnabled) {\n      this.channelzRef = channelz_1.registerChannelzServer(() => this.getChannelzInfo());\n      this.channelzTrace.addTrace('CT_INFO', 'Server created');\n      this.trace('Server constructed');\n    } else {\n      // Dummy channelz ref that will never be used\n      this.channelzRef = {\n        kind: 'server',\n        id: -1\n      };\n    }\n  }\n\n  getChannelzInfo() {\n    return {\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      listenerChildren: this.listenerChildrenTracker.getChildLists(),\n      sessionChildren: this.sessionChildrenTracker.getChildLists()\n    };\n  }\n\n  getChannelzSessionInfoGetter(session) {\n    return () => {\n      var _a, _b, _c;\n\n      const sessionInfo = this.sessions.get(session);\n      const sessionSocket = session.socket;\n      const remoteAddress = sessionSocket.remoteAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n      const localAddress = sessionSocket.localAddress ? subchannel_address_1.stringToSubchannelAddress(sessionSocket.localAddress, sessionSocket.localPort) : null;\n      let tlsInfo;\n\n      if (session.encrypted) {\n        const tlsSocket = sessionSocket;\n        const cipherInfo = tlsSocket.getCipher();\n        const certificate = tlsSocket.getCertificate();\n        const peerCertificate = tlsSocket.getPeerCertificate();\n        tlsInfo = {\n          cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n          cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n          localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\n          remoteCertificate: peerCertificate && 'raw' in peerCertificate ? peerCertificate.raw : null\n        };\n      } else {\n        tlsInfo = null;\n      }\n\n      const socketInfo = {\n        remoteAddress: remoteAddress,\n        localAddress: localAddress,\n        security: tlsInfo,\n        remoteName: null,\n        streamsStarted: sessionInfo.streamTracker.callsStarted,\n        streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n        streamsFailed: sessionInfo.streamTracker.callsFailed,\n        messagesSent: sessionInfo.messagesSent,\n        messagesReceived: sessionInfo.messagesReceived,\n        keepAlivesSent: 0,\n        lastLocalStreamCreatedTimestamp: null,\n        lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n        lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n        lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n        localFlowControlWindow: (_b = session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n        remoteFlowControlWindow: (_c = session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n      };\n      return socketInfo;\n    };\n  }\n\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);\n  }\n\n  addProtoService() {\n    throw new Error('Not implemented. Use addService() instead');\n  }\n\n  addService(service, implementation) {\n    if (service === null || typeof service !== 'object' || implementation === null || typeof implementation !== 'object') {\n      throw new Error('addService() requires two objects as arguments');\n    }\n\n    const serviceKeys = Object.keys(service);\n\n    if (serviceKeys.length === 0) {\n      throw new Error('Cannot add an empty service to a server');\n    }\n\n    serviceKeys.forEach(name => {\n      const attrs = service[name];\n      let methodType;\n\n      if (attrs.requestStream) {\n        if (attrs.responseStream) {\n          methodType = 'bidi';\n        } else {\n          methodType = 'clientStream';\n        }\n      } else {\n        if (attrs.responseStream) {\n          methodType = 'serverStream';\n        } else {\n          methodType = 'unary';\n        }\n      }\n\n      let implFn = implementation[name];\n      let impl;\n\n      if (implFn === undefined && typeof attrs.originalName === 'string') {\n        implFn = implementation[attrs.originalName];\n      }\n\n      if (implFn !== undefined) {\n        impl = implFn.bind(implementation);\n      } else {\n        impl = getDefaultHandler(methodType, name);\n      }\n\n      const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\n\n      if (success === false) {\n        throw new Error(`Method handler for ${attrs.path} already provided.`);\n      }\n    });\n  }\n\n  removeService(service) {\n    if (service === null || typeof service !== 'object') {\n      throw new Error('removeService() requires object as argument');\n    }\n\n    const serviceKeys = Object.keys(service);\n    serviceKeys.forEach(name => {\n      const attrs = service[name];\n      this.unregister(attrs.path);\n    });\n  }\n\n  bind(port, creds) {\n    throw new Error('Not implemented. Use bindAsync() instead');\n  }\n\n  bindAsync(port, creds, callback) {\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n\n    if (typeof port !== 'string') {\n      throw new TypeError('port must be a string');\n    }\n\n    if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\n      throw new TypeError('creds must be a ServerCredentials object');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n\n    const initialPortUri = uri_parser_1.parseUri(port);\n\n    if (initialPortUri === null) {\n      throw new Error(`Could not parse port \"${port}\"`);\n    }\n\n    const portUri = resolver_1.mapUriDefaultScheme(initialPortUri);\n\n    if (portUri === null) {\n      throw new Error(`Could not get a default scheme for port \"${port}\"`);\n    }\n\n    const serverOptions = {\n      maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER\n    };\n\n    if ('grpc-node.max_session_memory' in this.options) {\n      serverOptions.maxSessionMemory = this.options['grpc-node.max_session_memory'];\n    }\n\n    if ('grpc.max_concurrent_streams' in this.options) {\n      serverOptions.settings = {\n        maxConcurrentStreams: this.options['grpc.max_concurrent_streams']\n      };\n    }\n\n    const deferredCallback = (error, port) => {\n      process.nextTick(() => callback(error, port));\n    };\n\n    const setupServer = () => {\n      let http2Server;\n\n      if (creds._isSecure()) {\n        const secureServerOptions = Object.assign(serverOptions, creds._getSettings());\n        http2Server = http2.createSecureServer(secureServerOptions);\n        http2Server.on('secureConnection', socket => {\n          /* These errors need to be handled by the user of Http2SecureServer,\n           * according to https://github.com/nodejs/node/issues/35824 */\n          socket.on('error', e => {\n            this.trace('An incoming TLS connection closed with error: ' + e.message);\n          });\n        });\n      } else {\n        http2Server = http2.createServer(serverOptions);\n      }\n\n      http2Server.setTimeout(0, noop);\n\n      this._setupHandlers(http2Server);\n\n      return http2Server;\n    };\n\n    const bindSpecificPort = (addressList, portNum, previousCount) => {\n      if (addressList.length === 0) {\n        return Promise.resolve({\n          port: portNum,\n          count: previousCount\n        });\n      }\n\n      return Promise.all(addressList.map(address => {\n        this.trace('Attempting to bind ' + subchannel_address_1.subchannelAddressToString(address));\n        let addr;\n\n        if (subchannel_address_1.isTcpSubchannelAddress(address)) {\n          addr = {\n            host: address.host,\n            port: portNum\n          };\n        } else {\n          addr = address;\n        }\n\n        const http2Server = setupServer();\n        return new Promise((resolve, reject) => {\n          const onError = err => {\n            this.trace('Failed to bind ' + subchannel_address_1.subchannelAddressToString(address) + ' with error ' + err.message);\n            resolve(err);\n          };\n\n          http2Server.once('error', onError);\n          http2Server.listen(addr, () => {\n            const boundAddress = http2Server.address();\n            let boundSubchannelAddress;\n\n            if (typeof boundAddress === 'string') {\n              boundSubchannelAddress = {\n                path: boundAddress\n              };\n            } else {\n              boundSubchannelAddress = {\n                host: boundAddress.address,\n                port: boundAddress.port\n              };\n            }\n\n            const channelzRef = channelz_1.registerChannelzSocket(subchannel_address_1.subchannelAddressToString(boundSubchannelAddress), () => {\n              return {\n                localAddress: boundSubchannelAddress,\n                remoteAddress: null,\n                security: null,\n                remoteName: null,\n                streamsStarted: 0,\n                streamsSucceeded: 0,\n                streamsFailed: 0,\n                messagesSent: 0,\n                messagesReceived: 0,\n                keepAlivesSent: 0,\n                lastLocalStreamCreatedTimestamp: null,\n                lastRemoteStreamCreatedTimestamp: null,\n                lastMessageSentTimestamp: null,\n                lastMessageReceivedTimestamp: null,\n                localFlowControlWindow: null,\n                remoteFlowControlWindow: null\n              };\n            });\n            this.listenerChildrenTracker.refChild(channelzRef);\n            this.http2ServerList.push({\n              server: http2Server,\n              channelzRef: channelzRef\n            });\n            this.trace('Successfully bound ' + subchannel_address_1.subchannelAddressToString(boundSubchannelAddress));\n            resolve('port' in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);\n            http2Server.removeListener('error', onError);\n          });\n        });\n      })).then(results => {\n        let count = 0;\n\n        for (const result of results) {\n          if (typeof result === 'number') {\n            count += 1;\n\n            if (result !== portNum) {\n              throw new Error('Invalid state: multiple port numbers added from single address');\n            }\n          }\n        }\n\n        return {\n          port: portNum,\n          count: count + previousCount\n        };\n      });\n    };\n\n    const bindWildcardPort = addressList => {\n      if (addressList.length === 0) {\n        return Promise.resolve({\n          port: 0,\n          count: 0\n        });\n      }\n\n      const address = addressList[0];\n      const http2Server = setupServer();\n      return new Promise((resolve, reject) => {\n        const onError = err => {\n          this.trace('Failed to bind ' + subchannel_address_1.subchannelAddressToString(address) + ' with error ' + err.message);\n          resolve(bindWildcardPort(addressList.slice(1)));\n        };\n\n        http2Server.once('error', onError);\n        http2Server.listen(address, () => {\n          const boundAddress = http2Server.address();\n          const boundSubchannelAddress = {\n            host: boundAddress.address,\n            port: boundAddress.port\n          };\n          const channelzRef = channelz_1.registerChannelzSocket(subchannel_address_1.subchannelAddressToString(boundSubchannelAddress), () => {\n            return {\n              localAddress: boundSubchannelAddress,\n              remoteAddress: null,\n              security: null,\n              remoteName: null,\n              streamsStarted: 0,\n              streamsSucceeded: 0,\n              streamsFailed: 0,\n              messagesSent: 0,\n              messagesReceived: 0,\n              keepAlivesSent: 0,\n              lastLocalStreamCreatedTimestamp: null,\n              lastRemoteStreamCreatedTimestamp: null,\n              lastMessageSentTimestamp: null,\n              lastMessageReceivedTimestamp: null,\n              localFlowControlWindow: null,\n              remoteFlowControlWindow: null\n            };\n          });\n          this.listenerChildrenTracker.refChild(channelzRef);\n          this.http2ServerList.push({\n            server: http2Server,\n            channelzRef: channelzRef\n          });\n          this.trace('Successfully bound ' + subchannel_address_1.subchannelAddressToString(boundSubchannelAddress));\n          resolve(bindSpecificPort(addressList.slice(1), boundAddress.port, 1));\n          http2Server.removeListener('error', onError);\n        });\n      });\n    };\n\n    const resolverListener = {\n      onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError) => {\n        // We only want one resolution result. Discard all future results\n        resolverListener.onSuccessfulResolution = () => {};\n\n        if (addressList.length === 0) {\n          deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);\n          return;\n        }\n\n        let bindResultPromise;\n\n        if (subchannel_address_1.isTcpSubchannelAddress(addressList[0])) {\n          if (addressList[0].port === 0) {\n            bindResultPromise = bindWildcardPort(addressList);\n          } else {\n            bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);\n          }\n        } else {\n          // Use an arbitrary non-zero port for non-TCP addresses\n          bindResultPromise = bindSpecificPort(addressList, 1, 0);\n        }\n\n        bindResultPromise.then(bindResult => {\n          if (bindResult.count === 0) {\n            const errorString = `No address added out of total ${addressList.length} resolved`;\n            logging.log(constants_1.LogVerbosity.ERROR, errorString);\n            deferredCallback(new Error(errorString), 0);\n          } else {\n            if (bindResult.count < addressList.length) {\n              logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\n            }\n\n            deferredCallback(null, bindResult.port);\n          }\n        }, error => {\n          const errorString = `No address added out of total ${addressList.length} resolved`;\n          logging.log(constants_1.LogVerbosity.ERROR, errorString);\n          deferredCallback(new Error(errorString), 0);\n        });\n      },\n      onError: error => {\n        deferredCallback(new Error(error.details), 0);\n      }\n    };\n    const resolver = resolver_1.createResolver(portUri, resolverListener, this.options);\n    resolver.updateResolution();\n  }\n\n  forceShutdown() {\n    // Close the server if it is still running.\n    for (const {\n      server: http2Server,\n      channelzRef: ref\n    } of this.http2ServerList) {\n      if (http2Server.listening) {\n        http2Server.close(() => {\n          this.listenerChildrenTracker.unrefChild(ref);\n          channelz_1.unregisterChannelzRef(ref);\n        });\n      }\n    }\n\n    this.started = false; // Always destroy any available sessions. It's possible that one or more\n    // tryShutdown() calls are in progress. Don't wait on them to finish.\n\n    this.sessions.forEach((channelzInfo, session) => {\n      // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n      // recognize destroy(code) as a valid signature.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      session.destroy(http2.constants.NGHTTP2_CANCEL);\n    });\n    this.sessions.clear();\n    channelz_1.unregisterChannelzRef(this.channelzRef);\n  }\n\n  register(name, handler, serialize, deserialize, type) {\n    if (this.handlers.has(name)) {\n      return false;\n    }\n\n    this.handlers.set(name, {\n      func: handler,\n      serialize,\n      deserialize,\n      type,\n      path: name\n    });\n    return true;\n  }\n\n  unregister(name) {\n    return this.handlers.delete(name);\n  }\n\n  start() {\n    if (this.http2ServerList.length === 0 || this.http2ServerList.every(_ref => {\n      let {\n        server: http2Server\n      } = _ref;\n      return http2Server.listening !== true;\n    })) {\n      throw new Error('server must be bound in order to start');\n    }\n\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Starting');\n    }\n\n    this.started = true;\n  }\n\n  tryShutdown(callback) {\n    const wrappedCallback = error => {\n      channelz_1.unregisterChannelzRef(this.channelzRef);\n      callback(error);\n    };\n\n    let pendingChecks = 0;\n\n    function maybeCallback() {\n      pendingChecks--;\n\n      if (pendingChecks === 0) {\n        wrappedCallback();\n      }\n    } // Close the server if necessary.\n\n\n    this.started = false;\n\n    for (const {\n      server: http2Server,\n      channelzRef: ref\n    } of this.http2ServerList) {\n      if (http2Server.listening) {\n        pendingChecks++;\n        http2Server.close(() => {\n          this.listenerChildrenTracker.unrefChild(ref);\n          channelz_1.unregisterChannelzRef(ref);\n          maybeCallback();\n        });\n      }\n    }\n\n    this.sessions.forEach((channelzInfo, session) => {\n      if (!session.closed) {\n        pendingChecks += 1;\n        session.close(maybeCallback);\n      }\n    });\n\n    if (pendingChecks === 0) {\n      wrappedCallback();\n    }\n  }\n\n  addHttp2Port() {\n    throw new Error('Not yet implemented');\n  }\n  /**\n   * Get the channelz reference object for this server. The returned value is\n   * garbage if channelz is disabled for this server.\n   * @returns\n   */\n\n\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n\n  _setupHandlers(http2Server) {\n    if (http2Server === null) {\n      return;\n    }\n\n    http2Server.on('stream', (stream, headers) => {\n      var _a;\n\n      const channelzSessionInfo = this.sessions.get(stream.session);\n      this.callTracker.addCallStarted();\n      channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\n      const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n\n      if (typeof contentType !== 'string' || !contentType.startsWith('application/grpc')) {\n        stream.respond({\n          [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE\n        }, {\n          endStream: true\n        });\n        this.callTracker.addCallFailed();\n        channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n        return;\n      }\n\n      let call = null;\n\n      try {\n        const path = headers[http2.constants.HTTP2_HEADER_PATH];\n        const serverAddress = http2Server.address();\n        let serverAddressString = 'null';\n\n        if (serverAddress) {\n          if (typeof serverAddress === 'string') {\n            serverAddressString = serverAddress;\n          } else {\n            serverAddressString = serverAddress.address + ':' + serverAddress.port;\n          }\n        }\n\n        this.trace('Received call to method ' + path + ' at address ' + serverAddressString);\n        const handler = this.handlers.get(path);\n\n        if (handler === undefined) {\n          this.trace('No handler registered for method ' + path + '. Sending UNIMPLEMENTED status.');\n          throw getUnimplementedStatusResponse(path);\n        }\n\n        call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n        call.once('callEnd', code => {\n          if (code === constants_1.Status.OK) {\n            this.callTracker.addCallSucceeded();\n          } else {\n            this.callTracker.addCallFailed();\n          }\n        });\n\n        if (channelzSessionInfo) {\n          call.once('streamEnd', success => {\n            if (success) {\n              channelzSessionInfo.streamTracker.addCallSucceeded();\n            } else {\n              channelzSessionInfo.streamTracker.addCallFailed();\n            }\n          });\n          call.on('sendMessage', () => {\n            channelzSessionInfo.messagesSent += 1;\n            channelzSessionInfo.lastMessageSentTimestamp = new Date();\n          });\n          call.on('receiveMessage', () => {\n            channelzSessionInfo.messagesReceived += 1;\n            channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n          });\n        }\n\n        const metadata = call.receiveMetadata(headers);\n        const encoding = (_a = metadata.get('grpc-encoding')[0]) !== null && _a !== void 0 ? _a : 'identity';\n        metadata.remove('grpc-encoding');\n\n        switch (handler.type) {\n          case 'unary':\n            handleUnary(call, handler, metadata, encoding);\n            break;\n\n          case 'clientStream':\n            handleClientStreaming(call, handler, metadata, encoding);\n            break;\n\n          case 'serverStream':\n            handleServerStreaming(call, handler, metadata, encoding);\n            break;\n\n          case 'bidi':\n            handleBidiStreaming(call, handler, metadata, encoding);\n            break;\n\n          default:\n            throw new Error(`Unknown handler type: ${handler.type}`);\n        }\n      } catch (err) {\n        if (!call) {\n          call = new server_call_1.Http2ServerCallStream(stream, null, this.options);\n          this.callTracker.addCallFailed();\n          channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n        }\n\n        if (err.code === undefined) {\n          err.code = constants_1.Status.INTERNAL;\n        }\n\n        call.sendError(err);\n      }\n    });\n    http2Server.on('session', session => {\n      var _a;\n\n      if (!this.started) {\n        session.destroy();\n        return;\n      }\n\n      const channelzRef = channelz_1.registerChannelzSocket((_a = session.socket.remoteAddress) !== null && _a !== void 0 ? _a : 'unknown', this.getChannelzSessionInfoGetter(session));\n      const channelzSessionInfo = {\n        ref: channelzRef,\n        streamTracker: new channelz_1.ChannelzCallTracker(),\n        messagesSent: 0,\n        messagesReceived: 0,\n        lastMessageSentTimestamp: null,\n        lastMessageReceivedTimestamp: null\n      };\n      this.sessions.set(session, channelzSessionInfo);\n      const clientAddress = session.socket.remoteAddress;\n\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);\n        this.sessionChildrenTracker.refChild(channelzRef);\n      }\n\n      session.on('close', () => {\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);\n          this.sessionChildrenTracker.unrefChild(channelzRef);\n          channelz_1.unregisterChannelzRef(channelzRef);\n        }\n\n        this.sessions.delete(session);\n      });\n    });\n  }\n\n}\n\nexports.Server = Server;\n\nasync function handleUnary(call, handler, metadata, encoding) {\n  const request = await call.receiveUnaryMessage(encoding);\n\n  if (request === undefined || call.cancelled) {\n    return;\n  }\n\n  const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);\n  handler.func(emitter, (err, value, trailer, flags) => {\n    call.sendUnaryMessage(err, value, trailer, flags);\n  });\n}\n\nfunction handleClientStreaming(call, handler, metadata, encoding) {\n  const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize, encoding);\n\n  function respond(err, value, trailer, flags) {\n    stream.destroy();\n    call.sendUnaryMessage(err, value, trailer, flags);\n  }\n\n  if (call.cancelled) {\n    return;\n  }\n\n  stream.on('error', respond);\n  handler.func(stream, respond);\n}\n\nasync function handleServerStreaming(call, handler, metadata, encoding) {\n  const request = await call.receiveUnaryMessage(encoding);\n\n  if (request === undefined || call.cancelled) {\n    return;\n  }\n\n  const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);\n  handler.func(stream);\n}\n\nfunction handleBidiStreaming(call, handler, metadata, encoding) {\n  const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize, encoding);\n\n  if (call.cancelled) {\n    return;\n  }\n\n  handler.func(stream);\n}","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\server.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as http2 from 'http2';\nimport { AddressInfo } from 'net';\n\nimport { ServiceError } from './call';\nimport { Status, LogVerbosity } from './constants';\nimport { Deserialize, Serialize, ServiceDefinition } from './make-client';\nimport { Metadata } from './metadata';\nimport {\n  BidiStreamingHandler,\n  ClientStreamingHandler,\n  HandleCall,\n  Handler,\n  HandlerType,\n  Http2ServerCallStream,\n  sendUnaryData,\n  ServerDuplexStream,\n  ServerDuplexStreamImpl,\n  ServerReadableStream,\n  ServerReadableStreamImpl,\n  ServerStreamingHandler,\n  ServerUnaryCall,\n  ServerUnaryCallImpl,\n  ServerWritableStream,\n  ServerWritableStreamImpl,\n  UnaryHandler,\n  ServerErrorResponse,\n  ServerStatusResponse,\n} from './server-call';\nimport { ServerCredentials } from './server-credentials';\nimport { ChannelOptions } from './channel-options';\nimport {\n  createResolver,\n  ResolverListener,\n  mapUriDefaultScheme,\n} from './resolver';\nimport * as logging from './logging';\nimport {\n  SubchannelAddress,\n  TcpSubchannelAddress,\n  isTcpSubchannelAddress,\n  subchannelAddressToString,\n  stringToSubchannelAddress,\n} from './subchannel-address';\nimport { parseUri } from './uri-parser';\nimport { ChannelzCallTracker, ChannelzChildrenTracker, ChannelzTrace, registerChannelzServer, registerChannelzSocket, ServerInfo, ServerRef, SocketInfo, SocketRef, TlsInfo, unregisterChannelzRef } from './channelz';\nimport { CipherNameAndProtocol, TLSSocket } from 'tls';\n\nconst TRACER_NAME = 'server';\n\ninterface BindResult {\n  port: number;\n  count: number;\n}\n\nfunction noop(): void {}\n\nfunction getUnimplementedStatusResponse(\n  methodName: string\n): Partial<ServiceError> {\n  return {\n    code: Status.UNIMPLEMENTED,\n    details: `The server does not implement the method ${methodName}`,\n    metadata: new Metadata(),\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\ntype UntypedUnaryHandler = UnaryHandler<any, any>;\ntype UntypedClientStreamingHandler = ClientStreamingHandler<any, any>;\ntype UntypedServerStreamingHandler = ServerStreamingHandler<any, any>;\ntype UntypedBidiStreamingHandler = BidiStreamingHandler<any, any>;\nexport type UntypedHandleCall = HandleCall<any, any>;\ntype UntypedHandler = Handler<any, any>;\nexport interface UntypedServiceImplementation {\n  [name: string]: UntypedHandleCall;\n}\n\nfunction getDefaultHandler(handlerType: HandlerType, methodName: string) {\n  const unimplementedStatusResponse = getUnimplementedStatusResponse(\n    methodName\n  );\n  switch (handlerType) {\n    case 'unary':\n      return (\n        call: ServerUnaryCall<any, any>,\n        callback: sendUnaryData<any>\n      ) => {\n        callback(unimplementedStatusResponse as ServiceError, null);\n      };\n    case 'clientStream':\n      return (\n        call: ServerReadableStream<any, any>,\n        callback: sendUnaryData<any>\n      ) => {\n        callback(unimplementedStatusResponse as ServiceError, null);\n      };\n    case 'serverStream':\n      return (call: ServerWritableStream<any, any>) => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    case 'bidi':\n      return (call: ServerDuplexStream<any, any>) => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    default:\n      throw new Error(`Invalid handlerType ${handlerType}`);\n  }\n}\n\ninterface ChannelzSessionInfo {\n  ref: SocketRef;\n  streamTracker: ChannelzCallTracker;\n  messagesSent: number;\n  messagesReceived: number;\n  lastMessageSentTimestamp: Date | null;\n  lastMessageReceivedTimestamp: Date | null;\n}\n\ninterface ChannelzListenerInfo {\n  ref: SocketRef;\n}\n\nexport class Server {\n  private http2ServerList: { server: (http2.Http2Server | http2.Http2SecureServer), channelzRef: SocketRef }[] = [];\n\n  private handlers: Map<string, UntypedHandler> = new Map<\n    string,\n    UntypedHandler\n  >();\n  private sessions = new Map<http2.ServerHttp2Session, ChannelzSessionInfo>();\n  private started = false;\n  private options: ChannelOptions;\n\n  // Channelz Info\n  private readonly channelzEnabled: boolean = true;\n  private channelzRef: ServerRef;\n  private channelzTrace = new ChannelzTrace();\n  private callTracker = new ChannelzCallTracker();\n  private listenerChildrenTracker = new ChannelzChildrenTracker();\n  private sessionChildrenTracker = new ChannelzChildrenTracker();\n\n  constructor(options?: ChannelOptions) {\n    this.options = options ?? {};\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    if (this.channelzEnabled) {\n      this.channelzRef = registerChannelzServer(() => this.getChannelzInfo());\n      this.channelzTrace.addTrace('CT_INFO', 'Server created');\n      this.trace('Server constructed');\n    } else {\n      // Dummy channelz ref that will never be used\n      this.channelzRef = {\n        kind: 'server',\n        id: -1\n      };\n    }\n  }\n\n  private getChannelzInfo(): ServerInfo {\n    return {\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      listenerChildren: this.listenerChildrenTracker.getChildLists(),\n      sessionChildren: this.sessionChildrenTracker.getChildLists()\n    };\n  }\n\n  private getChannelzSessionInfoGetter(session: http2.ServerHttp2Session): () => SocketInfo {\n    return () => {\n      const sessionInfo = this.sessions.get(session)!;\n      const sessionSocket = session.socket;\n      const remoteAddress = sessionSocket.remoteAddress ? stringToSubchannelAddress(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n      const localAddress = sessionSocket.localAddress ? stringToSubchannelAddress(sessionSocket.localAddress!, sessionSocket.localPort) : null;\n      let tlsInfo: TlsInfo | null;\n      if (session.encrypted) {\n        const tlsSocket: TLSSocket = sessionSocket as TLSSocket;\n        const cipherInfo: CipherNameAndProtocol & {standardName?: string} = tlsSocket.getCipher();\n        const certificate = tlsSocket.getCertificate();\n        const peerCertificate = tlsSocket.getPeerCertificate();\n        tlsInfo = {\n          cipherSuiteStandardName: cipherInfo.standardName ?? null,\n          cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n          localCertificate: (certificate && 'raw' in certificate) ? certificate.raw : null,\n          remoteCertificate: (peerCertificate && 'raw' in peerCertificate) ? peerCertificate.raw : null\n        };\n      } else {\n        tlsInfo = null;\n      }\n      const socketInfo: SocketInfo = {\n        remoteAddress: remoteAddress,\n        localAddress: localAddress,\n        security: tlsInfo,\n        remoteName: null,\n        streamsStarted: sessionInfo.streamTracker.callsStarted,\n        streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n        streamsFailed: sessionInfo.streamTracker.callsFailed,\n        messagesSent: sessionInfo.messagesSent,\n        messagesReceived: sessionInfo.messagesReceived,\n        keepAlivesSent: 0,\n        lastLocalStreamCreatedTimestamp: null,\n        lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n        lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n        lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n        localFlowControlWindow: session.state.localWindowSize ?? null,\n        remoteFlowControlWindow: session.state.remoteWindowSize ?? null\n      };\n      return socketInfo;\n    };\n  }\n\n  private trace(text: string): void {\n    logging.trace(LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);\n  }\n  \n\n  addProtoService(): void {\n    throw new Error('Not implemented. Use addService() instead');\n  }\n\n  addService(\n    service: ServiceDefinition,\n    implementation: UntypedServiceImplementation\n  ): void {\n    if (\n      service === null ||\n      typeof service !== 'object' ||\n      implementation === null ||\n      typeof implementation !== 'object'\n    ) {\n      throw new Error('addService() requires two objects as arguments');\n    }\n\n    const serviceKeys = Object.keys(service);\n\n    if (serviceKeys.length === 0) {\n      throw new Error('Cannot add an empty service to a server');\n    }\n\n    serviceKeys.forEach((name) => {\n      const attrs = service[name];\n      let methodType: HandlerType;\n\n      if (attrs.requestStream) {\n        if (attrs.responseStream) {\n          methodType = 'bidi';\n        } else {\n          methodType = 'clientStream';\n        }\n      } else {\n        if (attrs.responseStream) {\n          methodType = 'serverStream';\n        } else {\n          methodType = 'unary';\n        }\n      }\n\n      let implFn = implementation[name];\n      let impl;\n\n      if (implFn === undefined && typeof attrs.originalName === 'string') {\n        implFn = implementation[attrs.originalName];\n      }\n\n      if (implFn !== undefined) {\n        impl = implFn.bind(implementation);\n      } else {\n        impl = getDefaultHandler(methodType, name);\n      }\n\n      const success = this.register(\n        attrs.path,\n        impl as UntypedHandleCall,\n        attrs.responseSerialize,\n        attrs.requestDeserialize,\n        methodType\n      );\n\n      if (success === false) {\n        throw new Error(`Method handler for ${attrs.path} already provided.`);\n      }\n    });\n  }\n\n  removeService(service: ServiceDefinition): void {\n    if (service === null || typeof service !== 'object') {\n      throw new Error('removeService() requires object as argument');\n    }\n\n    const serviceKeys = Object.keys(service);\n    serviceKeys.forEach((name) => {\n      const attrs = service[name];\n      this.unregister(attrs.path);\n    });\n  }\n\n  bind(port: string, creds: ServerCredentials): void {\n    throw new Error('Not implemented. Use bindAsync() instead');\n  }\n\n  bindAsync(\n    port: string,\n    creds: ServerCredentials,\n    callback: (error: Error | null, port: number) => void\n  ): void {\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n\n    if (typeof port !== 'string') {\n      throw new TypeError('port must be a string');\n    }\n\n    if (creds === null || !(creds instanceof ServerCredentials)) {\n      throw new TypeError('creds must be a ServerCredentials object');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n\n    const initialPortUri = parseUri(port);\n    if (initialPortUri === null) {\n      throw new Error(`Could not parse port \"${port}\"`);\n    }\n    const portUri = mapUriDefaultScheme(initialPortUri);\n    if (portUri === null) {\n      throw new Error(`Could not get a default scheme for port \"${port}\"`);\n    }\n\n    const serverOptions: http2.ServerOptions = {\n      maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER,\n    };\n    if ('grpc-node.max_session_memory' in this.options) {\n      serverOptions.maxSessionMemory = this.options[\n        'grpc-node.max_session_memory'\n      ];\n    }\n    if ('grpc.max_concurrent_streams' in this.options) {\n      serverOptions.settings = {\n        maxConcurrentStreams: this.options['grpc.max_concurrent_streams'],\n      };\n    }\n\n    const deferredCallback = (error: Error | null, port: number) => {\n      process.nextTick(() => callback(error, port));\n    }\n\n    const setupServer = (): http2.Http2Server | http2.Http2SecureServer => {\n      let http2Server: http2.Http2Server | http2.Http2SecureServer;\n      if (creds._isSecure()) {\n        const secureServerOptions = Object.assign(\n          serverOptions,\n          creds._getSettings()!\n        );\n        http2Server = http2.createSecureServer(secureServerOptions);\n        http2Server.on('secureConnection', (socket: TLSSocket) => {\n          /* These errors need to be handled by the user of Http2SecureServer,\n           * according to https://github.com/nodejs/node/issues/35824 */\n          socket.on('error', (e: Error) => {\n            this.trace('An incoming TLS connection closed with error: ' + e.message);\n          });\n        });\n      } else {\n        http2Server = http2.createServer(serverOptions);\n      }\n\n      http2Server.setTimeout(0, noop);\n      this._setupHandlers(http2Server);\n      return http2Server;\n    };\n\n    const bindSpecificPort = (\n      addressList: SubchannelAddress[],\n      portNum: number,\n      previousCount: number\n    ): Promise<BindResult> => {\n      if (addressList.length === 0) {\n        return Promise.resolve({ port: portNum, count: previousCount });\n      }\n      return Promise.all(\n        addressList.map((address) => {\n          this.trace('Attempting to bind ' + subchannelAddressToString(address));\n          let addr: SubchannelAddress;\n          if (isTcpSubchannelAddress(address)) {\n            addr = {\n              host: (address as TcpSubchannelAddress).host,\n              port: portNum,\n            };\n          } else {\n            addr = address;\n          }\n\n          const http2Server = setupServer();\n          return new Promise<number | Error>((resolve, reject) => {\n            const onError = (err: Error) => {\n              this.trace('Failed to bind ' + subchannelAddressToString(address) + ' with error ' + err.message);\n              resolve(err);\n            }\n\n            http2Server.once('error', onError);\n\n            http2Server.listen(addr, () => {\n              const boundAddress = http2Server.address()!;\n              let boundSubchannelAddress: SubchannelAddress;\n              if (typeof boundAddress === 'string') {\n                boundSubchannelAddress = {\n                  path: boundAddress\n                };\n              } else {\n                boundSubchannelAddress = {\n                  host: boundAddress.address,\n                  port: boundAddress.port\n                }\n              }\n              const channelzRef = registerChannelzSocket(subchannelAddressToString(boundSubchannelAddress), () => {\n                return {\n                  localAddress: boundSubchannelAddress,\n                  remoteAddress: null,\n                  security: null,\n                  remoteName: null,\n                  streamsStarted: 0,\n                  streamsSucceeded: 0,\n                  streamsFailed: 0,\n                  messagesSent: 0,\n                  messagesReceived: 0,\n                  keepAlivesSent: 0,\n                  lastLocalStreamCreatedTimestamp: null,\n                  lastRemoteStreamCreatedTimestamp: null,\n                  lastMessageSentTimestamp: null,\n                  lastMessageReceivedTimestamp: null,\n                  localFlowControlWindow: null,\n                  remoteFlowControlWindow: null\n                };\n              });\n              this.listenerChildrenTracker.refChild(channelzRef);\n              this.http2ServerList.push({server: http2Server, channelzRef: channelzRef});\n              this.trace('Successfully bound ' + subchannelAddressToString(boundSubchannelAddress));\n              resolve('port' in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);\n              http2Server.removeListener('error', onError);\n            });\n          });\n        })\n      ).then((results) => {\n        let count = 0;\n        for (const result of results) {\n          if (typeof result === 'number') {\n            count += 1;\n            if (result !== portNum) {\n              throw new Error(\n                'Invalid state: multiple port numbers added from single address'\n              );\n            }\n          }\n        }\n        return {\n          port: portNum,\n          count: count + previousCount,\n        };\n      });\n    };\n\n    const bindWildcardPort = (\n      addressList: SubchannelAddress[]\n    ): Promise<BindResult> => {\n      if (addressList.length === 0) {\n        return Promise.resolve<BindResult>({ port: 0, count: 0 });\n      }\n      const address = addressList[0];\n      const http2Server = setupServer();\n      return new Promise<BindResult>((resolve, reject) => {\n        const onError = (err: Error) => {\n          this.trace('Failed to bind ' + subchannelAddressToString(address) + ' with error ' + err.message);\n          resolve(bindWildcardPort(addressList.slice(1)));\n        }\n\n        http2Server.once('error', onError);\n\n        http2Server.listen(address, () => {\n          const boundAddress = http2Server.address() as AddressInfo;\n          const boundSubchannelAddress: SubchannelAddress = {\n            host: boundAddress.address,\n            port: boundAddress.port\n          };\n          const channelzRef = registerChannelzSocket(subchannelAddressToString(boundSubchannelAddress), () => {\n            return {\n              localAddress: boundSubchannelAddress,\n              remoteAddress: null,\n              security: null,\n              remoteName: null,\n              streamsStarted: 0,\n              streamsSucceeded: 0,\n              streamsFailed: 0,\n              messagesSent: 0,\n              messagesReceived: 0,\n              keepAlivesSent: 0,\n              lastLocalStreamCreatedTimestamp: null,\n              lastRemoteStreamCreatedTimestamp: null,\n              lastMessageSentTimestamp: null,\n              lastMessageReceivedTimestamp: null,\n              localFlowControlWindow: null,\n              remoteFlowControlWindow: null\n            };\n          });\n          this.listenerChildrenTracker.refChild(channelzRef);\n          this.http2ServerList.push({server: http2Server, channelzRef: channelzRef});\n          this.trace('Successfully bound ' + subchannelAddressToString(boundSubchannelAddress));\n          resolve(\n            bindSpecificPort(\n              addressList.slice(1),\n              boundAddress.port,\n              1\n            )\n          );\n          http2Server.removeListener('error', onError);\n        });\n      });\n    };\n\n    const resolverListener: ResolverListener = {\n      onSuccessfulResolution: (\n        addressList,\n        serviceConfig,\n        serviceConfigError\n      ) => {\n        // We only want one resolution result. Discard all future results\n        resolverListener.onSuccessfulResolution = () => {};\n        if (addressList.length === 0) {\n          deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);\n          return;\n        }\n        let bindResultPromise: Promise<BindResult>;\n        if (isTcpSubchannelAddress(addressList[0])) {\n          if (addressList[0].port === 0) {\n            bindResultPromise = bindWildcardPort(addressList);\n          } else {\n            bindResultPromise = bindSpecificPort(\n              addressList,\n              addressList[0].port,\n              0\n            );\n          }\n        } else {\n          // Use an arbitrary non-zero port for non-TCP addresses\n          bindResultPromise = bindSpecificPort(addressList, 1, 0);\n        }\n        bindResultPromise.then(\n          (bindResult) => {\n            if (bindResult.count === 0) {\n              const errorString = `No address added out of total ${addressList.length} resolved`;\n              logging.log(LogVerbosity.ERROR, errorString);\n              deferredCallback(new Error(errorString), 0);\n            } else {\n              if (bindResult.count < addressList.length) {\n                logging.log(\n                  LogVerbosity.INFO,\n                  `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`\n                );\n              }\n              deferredCallback(null, bindResult.port);\n            }\n          },\n          (error) => {\n            const errorString = `No address added out of total ${addressList.length} resolved`;\n            logging.log(LogVerbosity.ERROR, errorString);\n            deferredCallback(new Error(errorString), 0);\n          }\n        );\n      },\n      onError: (error) => {\n        deferredCallback(new Error(error.details), 0);\n      },\n    };\n\n    const resolver = createResolver(portUri, resolverListener, this.options);\n    resolver.updateResolution();\n  }\n\n  forceShutdown(): void {\n    // Close the server if it is still running.\n\n    for (const {server: http2Server, channelzRef: ref} of this.http2ServerList) {\n      if (http2Server.listening) {\n        http2Server.close(() => {\n          this.listenerChildrenTracker.unrefChild(ref);\n          unregisterChannelzRef(ref);\n        });\n      }\n    }\n\n    this.started = false;\n\n    // Always destroy any available sessions. It's possible that one or more\n    // tryShutdown() calls are in progress. Don't wait on them to finish.\n    this.sessions.forEach((channelzInfo, session) => {\n      // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n      // recognize destroy(code) as a valid signature.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      session.destroy(http2.constants.NGHTTP2_CANCEL as any);\n    });\n    this.sessions.clear();\n    unregisterChannelzRef(this.channelzRef);\n  }\n\n  register<RequestType, ResponseType>(\n    name: string,\n    handler: HandleCall<RequestType, ResponseType>,\n    serialize: Serialize<ResponseType>,\n    deserialize: Deserialize<RequestType>,\n    type: string\n  ): boolean {\n    if (this.handlers.has(name)) {\n      return false;\n    }\n\n    this.handlers.set(name, {\n      func: handler,\n      serialize,\n      deserialize,\n      type,\n      path: name,\n    } as UntypedHandler);\n    return true;\n  }\n\n  unregister(name: string): boolean {\n    return this.handlers.delete(name);\n  }\n\n  start(): void {\n    if (\n      this.http2ServerList.length === 0 ||\n      this.http2ServerList.every(\n        ({server: http2Server}) => http2Server.listening !== true\n      )\n    ) {\n      throw new Error('server must be bound in order to start');\n    }\n\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Starting');\n    }\n    this.started = true;\n  }\n\n  tryShutdown(callback: (error?: Error) => void): void {\n    const wrappedCallback = (error?: Error) => {\n      unregisterChannelzRef(this.channelzRef);\n      callback(error);\n    };\n    let pendingChecks = 0;\n\n    function maybeCallback(): void {\n      pendingChecks--;\n\n      if (pendingChecks === 0) {\n        wrappedCallback();\n      }\n    }\n\n    // Close the server if necessary.\n    this.started = false;\n\n    for (const {server: http2Server, channelzRef: ref} of this.http2ServerList) {\n      if (http2Server.listening) {\n        pendingChecks++;\n        http2Server.close(() => {\n          this.listenerChildrenTracker.unrefChild(ref);\n          unregisterChannelzRef(ref);\n          maybeCallback();\n        });\n      }\n    }\n\n    this.sessions.forEach((channelzInfo, session) => {\n      if (!session.closed) {\n        pendingChecks += 1;\n        session.close(maybeCallback);\n      }\n    });\n    if (pendingChecks === 0) {\n      wrappedCallback();\n    }\n  }\n\n  addHttp2Port(): void {\n    throw new Error('Not yet implemented');\n  }\n\n  /**\n   * Get the channelz reference object for this server. The returned value is\n   * garbage if channelz is disabled for this server.\n   * @returns \n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n\n  private _setupHandlers(\n    http2Server: http2.Http2Server | http2.Http2SecureServer\n  ): void {\n    if (http2Server === null) {\n      return;\n    }\n\n    http2Server.on(\n      'stream',\n      (stream: http2.ServerHttp2Stream, headers: http2.IncomingHttpHeaders) => {\n        const channelzSessionInfo = this.sessions.get(stream.session as http2.ServerHttp2Session);\n        this.callTracker.addCallStarted();\n        channelzSessionInfo?.streamTracker.addCallStarted();\n        const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n\n        if (\n          typeof contentType !== 'string' ||\n          !contentType.startsWith('application/grpc')\n        ) {\n          stream.respond(\n            {\n              [http2.constants.HTTP2_HEADER_STATUS]:\n                http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE,\n            },\n            { endStream: true }\n          );\n          this.callTracker.addCallFailed();\n          channelzSessionInfo?.streamTracker.addCallFailed();\n          return;\n        }\n\n        let call: Http2ServerCallStream<any, any> | null = null;\n\n        try {\n          const path = headers[http2.constants.HTTP2_HEADER_PATH] as string;\n          const serverAddress = http2Server.address();\n          let serverAddressString = 'null';\n          if (serverAddress) {\n            if (typeof serverAddress === 'string') {\n              serverAddressString = serverAddress;\n            } else {\n              serverAddressString =\n                serverAddress.address + ':' + serverAddress.port;\n            }\n          }\n          this.trace(\n            'Received call to method ' +\n              path +\n              ' at address ' +\n              serverAddressString\n          );\n          const handler = this.handlers.get(path);\n\n          if (handler === undefined) {\n            this.trace(\n              'No handler registered for method ' +\n                path +\n                '. Sending UNIMPLEMENTED status.'\n            );\n            throw getUnimplementedStatusResponse(path);\n          }\n\n          call = new Http2ServerCallStream(stream, handler, this.options);\n          call.once('callEnd', (code: Status) => {\n            if (code === Status.OK) {\n              this.callTracker.addCallSucceeded();\n            } else {\n              this.callTracker.addCallFailed();\n            }\n          });\n          if (channelzSessionInfo) {\n            call.once('streamEnd', (success: boolean) => {\n              if (success) {\n                channelzSessionInfo.streamTracker.addCallSucceeded();\n              } else {\n                channelzSessionInfo.streamTracker.addCallFailed();\n              }\n            });\n            call.on('sendMessage', () => {\n              channelzSessionInfo.messagesSent += 1;\n              channelzSessionInfo.lastMessageSentTimestamp = new Date();\n            });\n            call.on('receiveMessage', () => {\n              channelzSessionInfo.messagesReceived += 1;\n              channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n            });\n          }\n          const metadata = call.receiveMetadata(headers);\n          const encoding = (metadata.get('grpc-encoding')[0] as string | undefined) ?? 'identity';\n          metadata.remove('grpc-encoding');\n\n          switch (handler.type) {\n            case 'unary':\n              handleUnary(call, handler as UntypedUnaryHandler, metadata, encoding);\n              break;\n            case 'clientStream':\n              handleClientStreaming(\n                call,\n                handler as UntypedClientStreamingHandler,\n                metadata,\n                encoding\n              );\n              break;\n            case 'serverStream':\n              handleServerStreaming(\n                call,\n                handler as UntypedServerStreamingHandler,\n                metadata,\n                encoding\n              );\n              break;\n            case 'bidi':\n              handleBidiStreaming(\n                call,\n                handler as UntypedBidiStreamingHandler,\n                metadata,\n                encoding\n              );\n              break;\n            default:\n              throw new Error(`Unknown handler type: ${handler.type}`);\n          }\n        } catch (err) {\n          if (!call) {\n            call = new Http2ServerCallStream(stream, null!, this.options);\n            this.callTracker.addCallFailed();\n            channelzSessionInfo?.streamTracker.addCallFailed()\n          }\n\n          if (err.code === undefined) {\n            err.code = Status.INTERNAL;\n          }\n\n          call.sendError(err);\n        }\n      }\n    );\n\n    http2Server.on('session', (session) => {\n      if (!this.started) {\n        session.destroy();\n        return;\n      }\n\n      const channelzRef = registerChannelzSocket(session.socket.remoteAddress ?? 'unknown', this.getChannelzSessionInfoGetter(session));\n\n      const channelzSessionInfo: ChannelzSessionInfo = {\n        ref: channelzRef,\n        streamTracker: new ChannelzCallTracker(),\n        messagesSent: 0,\n        messagesReceived: 0,\n        lastMessageSentTimestamp: null,\n        lastMessageReceivedTimestamp: null\n      };\n\n      this.sessions.set(session, channelzSessionInfo);\n      const clientAddress = session.socket.remoteAddress;\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);\n        this.sessionChildrenTracker.refChild(channelzRef);\n      }\n      session.on('close', () => {\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);\n          this.sessionChildrenTracker.unrefChild(channelzRef);\n          unregisterChannelzRef(channelzRef);\n        }\n        this.sessions.delete(session);\n      });\n    });\n  }\n}\n\nasync function handleUnary<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: UnaryHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): Promise<void> {\n  const request = await call.receiveUnaryMessage(encoding);\n\n  if (request === undefined || call.cancelled) {\n    return;\n  }\n\n  const emitter = new ServerUnaryCallImpl<RequestType, ResponseType>(\n    call,\n    metadata,\n    request\n  );\n\n  handler.func(\n    emitter,\n    (\n      err: ServerErrorResponse | ServerStatusResponse | null,\n      value?: ResponseType | null,\n      trailer?: Metadata,\n      flags?: number\n    ) => {\n      call.sendUnaryMessage(err, value, trailer, flags);\n    }\n  );\n}\n\nfunction handleClientStreaming<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: ClientStreamingHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): void {\n  const stream = new ServerReadableStreamImpl<RequestType, ResponseType>(\n    call,\n    metadata,\n    handler.deserialize,\n    encoding\n  );\n\n  function respond(\n    err: ServerErrorResponse | ServerStatusResponse | null,\n    value?: ResponseType | null,\n    trailer?: Metadata,\n    flags?: number\n  ) {\n    stream.destroy();\n    call.sendUnaryMessage(err, value, trailer, flags);\n  }\n\n  if (call.cancelled) {\n    return;\n  }\n\n  stream.on('error', respond);\n  handler.func(stream, respond);\n}\n\nasync function handleServerStreaming<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: ServerStreamingHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): Promise<void> {\n  const request = await call.receiveUnaryMessage(encoding);\n\n  if (request === undefined || call.cancelled) {\n    return;\n  }\n\n  const stream = new ServerWritableStreamImpl<RequestType, ResponseType>(\n    call,\n    metadata,\n    handler.serialize,\n    request\n  );\n\n  handler.func(stream);\n}\n\nfunction handleBidiStreaming<RequestType, ResponseType>(\n  call: Http2ServerCallStream<RequestType, ResponseType>,\n  handler: BidiStreamingHandler<RequestType, ResponseType>,\n  metadata: Metadata,\n  encoding: string\n): void {\n  const stream = new ServerDuplexStreamImpl<RequestType, ResponseType>(\n    call,\n    metadata,\n    handler.serialize,\n    handler.deserialize,\n    encoding\n  );\n\n  if (call.cancelled) {\n    return;\n  }\n\n  handler.func(stream);\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.getChannelzServiceDefinition = exports.getChannelzHandlers = exports.unregisterChannelzRef = exports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTracker = exports.ChannelzChildrenTracker = exports.ChannelzTrace = void 0;\n\nconst net_1 = require(\"net\");\n\nconst connectivity_state_1 = require(\"./connectivity-state\");\n\nconst constants_1 = require(\"./constants\");\n\nconst subchannel_address_1 = require(\"./subchannel-address\");\n\nconst admin_1 = require(\"./admin\");\n\nconst make_client_1 = require(\"./make-client\");\n\nfunction channelRefToMessage(ref) {\n  return {\n    channel_id: ref.id,\n    name: ref.name\n  };\n}\n\nfunction subchannelRefToMessage(ref) {\n  return {\n    subchannel_id: ref.id,\n    name: ref.name\n  };\n}\n\nfunction serverRefToMessage(ref) {\n  return {\n    server_id: ref.id\n  };\n}\n\nfunction socketRefToMessage(ref) {\n  return {\n    socket_id: ref.id,\n    name: ref.name\n  };\n}\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */\n\n\nconst TARGET_RETAINED_TRACES = 32;\n\nclass ChannelzTrace {\n  constructor() {\n    this.events = [];\n    this.eventsLogged = 0;\n    this.creationTimestamp = new Date();\n  }\n\n  addTrace(severity, description, child) {\n    const timestamp = new Date();\n    this.events.push({\n      description: description,\n      severity: severity,\n      timestamp: timestamp,\n      childChannel: (child === null || child === void 0 ? void 0 : child.kind) === 'channel' ? child : undefined,\n      childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === 'subchannel' ? child : undefined\n    }); // Whenever the trace array gets too large, discard the first half\n\n    if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n      this.events = this.events.slice(TARGET_RETAINED_TRACES);\n    }\n\n    this.eventsLogged += 1;\n  }\n\n  getTraceMessage() {\n    return {\n      creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n      num_events_logged: this.eventsLogged,\n      events: this.events.map(event => {\n        return {\n          description: event.description,\n          severity: event.severity,\n          timestamp: dateToProtoTimestamp(event.timestamp),\n          channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,\n          subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null\n        };\n      })\n    };\n  }\n\n}\n\nexports.ChannelzTrace = ChannelzTrace;\n\nclass ChannelzChildrenTracker {\n  constructor() {\n    this.channelChildren = new Map();\n    this.subchannelChildren = new Map();\n    this.socketChildren = new Map();\n  }\n\n  refChild(child) {\n    var _a, _b, _c;\n\n    switch (child.kind) {\n      case 'channel':\n        {\n          let trackedChild = (_a = this.channelChildren.get(child.id)) !== null && _a !== void 0 ? _a : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.channelChildren.set(child.id, trackedChild);\n          break;\n        }\n\n      case 'subchannel':\n        {\n          let trackedChild = (_b = this.subchannelChildren.get(child.id)) !== null && _b !== void 0 ? _b : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.subchannelChildren.set(child.id, trackedChild);\n          break;\n        }\n\n      case 'socket':\n        {\n          let trackedChild = (_c = this.socketChildren.get(child.id)) !== null && _c !== void 0 ? _c : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.socketChildren.set(child.id, trackedChild);\n          break;\n        }\n    }\n  }\n\n  unrefChild(child) {\n    switch (child.kind) {\n      case 'channel':\n        {\n          let trackedChild = this.channelChildren.get(child.id);\n\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n\n            if (trackedChild.count === 0) {\n              this.channelChildren.delete(child.id);\n            } else {\n              this.channelChildren.set(child.id, trackedChild);\n            }\n          }\n\n          break;\n        }\n\n      case 'subchannel':\n        {\n          let trackedChild = this.subchannelChildren.get(child.id);\n\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n\n            if (trackedChild.count === 0) {\n              this.subchannelChildren.delete(child.id);\n            } else {\n              this.subchannelChildren.set(child.id, trackedChild);\n            }\n          }\n\n          break;\n        }\n\n      case 'socket':\n        {\n          let trackedChild = this.socketChildren.get(child.id);\n\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n\n            if (trackedChild.count === 0) {\n              this.socketChildren.delete(child.id);\n            } else {\n              this.socketChildren.set(child.id, trackedChild);\n            }\n          }\n\n          break;\n        }\n    }\n  }\n\n  getChildLists() {\n    const channels = [];\n\n    for (const {\n      ref\n    } of this.channelChildren.values()) {\n      channels.push(ref);\n    }\n\n    const subchannels = [];\n\n    for (const {\n      ref\n    } of this.subchannelChildren.values()) {\n      subchannels.push(ref);\n    }\n\n    const sockets = [];\n\n    for (const {\n      ref\n    } of this.socketChildren.values()) {\n      sockets.push(ref);\n    }\n\n    return {\n      channels,\n      subchannels,\n      sockets\n    };\n  }\n\n}\n\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\n\nclass ChannelzCallTracker {\n  constructor() {\n    this.callsStarted = 0;\n    this.callsSucceeded = 0;\n    this.callsFailed = 0;\n    this.lastCallStartedTimestamp = null;\n  }\n\n  addCallStarted() {\n    this.callsStarted += 1;\n    this.lastCallStartedTimestamp = new Date();\n  }\n\n  addCallSucceeded() {\n    this.callsSucceeded += 1;\n  }\n\n  addCallFailed() {\n    this.callsFailed += 1;\n  }\n\n}\n\nexports.ChannelzCallTracker = ChannelzCallTracker;\nlet nextId = 1;\n\nfunction getNextId() {\n  return nextId++;\n}\n\nconst channels = [];\nconst subchannels = [];\nconst servers = [];\nconst sockets = [];\n\nfunction registerChannelzChannel(name, getInfo) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'channel'\n  };\n  channels[id] = {\n    ref,\n    getInfo\n  };\n  return ref;\n}\n\nexports.registerChannelzChannel = registerChannelzChannel;\n\nfunction registerChannelzSubchannel(name, getInfo) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'subchannel'\n  };\n  subchannels[id] = {\n    ref,\n    getInfo\n  };\n  return ref;\n}\n\nexports.registerChannelzSubchannel = registerChannelzSubchannel;\n\nfunction registerChannelzServer(getInfo) {\n  const id = getNextId();\n  const ref = {\n    id,\n    kind: 'server'\n  };\n  servers[id] = {\n    ref,\n    getInfo\n  };\n  return ref;\n}\n\nexports.registerChannelzServer = registerChannelzServer;\n\nfunction registerChannelzSocket(name, getInfo) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'socket'\n  };\n  sockets[id] = {\n    ref,\n    getInfo\n  };\n  return ref;\n}\n\nexports.registerChannelzSocket = registerChannelzSocket;\n\nfunction unregisterChannelzRef(ref) {\n  switch (ref.kind) {\n    case 'channel':\n      delete channels[ref.id];\n      return;\n\n    case 'subchannel':\n      delete subchannels[ref.id];\n      return;\n\n    case 'server':\n      delete servers[ref.id];\n      return;\n\n    case 'socket':\n      delete sockets[ref.id];\n      return;\n  }\n}\n\nexports.unregisterChannelzRef = unregisterChannelzRef;\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */\n\nfunction parseIPv6Section(addressSection) {\n  const numberValue = Number.parseInt(addressSection, 16);\n  return [numberValue / 256 | 0, numberValue % 256];\n}\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */\n\n\nfunction parseIPv6Chunk(addressChunk) {\n  if (addressChunk === '') {\n    return [];\n  }\n\n  const bytePairs = addressChunk.split(':').map(section => parseIPv6Section(section));\n  const result = [];\n  return result.concat(...bytePairs);\n}\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns\n */\n\n\nfunction ipAddressStringToBuffer(ipAddress) {\n  if (net_1.isIPv4(ipAddress)) {\n    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\n  } else if (net_1.isIPv6(ipAddress)) {\n    let leftSection;\n    let rightSection;\n    const doubleColonIndex = ipAddress.indexOf('::');\n\n    if (doubleColonIndex === -1) {\n      leftSection = ipAddress;\n      rightSection = '';\n    } else {\n      leftSection = ipAddress.substring(0, doubleColonIndex);\n      rightSection = ipAddress.substring(doubleColonIndex + 2);\n    }\n\n    const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n    const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n    const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n    return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\n  } else {\n    return null;\n  }\n}\n\nfunction connectivityStateToMessage(state) {\n  switch (state) {\n    case connectivity_state_1.ConnectivityState.CONNECTING:\n      return {\n        state: 'CONNECTING'\n      };\n\n    case connectivity_state_1.ConnectivityState.IDLE:\n      return {\n        state: 'IDLE'\n      };\n\n    case connectivity_state_1.ConnectivityState.READY:\n      return {\n        state: 'READY'\n      };\n\n    case connectivity_state_1.ConnectivityState.SHUTDOWN:\n      return {\n        state: 'SHUTDOWN'\n      };\n\n    case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n      return {\n        state: 'TRANSIENT_FAILURE'\n      };\n\n    default:\n      return {\n        state: 'UNKNOWN'\n      };\n  }\n}\n\nfunction dateToProtoTimestamp(date) {\n  if (!date) {\n    return null;\n  }\n\n  const millisSinceEpoch = date.getTime();\n  return {\n    seconds: millisSinceEpoch / 1000 | 0,\n    nanos: millisSinceEpoch % 1000 * 1000000\n  };\n}\n\nfunction getChannelMessage(channelEntry) {\n  const resolvedInfo = channelEntry.getInfo();\n  return {\n    ref: channelRefToMessage(channelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    channel_ref: resolvedInfo.children.channels.map(ref => channelRefToMessage(ref)),\n    subchannel_ref: resolvedInfo.children.subchannels.map(ref => subchannelRefToMessage(ref))\n  };\n}\n\nfunction GetChannel(call, callback) {\n  const channelId = Number.parseInt(call.request.channel_id);\n  const channelEntry = channels[channelId];\n\n  if (channelEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No channel data found for id ' + channelId\n    });\n    return;\n  }\n\n  callback(null, {\n    channel: getChannelMessage(channelEntry)\n  });\n}\n\nfunction GetTopChannels(call, callback) {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList = [];\n  let i = Number.parseInt(call.request.start_channel_id);\n\n  for (; i < channels.length; i++) {\n    const channelEntry = channels[i];\n\n    if (channelEntry === undefined) {\n      continue;\n    }\n\n    resultList.push(getChannelMessage(channelEntry));\n\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n\n  callback(null, {\n    channel: resultList,\n    end: i >= servers.length\n  });\n}\n\nfunction getServerMessage(serverEntry) {\n  const resolvedInfo = serverEntry.getInfo();\n  return {\n    ref: serverRefToMessage(serverEntry.ref),\n    data: {\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    listen_socket: resolvedInfo.listenerChildren.sockets.map(ref => socketRefToMessage(ref))\n  };\n}\n\nfunction GetServer(call, callback) {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n\n  if (serverEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n\n  callback(null, {\n    server: getServerMessage(serverEntry)\n  });\n}\n\nfunction GetServers(call, callback) {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList = [];\n  let i = Number.parseInt(call.request.start_server_id);\n\n  for (; i < servers.length; i++) {\n    const serverEntry = servers[i];\n\n    if (serverEntry === undefined) {\n      continue;\n    }\n\n    resultList.push(getServerMessage(serverEntry));\n\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n\n  callback(null, {\n    server: resultList,\n    end: i >= servers.length\n  });\n}\n\nfunction GetSubchannel(call, callback) {\n  const subchannelId = Number.parseInt(call.request.subchannel_id);\n  const subchannelEntry = subchannels[subchannelId];\n\n  if (subchannelEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No subchannel data found for id ' + subchannelId\n    });\n    return;\n  }\n\n  const resolvedInfo = subchannelEntry.getInfo();\n  const subchannelMessage = {\n    ref: subchannelRefToMessage(subchannelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    socket_ref: resolvedInfo.children.sockets.map(ref => socketRefToMessage(ref))\n  };\n  callback(null, {\n    subchannel: subchannelMessage\n  });\n}\n\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\n  var _a;\n\n  if (subchannel_address_1.isTcpSubchannelAddress(subchannelAddress)) {\n    return {\n      address: 'tcpip_address',\n      tcpip_address: {\n        ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\n        port: subchannelAddress.port\n      }\n    };\n  } else {\n    return {\n      address: 'uds_address',\n      uds_address: {\n        filename: subchannelAddress.path\n      }\n    };\n  }\n}\n\nfunction GetSocket(call, callback) {\n  var _a, _b, _c, _d, _e;\n\n  const socketId = Number.parseInt(call.request.socket_id);\n  const socketEntry = sockets[socketId];\n\n  if (socketEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No socket data found for id ' + socketId\n    });\n    return;\n  }\n\n  const resolvedInfo = socketEntry.getInfo();\n  const securityMessage = resolvedInfo.security ? {\n    model: 'tls',\n    tls: {\n      cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? 'standard_name' : 'other_name',\n      standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\n      other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\n      local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\n      remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined\n    }\n  } : null;\n  const socketMessage = {\n    ref: socketRefToMessage(socketEntry.ref),\n    local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,\n    remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,\n    remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\n    security: securityMessage,\n    data: {\n      keep_alives_sent: resolvedInfo.keepAlivesSent,\n      streams_started: resolvedInfo.streamsStarted,\n      streams_succeeded: resolvedInfo.streamsSucceeded,\n      streams_failed: resolvedInfo.streamsFailed,\n      last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n      last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n      messages_received: resolvedInfo.messagesReceived,\n      messages_sent: resolvedInfo.messagesSent,\n      last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n      last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n      local_flow_control_window: resolvedInfo.localFlowControlWindow ? {\n        value: resolvedInfo.localFlowControlWindow\n      } : null,\n      remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? {\n        value: resolvedInfo.remoteFlowControlWindow\n      } : null\n    }\n  };\n  callback(null, {\n    socket: socketMessage\n  });\n}\n\nfunction GetServerSockets(call, callback) {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n\n  if (serverEntry === undefined) {\n    callback({\n      'code': constants_1.Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n\n  const startId = Number.parseInt(call.request.start_socket_id);\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resolvedInfo = serverEntry.getInfo(); // If we wanted to include listener sockets in the result, this line would\n  // instead say\n  // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n\n  const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2) => ref1.id - ref2.id);\n  const resultList = [];\n  let i = 0;\n\n  for (; i < allSockets.length; i++) {\n    if (allSockets[i].id >= startId) {\n      resultList.push(socketRefToMessage(allSockets[i]));\n\n      if (resultList.length >= maxResults) {\n        break;\n      }\n    }\n  }\n\n  callback(null, {\n    socket_ref: resultList,\n    end: i >= allSockets.length\n  });\n}\n\nfunction getChannelzHandlers() {\n  return {\n    GetChannel,\n    GetTopChannels,\n    GetServer,\n    GetServers,\n    GetSubchannel,\n    GetSocket,\n    GetServerSockets\n  };\n}\n\nexports.getChannelzHandlers = getChannelzHandlers;\nlet loadedChannelzDefinition = null;\n\nfunction getChannelzServiceDefinition() {\n  if (loadedChannelzDefinition) {\n    return loadedChannelzDefinition;\n  }\n  /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n   * runtime for users who will not use/enable channelz. */\n\n\n  const loaderLoadSync = require('@grpc/proto-loader').loadSync;\n\n  const loadedProto = loaderLoadSync('channelz.proto', {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs: [`${__dirname}/../../proto`]\n  });\n  const channelzGrpcObject = make_client_1.loadPackageDefinition(loadedProto);\n  loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n  return loadedChannelzDefinition;\n}\n\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\n\nfunction setup() {\n  admin_1.registerAdminService(getChannelzServiceDefinition, getChannelzHandlers);\n}\n\nexports.setup = setup;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\channelz.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isIPv4, isIPv6 } from \"net\";\nimport { ConnectivityState } from \"./connectivity-state\";\nimport { Status } from \"./constants\";\nimport { Timestamp } from \"./generated/google/protobuf/Timestamp\";\nimport { Channel as ChannelMessage } from \"./generated/grpc/channelz/v1/Channel\";\nimport { ChannelConnectivityState__Output } from \"./generated/grpc/channelz/v1/ChannelConnectivityState\";\nimport { ChannelRef as ChannelRefMessage } from \"./generated/grpc/channelz/v1/ChannelRef\";\nimport { ChannelTrace } from \"./generated/grpc/channelz/v1/ChannelTrace\";\nimport { GetChannelRequest__Output } from \"./generated/grpc/channelz/v1/GetChannelRequest\";\nimport { GetChannelResponse } from \"./generated/grpc/channelz/v1/GetChannelResponse\";\nimport { sendUnaryData, ServerUnaryCall } from \"./server-call\";\nimport { ServerRef as ServerRefMessage } from \"./generated/grpc/channelz/v1/ServerRef\";\nimport { SocketRef as SocketRefMessage } from \"./generated/grpc/channelz/v1/SocketRef\";\nimport { isTcpSubchannelAddress, SubchannelAddress } from \"./subchannel-address\";\nimport { SubchannelRef as SubchannelRefMessage } from \"./generated/grpc/channelz/v1/SubchannelRef\";\nimport { GetServerRequest__Output } from \"./generated/grpc/channelz/v1/GetServerRequest\";\nimport { GetServerResponse } from \"./generated/grpc/channelz/v1/GetServerResponse\";\nimport { Server as ServerMessage } from \"./generated/grpc/channelz/v1/Server\";\nimport { GetServersRequest__Output } from \"./generated/grpc/channelz/v1/GetServersRequest\";\nimport { GetServersResponse } from \"./generated/grpc/channelz/v1/GetServersResponse\";\nimport { GetTopChannelsRequest__Output } from \"./generated/grpc/channelz/v1/GetTopChannelsRequest\";\nimport { GetTopChannelsResponse } from \"./generated/grpc/channelz/v1/GetTopChannelsResponse\";\nimport { GetSubchannelRequest__Output } from \"./generated/grpc/channelz/v1/GetSubchannelRequest\";\nimport { GetSubchannelResponse } from \"./generated/grpc/channelz/v1/GetSubchannelResponse\";\nimport { Subchannel as SubchannelMessage } from \"./generated/grpc/channelz/v1/Subchannel\";\nimport { GetSocketRequest__Output } from \"./generated/grpc/channelz/v1/GetSocketRequest\";\nimport { GetSocketResponse } from \"./generated/grpc/channelz/v1/GetSocketResponse\";\nimport { Socket as SocketMessage } from \"./generated/grpc/channelz/v1/Socket\";\nimport { Address } from \"./generated/grpc/channelz/v1/Address\";\nimport { Security } from \"./generated/grpc/channelz/v1/Security\";\nimport { GetServerSocketsRequest__Output } from \"./generated/grpc/channelz/v1/GetServerSocketsRequest\";\nimport { GetServerSocketsResponse } from \"./generated/grpc/channelz/v1/GetServerSocketsResponse\";\nimport { ChannelzDefinition, ChannelzHandlers } from \"./generated/grpc/channelz/v1/Channelz\";\nimport { ProtoGrpcType as ChannelzProtoGrpcType } from \"./generated/channelz\";\nimport type { loadSync } from '@grpc/proto-loader';\nimport { registerAdminService } from \"./admin\";\nimport { loadPackageDefinition } from \"./make-client\";\n\nexport type TraceSeverity = 'CT_UNKNOWN' | 'CT_INFO' | 'CT_WARNING' | 'CT_ERROR';\n\nexport interface ChannelRef {\n  kind: 'channel';\n  id: number;\n  name: string;\n}\n\nexport interface SubchannelRef {\n  kind: 'subchannel';\n  id: number;\n  name: string;\n}\n\nexport interface ServerRef {\n  kind: 'server';\n  id: number;\n}\n\nexport interface SocketRef {\n  kind: 'socket';\n  id: number;\n  name: string;\n}\n\nfunction channelRefToMessage(ref: ChannelRef): ChannelRefMessage {\n  return {\n    channel_id: ref.id,\n    name: ref.name\n  };\n}\n\nfunction subchannelRefToMessage(ref: SubchannelRef): SubchannelRefMessage {\n  return {\n    subchannel_id: ref.id,\n    name: ref.name\n  }\n}\n\nfunction serverRefToMessage(ref: ServerRef): ServerRefMessage {\n  return {\n    server_id: ref.id\n  }\n}\n\nfunction socketRefToMessage(ref: SocketRef): SocketRefMessage {\n  return {\n    socket_id: ref.id,\n    name: ref.name\n  }\n}\n\ninterface TraceEvent {\n  description: string;\n  severity: TraceSeverity;\n  timestamp: Date;\n  childChannel?: ChannelRef;\n  childSubchannel?: SubchannelRef;\n}\n\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */\nconst TARGET_RETAINED_TRACES = 32;\n\nexport class ChannelzTrace {\n  events: TraceEvent[] = [];\n  creationTimestamp: Date;\n  eventsLogged: number = 0;\n\n  constructor() {\n    this.creationTimestamp = new Date();\n  }\n\n  addTrace(severity: TraceSeverity, description: string, child?: ChannelRef | SubchannelRef) {\n    const timestamp = new Date();\n    this.events.push({\n      description: description,\n      severity: severity,\n      timestamp: timestamp,\n      childChannel: child?.kind === 'channel' ? child : undefined,\n      childSubchannel: child?.kind === 'subchannel' ? child : undefined\n    });\n    // Whenever the trace array gets too large, discard the first half\n    if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n      this.events = this.events.slice(TARGET_RETAINED_TRACES);\n    }\n    this.eventsLogged += 1;\n  }\n\n  getTraceMessage(): ChannelTrace {\n    return {\n      creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n      num_events_logged: this.eventsLogged,\n      events: this.events.map(event => {\n        return {\n          description: event.description,\n          severity: event.severity,\n          timestamp: dateToProtoTimestamp(event.timestamp),\n          channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,\n          subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null\n        }\n      })\n    };\n  }\n}\n\nexport class ChannelzChildrenTracker {\n  private channelChildren: Map<number, {ref: ChannelRef, count: number}> = new Map<number, {ref: ChannelRef, count: number}>();\n  private subchannelChildren: Map<number, {ref: SubchannelRef, count: number}> = new Map<number, {ref: SubchannelRef, count: number}>();\n  private socketChildren: Map<number, {ref: SocketRef, count: number}> = new Map<number, {ref: SocketRef, count: number}>();\n\n  refChild(child: ChannelRef | SubchannelRef | SocketRef) {\n    switch (child.kind) {\n      case 'channel': {\n        let trackedChild = this.channelChildren.get(child.id) ?? {ref: child, count: 0};\n        trackedChild.count += 1;\n        this.channelChildren.set(child.id, trackedChild);\n        break;\n      }\n      case 'subchannel':{\n        let trackedChild = this.subchannelChildren.get(child.id) ?? {ref: child, count: 0};\n        trackedChild.count += 1;\n        this.subchannelChildren.set(child.id, trackedChild);\n        break;\n      }\n      case 'socket':{\n        let trackedChild = this.socketChildren.get(child.id) ?? {ref: child, count: 0};\n        trackedChild.count += 1;\n        this.socketChildren.set(child.id, trackedChild);\n        break;\n      }\n    }\n  }\n\n  unrefChild(child: ChannelRef | SubchannelRef | SocketRef) {\n    switch (child.kind) {\n      case 'channel': {\n        let trackedChild = this.channelChildren.get(child.id);\n        if (trackedChild !== undefined) {\n          trackedChild.count -= 1;\n          if (trackedChild.count === 0) {\n            this.channelChildren.delete(child.id);\n          } else {\n            this.channelChildren.set(child.id, trackedChild);\n          }\n        }\n        break;\n      }\n      case 'subchannel': {\n        let trackedChild = this.subchannelChildren.get(child.id);\n        if (trackedChild !== undefined) {\n          trackedChild.count -= 1;\n          if (trackedChild.count === 0) {\n            this.subchannelChildren.delete(child.id);\n          } else {\n            this.subchannelChildren.set(child.id, trackedChild);\n          }\n        }\n        break;\n      }\n      case 'socket': {\n        let trackedChild = this.socketChildren.get(child.id);\n        if (trackedChild !== undefined) {\n          trackedChild.count -= 1;\n          if (trackedChild.count === 0) {\n            this.socketChildren.delete(child.id);\n          } else {\n            this.socketChildren.set(child.id, trackedChild);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  getChildLists(): ChannelzChildren {\n    const channels: ChannelRef[] = [];\n    for (const {ref} of this.channelChildren.values()) {\n      channels.push(ref);\n    }\n    const subchannels: SubchannelRef[] = [];\n    for (const {ref} of this.subchannelChildren.values()) {\n      subchannels.push(ref);\n    }\n    const sockets: SocketRef[] = [];\n    for (const {ref} of this.socketChildren.values()) {\n      sockets.push(ref);\n    }\n    return {channels, subchannels, sockets};\n  }\n}\n\nexport class ChannelzCallTracker {\n  callsStarted: number = 0;\n  callsSucceeded: number = 0;\n  callsFailed: number = 0;\n  lastCallStartedTimestamp: Date | null = null;\n\n  addCallStarted() {\n    this.callsStarted += 1;\n    this.lastCallStartedTimestamp = new Date();\n  }\n  addCallSucceeded() {\n    this.callsSucceeded += 1;\n  }\n  addCallFailed() {\n    this.callsFailed += 1;\n  }\n}\n\nexport interface ChannelzChildren {\n  channels: ChannelRef[];\n  subchannels: SubchannelRef[];\n  sockets: SocketRef[];\n}\n\nexport interface ChannelInfo {\n  target: string;\n  state: ConnectivityState;\n  trace: ChannelzTrace;\n  callTracker: ChannelzCallTracker;\n  children: ChannelzChildren;\n}\n\nexport interface SubchannelInfo extends ChannelInfo {}\n\nexport interface ServerInfo {\n  trace: ChannelzTrace;\n  callTracker: ChannelzCallTracker;\n  listenerChildren: ChannelzChildren;\n  sessionChildren: ChannelzChildren;\n}\n\nexport interface TlsInfo {\n  cipherSuiteStandardName: string | null;\n  cipherSuiteOtherName: string | null;\n  localCertificate: Buffer | null;\n  remoteCertificate: Buffer | null;\n}\n\nexport interface SocketInfo {\n  localAddress: SubchannelAddress | null;\n  remoteAddress: SubchannelAddress | null;\n  security: TlsInfo | null;\n  remoteName: string | null;\n  streamsStarted: number;\n  streamsSucceeded: number;\n  streamsFailed: number;\n  messagesSent: number;\n  messagesReceived: number;\n  keepAlivesSent: number;\n  lastLocalStreamCreatedTimestamp: Date | null;\n  lastRemoteStreamCreatedTimestamp: Date | null;\n  lastMessageSentTimestamp: Date | null;\n  lastMessageReceivedTimestamp: Date | null;\n  localFlowControlWindow: number | null;\n  remoteFlowControlWindow: number | null;\n}\n\ninterface ChannelEntry {\n  ref: ChannelRef;\n  getInfo(): ChannelInfo;\n}\n\ninterface SubchannelEntry {\n  ref: SubchannelRef;\n  getInfo(): SubchannelInfo;\n}\n\ninterface ServerEntry {\n  ref: ServerRef;\n  getInfo(): ServerInfo;\n}\n\ninterface SocketEntry {\n  ref: SocketRef;\n  getInfo(): SocketInfo;\n}\n\nlet nextId = 1;\n\nfunction getNextId(): number {\n  return nextId++;\n}\n\nconst channels: (ChannelEntry | undefined)[] = [];\nconst subchannels: (SubchannelEntry | undefined)[] = [];\nconst servers: (ServerEntry | undefined)[] = [];\nconst sockets: (SocketEntry | undefined)[] = [];\n\nexport function registerChannelzChannel(name: string, getInfo: () => ChannelInfo): ChannelRef {\n  const id = getNextId();\n  const ref: ChannelRef = {id, name, kind: 'channel'};\n  channels[id] = { ref, getInfo };\n  return ref;\n}\n\nexport function registerChannelzSubchannel(name: string, getInfo:() => SubchannelInfo): SubchannelRef {\n  const id = getNextId();\n  const ref: SubchannelRef = {id, name, kind: 'subchannel'};\n  subchannels[id] = { ref, getInfo };\n  return ref;\n}\n\nexport function registerChannelzServer(getInfo: () => ServerInfo): ServerRef {\n  const id = getNextId();\n  const ref: ServerRef = {id, kind: 'server'};\n  servers[id] = { ref, getInfo };\n  return ref;\n}\n\nexport function registerChannelzSocket(name: string, getInfo: () => SocketInfo): SocketRef {\n  const id = getNextId();\n  const ref: SocketRef = {id, name, kind: 'socket'};\n  sockets[id] = { ref, getInfo};\n  return ref;\n}\n\nexport function unregisterChannelzRef(ref: ChannelRef | SubchannelRef | ServerRef | SocketRef) {\n  switch (ref.kind) {\n    case 'channel':\n      delete channels[ref.id];\n      return;\n    case 'subchannel':\n      delete subchannels[ref.id];\n      return;\n    case 'server':\n      delete servers[ref.id];\n      return;\n    case 'socket':\n      delete sockets[ref.id];\n      return;\n  }\n}\n\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */\nfunction parseIPv6Section(addressSection: string): [number, number] {\n  const numberValue = Number.parseInt(addressSection, 16);\n  return [numberValue / 256 | 0, numberValue % 256];\n}\n\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */\nfunction parseIPv6Chunk(addressChunk: string): number[] {\n  if (addressChunk === '') {\n    return [];\n  }\n  const bytePairs = addressChunk.split(':').map(section => parseIPv6Section(section));\n  const result: number[] = [];\n  return result.concat(...bytePairs);\n}\n\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns \n */\nfunction ipAddressStringToBuffer(ipAddress: string): Buffer | null {\n  if (isIPv4(ipAddress)) {\n    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\n  } else if (isIPv6(ipAddress)) {\n    let leftSection: string;\n    let rightSection: string;\n    const doubleColonIndex = ipAddress.indexOf('::');\n    if (doubleColonIndex === -1) {\n      leftSection = ipAddress;\n      rightSection = '';\n    } else {\n      leftSection = ipAddress.substring(0, doubleColonIndex);\n      rightSection = ipAddress.substring(doubleColonIndex + 2);\n    }\n    const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n    const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n    const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n    return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\n  } else {\n    return null;\n  }\n}\n\nfunction connectivityStateToMessage(state: ConnectivityState): ChannelConnectivityState__Output {\n  switch (state) {\n    case ConnectivityState.CONNECTING:\n      return {\n        state: 'CONNECTING'\n      };\n    case ConnectivityState.IDLE:\n      return {\n        state: 'IDLE'\n      };\n    case ConnectivityState.READY:\n      return {\n        state: 'READY'\n      };\n    case ConnectivityState.SHUTDOWN:\n      return {\n        state: 'SHUTDOWN'\n      };\n    case ConnectivityState.TRANSIENT_FAILURE:\n      return {\n        state: 'TRANSIENT_FAILURE'\n      };\n    default:\n      return {\n        state: 'UNKNOWN'\n      };\n  }\n}\n\nfunction dateToProtoTimestamp(date?: Date | null): Timestamp | null {\n  if (!date) {\n    return null;\n  }\n  const millisSinceEpoch = date.getTime();\n  return {\n    seconds: (millisSinceEpoch / 1000) | 0,\n    nanos: (millisSinceEpoch % 1000) * 1_000_000\n  }\n}\n\nfunction getChannelMessage(channelEntry: ChannelEntry): ChannelMessage {\n  const resolvedInfo = channelEntry.getInfo();\n  return {\n    ref: channelRefToMessage(channelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    channel_ref: resolvedInfo.children.channels.map(ref => channelRefToMessage(ref)),\n    subchannel_ref: resolvedInfo.children.subchannels.map(ref => subchannelRefToMessage(ref))\n  };\n}\n\nfunction GetChannel(call: ServerUnaryCall<GetChannelRequest__Output, GetChannelResponse>, callback: sendUnaryData<GetChannelResponse>): void {\n  const channelId = Number.parseInt(call.request.channel_id);\n  const channelEntry = channels[channelId];\n  if (channelEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No channel data found for id ' + channelId\n    });\n    return;\n  }\n  callback(null, {channel: getChannelMessage(channelEntry)});\n}\n\nfunction GetTopChannels(call: ServerUnaryCall<GetTopChannelsRequest__Output, GetTopChannelsResponse>, callback: sendUnaryData<GetTopChannelsResponse>): void {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList: ChannelMessage[] = [];\n  let i = Number.parseInt(call.request.start_channel_id);\n  for (; i < channels.length; i++) {\n    const channelEntry = channels[i];\n    if (channelEntry === undefined) {\n      continue;\n    }\n    resultList.push(getChannelMessage(channelEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    channel: resultList,\n    end: i >= servers.length\n  });\n}\n\nfunction getServerMessage(serverEntry: ServerEntry): ServerMessage {\n  const resolvedInfo = serverEntry.getInfo();\n  return {\n    ref: serverRefToMessage(serverEntry.ref),\n    data: {\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    listen_socket: resolvedInfo.listenerChildren.sockets.map(ref => socketRefToMessage(ref))\n  };\n}\n\nfunction GetServer(call: ServerUnaryCall<GetServerRequest__Output, GetServerResponse>, callback: sendUnaryData<GetServerResponse>): void {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  callback(null, {server: getServerMessage(serverEntry)});\n}\n\nfunction GetServers(call: ServerUnaryCall<GetServersRequest__Output, GetServersResponse>, callback: sendUnaryData<GetServersResponse>): void {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList: ServerMessage[] = [];\n  let i = Number.parseInt(call.request.start_server_id);\n  for (; i < servers.length; i++) {\n    const serverEntry = servers[i];\n    if (serverEntry === undefined) {\n      continue;\n    }\n    resultList.push(getServerMessage(serverEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    server: resultList,\n    end: i >= servers.length\n  });\n}\n\nfunction GetSubchannel(call: ServerUnaryCall<GetSubchannelRequest__Output, GetSubchannelResponse>, callback: sendUnaryData<GetSubchannelResponse>): void {\n  const subchannelId = Number.parseInt(call.request.subchannel_id);\n  const subchannelEntry = subchannels[subchannelId];\n  if (subchannelEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No subchannel data found for id ' + subchannelId\n    });\n    return;\n  }\n  const resolvedInfo = subchannelEntry.getInfo();\n  const subchannelMessage: SubchannelMessage = {\n    ref: subchannelRefToMessage(subchannelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    socket_ref: resolvedInfo.children.sockets.map(ref => socketRefToMessage(ref))\n  };\n  callback(null, {subchannel: subchannelMessage});\n}\n\nfunction subchannelAddressToAddressMessage(subchannelAddress: SubchannelAddress): Address {\n  if (isTcpSubchannelAddress(subchannelAddress)) {\n    return {\n      address: 'tcpip_address',\n      tcpip_address: {\n        ip_address: ipAddressStringToBuffer(subchannelAddress.host) ?? undefined,\n        port: subchannelAddress.port\n      }\n    };\n  } else {\n    return {\n      address: 'uds_address',\n      uds_address: {\n        filename: subchannelAddress.path\n      }\n    };\n  }\n}\n\nfunction GetSocket(call: ServerUnaryCall<GetSocketRequest__Output, GetSocketResponse>, callback: sendUnaryData<GetSocketResponse>): void {\n  const socketId = Number.parseInt(call.request.socket_id);\n  const socketEntry = sockets[socketId];\n  if (socketEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No socket data found for id ' + socketId\n    });\n    return;\n  }\n  const resolvedInfo = socketEntry.getInfo();\n  const securityMessage: Security | null = resolvedInfo.security ? {\n    model: 'tls',\n    tls: {\n      cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? 'standard_name' : 'other_name',\n      standard_name: resolvedInfo.security.cipherSuiteStandardName ?? undefined,\n      other_name: resolvedInfo.security.cipherSuiteOtherName ?? undefined,\n      local_certificate: resolvedInfo.security.localCertificate ?? undefined,\n      remote_certificate: resolvedInfo.security.remoteCertificate ?? undefined\n    }\n  } : null;\n  const socketMessage: SocketMessage = {\n    ref: socketRefToMessage(socketEntry.ref),\n    local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,\n    remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,\n    remote_name: resolvedInfo.remoteName ?? undefined,\n    security: securityMessage,\n    data: {\n      keep_alives_sent: resolvedInfo.keepAlivesSent,\n      streams_started: resolvedInfo.streamsStarted,\n      streams_succeeded: resolvedInfo.streamsSucceeded,\n      streams_failed: resolvedInfo.streamsFailed,\n      last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n      last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n      messages_received: resolvedInfo.messagesReceived,\n      messages_sent: resolvedInfo.messagesSent,\n      last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n      last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n      local_flow_control_window: resolvedInfo.localFlowControlWindow ? { value: resolvedInfo.localFlowControlWindow } : null,\n      remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? { value: resolvedInfo.remoteFlowControlWindow } : null,\n    }\n  };\n  callback(null, {socket: socketMessage});\n}\n\nfunction GetServerSockets(call: ServerUnaryCall<GetServerSocketsRequest__Output, GetServerSocketsResponse>, callback: sendUnaryData<GetServerSocketsResponse>): void {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      'code': Status.NOT_FOUND,\n      'details': 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  const startId = Number.parseInt(call.request.start_socket_id);\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resolvedInfo = serverEntry.getInfo();\n  // If we wanted to include listener sockets in the result, this line would\n  // instead say\n  // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n  const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2) => ref1.id - ref2.id);\n  const resultList: SocketRefMessage[] = [];\n  let i = 0;\n  for (; i < allSockets.length; i++) {\n    if (allSockets[i].id >= startId) {\n      resultList.push(socketRefToMessage(allSockets[i]));\n      if (resultList.length >= maxResults) {\n        break;\n      }\n    }\n  }\n  callback(null, {\n    socket_ref: resultList,\n    end: i >= allSockets.length\n  });\n}\n\nexport function getChannelzHandlers(): ChannelzHandlers {\n  return {\n    GetChannel,\n    GetTopChannels,\n    GetServer,\n    GetServers,\n    GetSubchannel,\n    GetSocket,\n    GetServerSockets\n  };\n}\n\nlet loadedChannelzDefinition: ChannelzDefinition | null = null;\n\nexport function getChannelzServiceDefinition(): ChannelzDefinition {\n  if (loadedChannelzDefinition) {\n    return loadedChannelzDefinition;\n  }\n  /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n   * runtime for users who will not use/enable channelz. */\n  const loaderLoadSync = require('@grpc/proto-loader').loadSync as typeof loadSync;\n  const loadedProto = loaderLoadSync('channelz.proto', {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs: [\n      `${__dirname}/../../proto`\n    ]\n  });\n  const channelzGrpcObject = loadPackageDefinition(loadedProto) as unknown as ChannelzProtoGrpcType;\n  loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n  return loadedChannelzDefinition;\n}\n\nexport function setup() {\n  registerAdminService(getChannelzServiceDefinition, getChannelzHandlers);\n}"]},"metadata":{},"sourceType":"script"}
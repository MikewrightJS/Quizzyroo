{"ast":null,"code":"// Load modules\nvar Crypto = require('crypto');\n\nvar Url = require('url');\n\nvar Utils = require('./utils'); // Declare internals\n\n\nvar internals = {}; // MAC normalization format version\n\nexports.headerVersion = '1'; // Prevent comparison of mac values generated with different normalized string formats\n// Supported HMAC algorithms\n\nexports.algorithms = ['sha1', 'sha256']; // Calculate the request MAC\n\n/*\n    type: 'header'                                  // 'header', 'bewit', 'response'\n    options: {\n        credentials: {\n            key: 'aoijedoaijsdlaksjdl',\n            algorithm: 'sha256'                     // 'sha1', 'sha256'\n        },\n        method: 'GET',\n        resource: '/resource?a=1&b=2',\n        host: 'example.com',\n        port: 8080,\n        ts: 1357718381034,\n        nonce: 'd3d345f',\n        hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',\n        ext: 'app-specific-data',\n        app: 'hf48hd83qwkj',                        // Application id (Oz)\n        dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz), requires options.app\n    }\n*/\n\nexports.calculateMac = function (type, options) {\n  var normalized = exports.generateNormalizedString(type, options);\n  var hmac = Crypto.createHmac(options.credentials.algorithm, options.credentials.key).update(normalized);\n  var digest = hmac.digest('base64');\n  return digest;\n};\n\nexports.generateNormalizedString = function (type, options) {\n  var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\\n' + options.ts + '\\n' + options.nonce + '\\n' + options.method.toUpperCase() + '\\n' + options.resource + '\\n' + options.host.toLowerCase() + '\\n' + options.port + '\\n' + (options.hash || '') + '\\n';\n\n  if (options.ext) {\n    normalized += options.ext.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n');\n  }\n\n  normalized += '\\n';\n\n  if (options.app) {\n    normalized += options.app + '\\n' + (options.dlg || '') + '\\n';\n  }\n\n  return normalized;\n};\n\nexports.calculateHash = function (payload, algorithm, contentType) {\n  var hash = Crypto.createHash(algorithm);\n  hash.update('hawk.' + exports.headerVersion + '.payload\\n');\n  hash.update(Utils.parseContentType(contentType) + '\\n');\n  hash.update(payload || '');\n  hash.update('\\n');\n  return hash.digest('base64');\n};\n\nexports.calculateTsMac = function (ts, credentials) {\n  var hash = Crypto.createHash(credentials.algorithm);\n  hash.update('hawk.' + exports.headerVersion + '.ts\\n' + ts + '\\n');\n  return hash.digest('base64');\n};","map":{"version":3,"sources":["C:/react/quiz/node_modules/hawk/lib/crypto.js"],"names":["Crypto","require","Url","Utils","internals","exports","headerVersion","algorithms","calculateMac","type","options","normalized","generateNormalizedString","hmac","createHmac","credentials","algorithm","key","update","digest","ts","nonce","method","toUpperCase","resource","host","toLowerCase","port","hash","ext","replace","app","dlg","calculateHash","payload","contentType","createHash","parseContentType","calculateTsMac"],"mappings":"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","sourcesContent":["// Load modules\n\nvar Crypto = require('crypto');\nvar Url = require('url');\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {};\n\n\n// MAC normalization format version\n\nexports.headerVersion = '1';                        // Prevent comparison of mac values generated with different normalized string formats\n\n\n// Supported HMAC algorithms\n\nexports.algorithms = ['sha1', 'sha256'];\n\n\n// Calculate the request MAC\n\n/*\n    type: 'header'                                  // 'header', 'bewit', 'response'\n    options: {\n        credentials: {\n            key: 'aoijedoaijsdlaksjdl',\n            algorithm: 'sha256'                     // 'sha1', 'sha256'\n        },\n        method: 'GET',\n        resource: '/resource?a=1&b=2',\n        host: 'example.com',\n        port: 8080,\n        ts: 1357718381034,\n        nonce: 'd3d345f',\n        hash: 'U4MKKSmiVxk37JCCrAVIjV/OhB3y+NdwoCr6RShbVkE=',\n        ext: 'app-specific-data',\n        app: 'hf48hd83qwkj',                        // Application id (Oz)\n        dlg: 'd8djwekds9cj'                         // Delegated by application id (Oz), requires options.app\n    }\n*/\n\nexports.calculateMac = function (type, options) {\n\n    var normalized = exports.generateNormalizedString(type, options);\n\n    var hmac = Crypto.createHmac(options.credentials.algorithm, options.credentials.key).update(normalized);\n    var digest = hmac.digest('base64');\n    return digest;\n};\n\n\nexports.generateNormalizedString = function (type, options) {\n\n    var normalized = 'hawk.' + exports.headerVersion + '.' + type + '\\n' +\n                     options.ts + '\\n' +\n                     options.nonce + '\\n' +\n                     options.method.toUpperCase() + '\\n' +\n                     options.resource + '\\n' +\n                     options.host.toLowerCase() + '\\n' +\n                     options.port + '\\n' +\n                     (options.hash || '') + '\\n';\n\n    if (options.ext) {\r\n        normalized += options.ext.replace('\\\\', '\\\\\\\\').replace('\\n', '\\\\n');\r\n    }\n\n    normalized += '\\n';\n\n    if (options.app) {\r\n        normalized += options.app + '\\n' +\r\n                      (options.dlg || '') + '\\n';\r\n    }\n\n    return normalized;\n};\n\n\nexports.calculateHash = function (payload, algorithm, contentType) {\n\n    var hash = Crypto.createHash(algorithm);\n    hash.update('hawk.' + exports.headerVersion + '.payload\\n');\n    hash.update(Utils.parseContentType(contentType) + '\\n');\n    hash.update(payload || '');\n    hash.update('\\n');\n    return hash.digest('base64');\n};\n\n\nexports.calculateTsMac = function (ts, credentials) {\r\n\n    var hash = Crypto.createHash(credentials.algorithm);\n    hash.update('hawk.' + exports.headerVersion + '.ts\\n' + ts + '\\n');\n    return hash.digest('base64');\r\n};\n\n"]},"metadata":{},"sourceType":"script"}
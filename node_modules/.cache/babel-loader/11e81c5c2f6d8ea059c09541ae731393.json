{"ast":null,"code":"var crypto = require('crypto'),\n    qs = require('querystring');\n\nfunction sha1(key, body) {\n  return crypto.createHmac('sha1', key).update(body).digest('base64');\n}\n\nfunction rfc3986(str) {\n  return encodeURIComponent(str).replace(/!/g, '%21').replace(/\\*/g, '%2A').replace(/\\(/g, '%28').replace(/\\)/g, '%29').replace(/'/g, '%27');\n}\n\nfunction hmacsign(httpMethod, base_uri, params, consumer_secret, token_secret) {\n  // adapted from https://dev.twitter.com/docs/auth/oauth and \n  // https://dev.twitter.com/docs/auth/creating-signature\n  var querystring = Object.keys(params).sort().map(function (key) {\n    // big WTF here with the escape + encoding but it's what twitter wants\n    return escape(rfc3986(key)) + \"%3D\" + escape(rfc3986(params[key]));\n  }).join('%26');\n  var base = [httpMethod ? httpMethod.toUpperCase() : 'GET', rfc3986(base_uri), querystring].join('&');\n  var key = [consumer_secret, token_secret || ''].map(rfc3986).join('&');\n  return sha1(key, base);\n}\n\nexports.hmacsign = hmacsign;\nexports.rfc3986 = rfc3986;","map":{"version":3,"sources":["C:/react/quiz/node_modules/oauth-sign/index.js"],"names":["crypto","require","qs","sha1","key","body","createHmac","update","digest","rfc3986","str","encodeURIComponent","replace","hmacsign","httpMethod","base_uri","params","consumer_secret","token_secret","querystring","Object","keys","sort","map","escape","join","base","toUpperCase","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAAA,IACIC,EAAE,GAAGD,OAAO,CAAC,aAAD,CADhB;;AAIA,SAASE,IAAT,CAAeC,GAAf,EAAoBC,IAApB,EAA0B;AACxB,SAAOL,MAAM,CAACM,UAAP,CAAkB,MAAlB,EAA0BF,GAA1B,EAA+BG,MAA/B,CAAsCF,IAAtC,EAA4CG,MAA5C,CAAmD,QAAnD,CAAP;AACD;;AAED,SAASC,OAAT,CAAkBC,GAAlB,EAAuB;AACrB,SAAOC,kBAAkB,CAACD,GAAD,CAAlB,CACJE,OADI,CACI,IADJ,EACS,KADT,EAEJA,OAFI,CAEI,KAFJ,EAEU,KAFV,EAGJA,OAHI,CAGI,KAHJ,EAGU,KAHV,EAIJA,OAJI,CAII,KAJJ,EAIU,KAJV,EAKJA,OALI,CAKI,IALJ,EAKS,KALT,CAAP;AAOD;;AAED,SAASC,QAAT,CAAmBC,UAAnB,EAA+BC,QAA/B,EAAyCC,MAAzC,EAAiDC,eAAjD,EAAkEC,YAAlE,EAAgF;AAC9E;AACA;AAEA,MAAIC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYL,MAAZ,EAAoBM,IAApB,GAA2BC,GAA3B,CAA+B,UAASnB,GAAT,EAAa;AAC5D;AACA,WAAOoB,MAAM,CAACf,OAAO,CAACL,GAAD,CAAR,CAAN,GAAuB,KAAvB,GAA+BoB,MAAM,CAACf,OAAO,CAACO,MAAM,CAACZ,GAAD,CAAP,CAAR,CAA5C;AACD,GAHiB,EAGfqB,IAHe,CAGV,KAHU,CAAlB;AAKA,MAAIC,IAAI,GAAG,CACTZ,UAAU,GAAGA,UAAU,CAACa,WAAX,EAAH,GAA8B,KAD/B,EAETlB,OAAO,CAACM,QAAD,CAFE,EAGTI,WAHS,EAITM,IAJS,CAIJ,GAJI,CAAX;AAMA,MAAIrB,GAAG,GAAG,CACRa,eADQ,EAERC,YAAY,IAAI,EAFR,EAGRK,GAHQ,CAGJd,OAHI,EAGKgB,IAHL,CAGU,GAHV,CAAV;AAKA,SAAOtB,IAAI,CAACC,GAAD,EAAMsB,IAAN,CAAX;AACD;;AAEDE,OAAO,CAACf,QAAR,GAAmBA,QAAnB;AACAe,OAAO,CAACnB,OAAR,GAAkBA,OAAlB","sourcesContent":["var crypto = require('crypto')\n  , qs = require('querystring')\n  ;\n\nfunction sha1 (key, body) {\n  return crypto.createHmac('sha1', key).update(body).digest('base64')\n}\n\nfunction rfc3986 (str) {\n  return encodeURIComponent(str)\n    .replace(/!/g,'%21')\n    .replace(/\\*/g,'%2A')\n    .replace(/\\(/g,'%28')\n    .replace(/\\)/g,'%29')\n    .replace(/'/g,'%27')\n    ;\n}\n\nfunction hmacsign (httpMethod, base_uri, params, consumer_secret, token_secret) {\n  // adapted from https://dev.twitter.com/docs/auth/oauth and \n  // https://dev.twitter.com/docs/auth/creating-signature\n\n  var querystring = Object.keys(params).sort().map(function(key){\n    // big WTF here with the escape + encoding but it's what twitter wants\n    return escape(rfc3986(key)) + \"%3D\" + escape(rfc3986(params[key]))\n  }).join('%26')\n\n  var base = [\n    httpMethod ? httpMethod.toUpperCase() : 'GET',\n    rfc3986(base_uri),\n    querystring\n  ].join('&')\n\n  var key = [\n    consumer_secret,\n    token_secret || ''\n  ].map(rfc3986).join('&')\n\n  return sha1(key, base)\n}\n\nexports.hmacsign = hmacsign\nexports.rfc3986 = rfc3986\n"]},"metadata":{},"sourceType":"script"}
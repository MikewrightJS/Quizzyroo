{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IamClient = void 0;\n\nconst grpc_1 = require(\"./grpc\");\n\nconst fallback_1 = require(\"./fallback\");\n\nconst createApiCall_1 = require(\"./createApiCall\");\n\nconst routingHeader = require(\"./routingHeader\");\n\nconst gapicConfig = require(\"./iam_policy_service_client_config.json\");\n\nconst fallback = require(\"./fallback\");\n\nlet version = require('../../package.json').version;\n\nconst jsonProtos = require(\"../protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\n\n\nclass IamClient {\n  constructor(gaxGrpc, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  options) {\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {}\n    };\n    this.innerApiCalls = {};\n    this.gaxGrpc = gaxGrpc; // Ensure that options include the service address and port.\n\n    const opts = Object.assign({\n      servicePath: options.servicePath,\n      port: options.port,\n      clientConfig: options.clientConfig,\n      apiEndpoint: options.apiEndpoint,\n      fallback: options.fallback\n    }, options);\n    version = opts.fallback ? fallback.version : version;\n    this._gaxGrpc = opts.fallback ? new fallback_1.GrpcClient(opts) : new grpc_1.GrpcClient(opts);\n    opts.scopes = this.constructor.scopes; // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = gaxGrpc.auth; // Determine the client header string.\n\n    const clientHeader = [`gax/${version}`, `gapic/${version}`];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${version}`);\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // Put together the default options sent with requests.\n\n    this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    this.innerApiCalls = {};\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  initialize() {\n    var _this = this;\n\n    // If the client stub promise is already initialized, return immediately.\n    if (this.iamPolicyStub) {\n      return this.iamPolicyStub;\n    } // Put together the \"service stub\" for\n    // google.iam.v1.IAMPolicy.\n\n\n    this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.iam.v1.IAMPolicy') : this._protos.google.iam.v1.IAMPolicy, this._opts); // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n\n    const iamPolicyStubMethods = ['getIamPolicy', 'setIamPolicy', 'testIamPermissions'];\n\n    for (const methodName of iamPolicyStubMethods) {\n      const innerCallPromise = this.iamPolicyStub.then(stub => function () {\n        if (_this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n\n        const func = stub[methodName];\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      this.innerApiCalls[methodName] = createApiCall_1.createApiCall(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n    }\n\n    return this.iamPolicyStub;\n  }\n  /**\n   * The DNS address for this API service.\n   */\n\n\n  static get servicePath() {\n    return 'cloudkms.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   */\n\n\n  static get apiEndpoint() {\n    return 'cloudkms.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   */\n\n\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   */\n\n\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/cloudkms'];\n  }\n\n  getProjectId(callback) {\n    if (this.auth && 'getProjectId' in this.auth) {\n      return this.auth.getProjectId(callback);\n    }\n\n    if (callback) {\n      callback(new Error('Cannot determine project ID.'));\n    } else {\n      return Promise.reject('Cannot determine project ID.');\n    }\n  }\n\n  getIamPolicy(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.getIamPolicy(request, options, callback);\n  }\n\n  setIamPolicy(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.setIamPolicy(request, options, callback);\n  }\n\n  testIamPermissions(request, optionsOrCallback, callback) {\n    let options;\n\n    if (optionsOrCallback instanceof Function && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = routingHeader.fromParams({\n      resource: request.resource\n    });\n    this.initialize();\n    return this.innerApiCalls.testIamPermissions(request, options, callback);\n  }\n  /**\n   * Terminate the GRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   */\n\n\n  close() {\n    this.initialize();\n\n    if (!this._terminated) {\n      return this.iamPolicyStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n}\n\nexports.IamClient = IamClient;","map":{"version":3,"sources":["../../src/iamService.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IamClient = void 0;\nconst grpc_1 = require(\"./grpc\");\nconst fallback_1 = require(\"./fallback\");\nconst createApiCall_1 = require(\"./createApiCall\");\nconst routingHeader = require(\"./routingHeader\");\nconst gapicConfig = require(\"./iam_policy_service_client_config.json\");\nconst fallback = require(\"./fallback\");\nlet version = require('../../package.json').version;\nconst jsonProtos = require(\"../protos/iam_service.json\");\n/**\n *  Google Cloud IAM Client.\n *  This is manually written for providing methods [setIamPolicy, getIamPolicy, testIamPerssion] to the generated client.\n */\nclass IamClient {\n    constructor(gaxGrpc, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options) {\n        this._terminated = false;\n        this.descriptors = { page: {}, stream: {}, longrunning: {} };\n        this.innerApiCalls = {};\n        this.gaxGrpc = gaxGrpc;\n        // Ensure that options include the service address and port.\n        const opts = Object.assign({\n            servicePath: options.servicePath,\n            port: options.port,\n            clientConfig: options.clientConfig,\n            apiEndpoint: options.apiEndpoint,\n            fallback: options.fallback,\n        }, options);\n        version = opts.fallback ? fallback.version : version;\n        this._gaxGrpc = opts.fallback\n            ? new fallback_1.GrpcClient(opts)\n            : new grpc_1.GrpcClient(opts);\n        opts.scopes = this.constructor.scopes;\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = gaxGrpc.auth;\n        // Determine the client header string.\n        const clientHeader = [`gax/${version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // Put together the default options sent with requests.\n        this._defaults = gaxGrpc.constructSettings('google.iam.v1.IAMPolicy', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        this.innerApiCalls = {};\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.iamPolicyStub) {\n            return this.iamPolicyStub;\n        }\n        // Put together the \"service stub\" for\n        // google.iam.v1.IAMPolicy.\n        this.iamPolicyStub = this.gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.iam.v1.IAMPolicy')\n            : this._protos.google.iam.v1.IAMPolicy, this._opts);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const iamPolicyStubMethods = [\n            'getIamPolicy',\n            'setIamPolicy',\n            'testIamPermissions',\n        ];\n        for (const methodName of iamPolicyStubMethods) {\n            const innerCallPromise = this.iamPolicyStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            this.innerApiCalls[methodName] = createApiCall_1.createApiCall(innerCallPromise, this._defaults[methodName], this.descriptors.page[methodName]);\n        }\n        return this.iamPolicyStub;\n    }\n    /**\n     * The DNS address for this API service.\n     */\n    static get servicePath() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     */\n    static get apiEndpoint() {\n        return 'cloudkms.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/cloudkms',\n        ];\n    }\n    getProjectId(callback) {\n        if (this.auth && 'getProjectId' in this.auth) {\n            return this.auth.getProjectId(callback);\n        }\n        if (callback) {\n            callback(new Error('Cannot determine project ID.'));\n        }\n        else {\n            return Promise.reject('Cannot determine project ID.');\n        }\n    }\n    getIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.getIamPolicy(request, options, callback);\n    }\n    setIamPolicy(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.setIamPolicy(request, options, callback);\n    }\n    testIamPermissions(request, optionsOrCallback, callback) {\n        let options;\n        if (optionsOrCallback instanceof Function && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            routingHeader.fromParams({\n                resource: request.resource,\n            });\n        this.initialize();\n        return this.innerApiCalls.testIamPermissions(request, options, callback);\n    }\n    /**\n     * Terminate the GRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     */\n    close() {\n        this.initialize();\n        if (!this._terminated) {\n            return this.iamPolicyStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.IamClient = IamClient;\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\quiz\\\\src\\\\components\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { useState } from \"react/cjs/react.development\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(_ref) {\n  _s();\n\n  let {\n    question,\n    correct,\n    incorrect,\n    category,\n    handleQuestion,\n    playerAnswer,\n    questionComplete,\n    fiftyFifty,\n    difficulty\n  } = _ref;\n  const [shuffAnswers, setShuffAnswers] = useState(false);\n  useEffect(() => {\n    playerAnswer ? updateAnswers() : fiftyFifty ? handleFiftyFifty() : shuffleAnswers();\n  }, [question, fiftyFifty, playerAnswer, questionComplete]);\n\n  function shuffleAnswers() {\n    let answers = incorrect.concat(correct);\n    const shuffledArray = answers.sort((a, b) => 0.5 - Math.random());\n    setShuffAnswers(shuffledArray.map(ans => ({\n      answer: ans,\n      class: 'answer__button'\n    })));\n  }\n\n  function handleFiftyFifty() {\n    let answers = [incorrect[Math.floor(Math.random() * 2)], correct];\n    setShuffAnswers(answers.map(ans => ({\n      answer: ans,\n      class: 'answer__button'\n    })));\n  }\n\n  function updateAnswers() {\n    setShuffAnswers(oldAnswers => oldAnswers.map(ans => {\n      return ans.answer === correct ? { ...ans,\n        class: questionComplete ? 'answer__button green' : ans.answer === playerAnswer ? 'answer__button answer__selected' : 'answer__button'\n      } : ans.answer === playerAnswer ? { ...ans,\n        class: 'answer__button answer__selected'\n      } : ans;\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question__card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"question__category\",\n      children: category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"difficulty\",\n      children: [\"Difficulty: \", difficulty]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question\",\n      dangerouslySetInnerHTML: {\n        __html: question\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: shuffAnswers && shuffAnswers.map(answer => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          dangerouslySetInnerHTML: {\n            __html: answer.answer\n          },\n          onClick: e => handleQuestion(e, answer.answer),\n          className: answer.class\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Question, \"Gen1k37cQsb2u82T18BvFNAbb/k=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/react/quiz/src/components/Question.js"],"names":["React","useEffect","BrowserRouter","Router","Route","Switch","useState","Question","question","correct","incorrect","category","handleQuestion","playerAnswer","questionComplete","fiftyFifty","difficulty","shuffAnswers","setShuffAnswers","updateAnswers","handleFiftyFifty","shuffleAnswers","answers","concat","shuffledArray","sort","a","b","Math","random","map","ans","answer","class","floor","oldAnswers","__html","e"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { useState } from \"react/cjs/react.development\";\r\n\r\n\r\n\r\nfunction Question({question, correct, incorrect, category, handleQuestion, playerAnswer, questionComplete, fiftyFifty, difficulty}) {\r\n\r\n  const [shuffAnswers, setShuffAnswers] = useState(false)\r\n  useEffect(() => {\r\n    playerAnswer ? \r\n      updateAnswers():\r\n    fiftyFifty?\r\n    handleFiftyFifty():\r\n    shuffleAnswers();\r\n\r\n},[question, fiftyFifty, playerAnswer,questionComplete])\r\n\r\n\r\nfunction shuffleAnswers(){\r\n  let answers = incorrect.concat(correct);\r\n  const shuffledArray = answers.sort((a, b) => 0.5 - Math.random());\r\n  setShuffAnswers(shuffledArray.map(ans=>({\r\n    answer:ans, \r\n    class: 'answer__button'\r\n  })))\r\n}\r\n\r\nfunction handleFiftyFifty(){\r\n  let answers = [incorrect[Math.floor(Math.random() * 2)],correct]\r\n  setShuffAnswers(answers.map(ans =>({\r\n    answer: ans,\r\n    class:'answer__button'\r\n  })))\r\n}\r\n\r\nfunction updateAnswers(){\r\n  setShuffAnswers(oldAnswers => oldAnswers.map(ans => {\r\n    return ans.answer === correct ?\r\n    {...ans, class:questionComplete? 'answer__button green' : ans.answer === playerAnswer? 'answer__button answer__selected' : 'answer__button'} :\r\n      ans.answer === playerAnswer ? \r\n        {...ans, class:'answer__button answer__selected'} :\r\n        ans\r\n     \r\n}))\r\n}\r\n\r\nreturn (\r\n      <div className=\"question__card\">\r\n      <h5 className=\"question__category\">{category}</h5>\r\n      <div className=\"difficulty\">Difficulty: {difficulty}</div>\r\n\r\n       \r\n          \r\n        <div className=\"question\" dangerouslySetInnerHTML ={{__html: question}}></div>\r\n        <div className=\"answers\">\r\n        {shuffAnswers && shuffAnswers.map(answer=>{\r\n            return <button dangerouslySetInnerHTML ={{__html: answer.answer}} \r\n            onClick={e => handleQuestion(e, answer.answer )} \r\n            className={answer.class}>\r\n                \r\n                </button>\r\n        })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Question;"]},"metadata":{},"sourceType":"module"}
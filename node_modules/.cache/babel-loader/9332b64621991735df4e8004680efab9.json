{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nvar _a, _b, _c, _d;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nconst DEFAULT_LOGGER = {\n  error: function (message) {\n    for (var _len = arguments.length, optionalParams = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      optionalParams[_key - 1] = arguments[_key];\n    }\n\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: function (message) {\n    for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      optionalParams[_key2 - 1] = arguments[_key2];\n    }\n\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: function (message) {\n    for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      optionalParams[_key3 - 1] = arguments[_key3];\n    }\n\n    console.error('D ' + message, ...optionalParams);\n  }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\n\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = constants_1.LogVerbosity.DEBUG;\n    break;\n\n  case 'INFO':\n    _logVerbosity = constants_1.LogVerbosity.INFO;\n    break;\n\n  case 'ERROR':\n    _logVerbosity = constants_1.LogVerbosity.ERROR;\n    break;\n\n  case 'NONE':\n    _logVerbosity = constants_1.LogVerbosity.NONE;\n    break;\n\n  default: // Ignore any other values\n\n}\n\nexports.getLogger = () => {\n  return _logger;\n};\n\nexports.setLogger = logger => {\n  _logger = logger;\n};\n\nexports.setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n}; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nexports.log = function (severity) {\n  let logFunction;\n\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case constants_1.LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n\n      case constants_1.LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n\n      case constants_1.LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n\n\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n\n    if (logFunction) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\n\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\n\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\n\nconst allEnabled = enabledTracers.has('all');\n\nfunction trace(severity, tracer, text) {\n  if (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer))) {\n    exports.log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n\nexports.trace = trace;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\logging.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { LogVerbosity } from './constants';\n\nconst DEFAULT_LOGGER: Partial<Console> = {\n  error: (message?: any, ...optionalParams: any[]) => {\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: (message?: any, ...optionalParams: any[]) => {\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: (message?: any, ...optionalParams: any[]) => {\n    console.error('D ' + message, ...optionalParams);\n  },\n}\n\nlet _logger: Partial<Console> = DEFAULT_LOGGER;\nlet _logVerbosity: LogVerbosity = LogVerbosity.ERROR;\n\nconst verbosityString =\n  process.env.GRPC_NODE_VERBOSITY ?? process.env.GRPC_VERBOSITY ?? '';\n\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = LogVerbosity.DEBUG;\n    break;\n  case 'INFO':\n    _logVerbosity = LogVerbosity.INFO;\n    break;\n  case 'ERROR':\n    _logVerbosity = LogVerbosity.ERROR;\n    break;\n  case 'NONE':\n    _logVerbosity = LogVerbosity.NONE;\n    break;\n  default:\n  // Ignore any other values\n}\n\nexport const getLogger = (): Partial<Console> => {\n  return _logger;\n};\n\nexport const setLogger = (logger: Partial<Console>): void => {\n  _logger = logger;\n};\n\nexport const setLoggerVerbosity = (verbosity: LogVerbosity): void => {\n  _logVerbosity = verbosity;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const log = (severity: LogVerbosity, ...args: any[]): void => {\n  let logFunction: typeof DEFAULT_LOGGER.error;\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n      case LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n      case LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n    if (logFunction) {\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\n\nconst tracersString =\n  process.env.GRPC_NODE_TRACE ?? process.env.GRPC_TRACE ?? '';\nconst enabledTracers = new Set<string>();\nconst disabledTracers = new Set<string>();\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\nconst allEnabled = enabledTracers.has('all');\n\nexport function trace(\n  severity: LogVerbosity,\n  tracer: string,\n  text: string\n): void {\n  if (\n    !disabledTracers.has(tracer) &&\n    (allEnabled || enabledTracers.has(tracer))\n  ) {\n    log(severity, new Date().toISOString() + ' | ' + tracer + ' | ' + text);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\quiz\\\\src\\\\components\\\\Question.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(_ref) {\n  let {\n    question,\n    correct,\n    incorrect,\n    category,\n    handleQuestion,\n    id,\n    playerAnswer\n  } = _ref;\n  let answers = incorrect.concat(correct); // let playerAnswer = playersAnswers[{id}].answer;\n\n  console.log(playerAnswer.answer);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: JSON.stringify(question)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: answers.map(answer => {\n        console.log(answer);\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: e => handleQuestion(e, answer, id),\n          className: playerAnswer.answer === answer ? 'green answer' : 'white answer',\n          children: answer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/react/quiz/src/components/Question.js"],"names":["React","BrowserRouter","Router","Route","Switch","Question","question","correct","incorrect","category","handleQuestion","id","playerAnswer","answers","concat","console","log","answer","JSON","stringify","map","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;;;AAGA,SAASC,QAAT,OAA8F;AAAA,MAA5E;AAACC,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA,QAA/B;AAAyCC,IAAAA,cAAzC;AAAyDC,IAAAA,EAAzD;AAA6DC,IAAAA;AAA7D,GAA4E;AAC1F,MAAIC,OAAO,GAAGL,SAAS,CAACM,MAAV,CAAiBP,OAAjB,CAAd,CAD0F,CAE1F;;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACK,MAAzB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAA,gBAAKR;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEE;AAAA,gBAAKS,IAAI,CAACC,SAAL,CAAeb,QAAf;AAAL;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACCO,OAAO,CAACO,GAAR,CAAYH,MAAM,IAAE;AACjBF,QAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACA,4BAAO;AAAQ,UAAA,OAAO,EAAEI,CAAC,IAAIX,cAAc,CAACW,CAAD,EAAIJ,MAAJ,EAAYN,EAAZ,CAApC;AAAsD,UAAA,SAAS,EAAEC,YAAY,CAACK,MAAb,KAAwBA,MAAxB,GAAiC,cAAjC,GAAiD,cAAlH;AAAA,oBAAoIA;AAApI;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAHA;AADD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;KAjBMZ,Q;AAmBP,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nfunction Question({question, correct, incorrect, category, handleQuestion, id, playerAnswer}) {\r\n    let answers = incorrect.concat(correct);\r\n    // let playerAnswer = playersAnswers[{id}].answer;\r\n    console.log(playerAnswer.answer);\r\n\r\n    return (\r\n      <div className=\"question\">\r\n          <h3>{category}</h3>\r\n        <h4>{JSON.stringify(question)}</h4>\r\n        <div className=\"answers\">\r\n        {answers.map(answer=>{\r\n            console.log(answer);\r\n            return <button onClick={e => handleQuestion(e, answer, id )} className={playerAnswer.answer === answer ? 'green answer': 'white answer' }>{answer}</button>\r\n        })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Question;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// Load modules\nvar Url = require('url');\n\nvar Boom = require('boom');\n\nvar Cryptiles = require('cryptiles');\n\nvar Crypto = require('./crypto');\n\nvar Utils = require('./utils'); // Declare internals\n\n\nvar internals = {}; // Hawk authentication\n\n/*\n * Arguments and options are the same as index.js with the exception that the only supported options are:\n * 'hostHeaderName', 'localtimeOffsetMsec'\n */\n\nexports.authenticate = function (req, credentialsFunc, options, callback) {\n  // Application time\n  var now = Utils.now() + (options.localtimeOffsetMsec || 0); // Convert node Http request object to a request configuration object\n\n  var request = Utils.parseRequest(req, options);\n\n  if (request instanceof Error) {\n    return callback(Boom.badRequest(request.message));\n  } // Extract bewit\n  //                                 1     2             3           4     \n\n\n  var resource = request.url.match(/^(\\/.*)([\\?&])bewit\\=([^&$]*)(?:&(.+))?$/);\n\n  if (!resource) {\n    return callback(Boom.unauthorized(null, 'Hawk'));\n  } // Bewit not empty\n\n\n  if (!resource[3]) {\n    return callback(Boom.unauthorized('Empty bewit', 'Hawk'));\n  } // Verify method is GET\n\n\n  if (request.method !== 'GET' && request.method !== 'HEAD') {\n    return callback(Boom.unauthorized('Invalid method', 'Hawk'));\n  } // No other authentication\n\n\n  if (request.authorization) {\n    return callback(Boom.badRequest('Multiple authentications', 'Hawk'));\n  } // Parse bewit\n\n\n  var bewitString = Utils.base64urlDecode(resource[3]);\n\n  if (bewitString instanceof Error) {\n    return callback(Boom.badRequest('Invalid bewit encoding'));\n  } // Bewit format: id\\exp\\mac\\ext ('\\' is used because it is a reserved header attribute character)\n\n\n  var bewitParts = bewitString.split('\\\\');\n\n  if (!bewitParts || bewitParts.length !== 4) {\n    return callback(Boom.badRequest('Invalid bewit structure'));\n  }\n\n  var bewit = {\n    id: bewitParts[0],\n    exp: parseInt(bewitParts[1], 10),\n    mac: bewitParts[2],\n    ext: bewitParts[3] || ''\n  };\n\n  if (!bewit.id || !bewit.exp || !bewit.mac) {\n    return callback(Boom.badRequest('Missing bewit attributes'));\n  } // Construct URL without bewit\n\n\n  var url = resource[1];\n\n  if (resource[4]) {\n    url += resource[2] + resource[4];\n  } // Check expiration\n\n\n  if (bewit.exp * 1000 <= now) {\n    return callback(Boom.unauthorized('Access expired', 'Hawk'), null, bewit);\n  } // Fetch Hawk credentials\n\n\n  credentialsFunc(bewit.id, function (err, credentials) {\n    if (err) {\n      return callback(err, credentials || null, bewit.ext);\n    }\n\n    if (!credentials) {\n      return callback(Boom.unauthorized('Unknown credentials', 'Hawk'), null, bewit);\n    }\n\n    if (!credentials.key || !credentials.algorithm) {\n      return callback(Boom.internal('Invalid credentials'), credentials, bewit);\n    }\n\n    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n      return callback(Boom.internal('Unknown algorithm'), credentials, bewit);\n    } // Calculate MAC\n\n\n    var mac = Crypto.calculateMac('bewit', {\n      credentials: credentials,\n      ts: bewit.exp,\n      nonce: '',\n      method: 'GET',\n      resource: url,\n      host: request.host,\n      port: request.port,\n      ext: bewit.ext\n    });\n\n    if (!Cryptiles.fixedTimeComparison(mac, bewit.mac)) {\n      return callback(Boom.unauthorized('Bad mac', 'Hawk'), credentials, bewit);\n    } // Successful authentication\n\n\n    return callback(null, credentials, bewit);\n  });\n}; // Generate a bewit value for a given URI\n\n/*\n * credentials is an object with the following keys: 'id, 'key', 'algorithm'.\n * options is an object with the following optional keys: 'ext', 'localtimeOffsetMsec'\n */\n\n/*\n    uri: 'http://example.com/resource?a=b' or object from Url.parse()\n    options: {\n\n        // Required\n\n        credentials: {\n            id: 'dh37fgj492je',\n            key: 'aoijedoaijsdlaksjdl',\n            algorithm: 'sha256'                             // 'sha1', 'sha256'\n        },\n        ttlSec: 60 * 60,                                    // TTL in seconds\n\n        // Optional\n\n        ext: 'application-specific',                        // Application specific data sent via the ext attribute\n        localtimeOffsetMsec: 400                            // Time offset to sync with server time\n    };\n*/\n\n\nexports.getBewit = function (uri, options) {\n  // Validate inputs\n  if (!uri || typeof uri !== 'string' && typeof uri !== 'object' || !options || typeof options !== 'object' || !options.ttlSec) {\n    return '';\n  }\n\n  options.ext = options.ext === null || options.ext === undefined ? '' : options.ext; // Zero is valid value\n  // Application time\n\n  var now = Utils.now() + (options.localtimeOffsetMsec || 0); // Validate credentials\n\n  var credentials = options.credentials;\n\n  if (!credentials || !credentials.id || !credentials.key || !credentials.algorithm) {\n    return '';\n  }\n\n  if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n    return '';\n  } // Parse URI\n\n\n  if (typeof uri === 'string') {\n    uri = Url.parse(uri);\n  } // Calculate signature\n\n\n  var exp = Math.floor(now / 1000) + options.ttlSec;\n  var mac = Crypto.calculateMac('bewit', {\n    credentials: credentials,\n    ts: exp,\n    nonce: '',\n    method: 'GET',\n    resource: uri.pathname + (uri.search || ''),\n    // Maintain trailing '?'\n    host: uri.hostname,\n    port: uri.port || (uri.protocol === 'http:' ? 80 : 443),\n    ext: options.ext\n  }); // Construct bewit: id\\exp\\mac\\ext\n\n  var bewit = credentials.id + '\\\\' + exp + '\\\\' + mac + '\\\\' + options.ext;\n  return Utils.base64urlEncode(bewit);\n};","map":{"version":3,"sources":["C:/react/quiz/node_modules/hawk/lib/uri.js"],"names":["Url","require","Boom","Cryptiles","Crypto","Utils","internals","exports","authenticate","req","credentialsFunc","options","callback","now","localtimeOffsetMsec","request","parseRequest","Error","badRequest","message","resource","url","match","unauthorized","method","authorization","bewitString","base64urlDecode","bewitParts","split","length","bewit","id","exp","parseInt","mac","ext","err","credentials","key","algorithm","internal","algorithms","indexOf","calculateMac","ts","nonce","host","port","fixedTimeComparison","getBewit","uri","ttlSec","undefined","parse","Math","floor","pathname","search","hostname","protocol","base64urlEncode"],"mappings":"AAAA;AAEA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAApB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAAnB,C,CAGA;;;AAEA,IAAIK,SAAS,GAAG,EAAhB,C,CAGA;;AAEA;AACA;AACA;AACA;;AAEAC,OAAO,CAACC,YAAR,GAAuB,UAAUC,GAAV,EAAeC,eAAf,EAAgCC,OAAhC,EAAyCC,QAAzC,EAAmD;AAEtE;AAEA,MAAIC,GAAG,GAAGR,KAAK,CAACQ,GAAN,MAAeF,OAAO,CAACG,mBAAR,IAA+B,CAA9C,CAAV,CAJsE,CAMtE;;AAEA,MAAIC,OAAO,GAAGV,KAAK,CAACW,YAAN,CAAmBP,GAAnB,EAAwBE,OAAxB,CAAd;;AACA,MAAII,OAAO,YAAYE,KAAvB,EAA8B;AAC1B,WAAOL,QAAQ,CAACV,IAAI,CAACgB,UAAL,CAAgBH,OAAO,CAACI,OAAxB,CAAD,CAAf;AACH,GAXqE,CAatE;AAEA;;;AACA,MAAIC,QAAQ,GAAGL,OAAO,CAACM,GAAR,CAAYC,KAAZ,CAAkB,0CAAlB,CAAf;;AACA,MAAI,CAACF,QAAL,EAAe;AACX,WAAOR,QAAQ,CAACV,IAAI,CAACqB,YAAL,CAAkB,IAAlB,EAAwB,MAAxB,CAAD,CAAf;AACH,GAnBqE,CAqBtE;;;AAEA,MAAI,CAACH,QAAQ,CAAC,CAAD,CAAb,EAAkB;AACd,WAAOR,QAAQ,CAACV,IAAI,CAACqB,YAAL,CAAkB,aAAlB,EAAiC,MAAjC,CAAD,CAAf;AACH,GAzBqE,CA2BtE;;;AAEA,MAAIR,OAAO,CAACS,MAAR,KAAmB,KAAnB,IACAT,OAAO,CAACS,MAAR,KAAmB,MADvB,EAC+B;AAE3B,WAAOZ,QAAQ,CAACV,IAAI,CAACqB,YAAL,CAAkB,gBAAlB,EAAoC,MAApC,CAAD,CAAf;AACH,GAjCqE,CAmCtE;;;AAEA,MAAIR,OAAO,CAACU,aAAZ,EAA2B;AACvB,WAAOb,QAAQ,CAACV,IAAI,CAACgB,UAAL,CAAgB,0BAAhB,EAA4C,MAA5C,CAAD,CAAf;AACH,GAvCqE,CAyCtE;;;AAEA,MAAIQ,WAAW,GAAGrB,KAAK,CAACsB,eAAN,CAAsBP,QAAQ,CAAC,CAAD,CAA9B,CAAlB;;AACA,MAAIM,WAAW,YAAYT,KAA3B,EAAkC;AAC9B,WAAOL,QAAQ,CAACV,IAAI,CAACgB,UAAL,CAAgB,wBAAhB,CAAD,CAAf;AACH,GA9CqE,CAgDtE;;;AAEA,MAAIU,UAAU,GAAGF,WAAW,CAACG,KAAZ,CAAkB,IAAlB,CAAjB;;AACA,MAAI,CAACD,UAAD,IACAA,UAAU,CAACE,MAAX,KAAsB,CAD1B,EAC6B;AAEzB,WAAOlB,QAAQ,CAACV,IAAI,CAACgB,UAAL,CAAgB,yBAAhB,CAAD,CAAf;AACH;;AAED,MAAIa,KAAK,GAAG;AACRC,IAAAA,EAAE,EAAEJ,UAAU,CAAC,CAAD,CADN;AAERK,IAAAA,GAAG,EAAEC,QAAQ,CAACN,UAAU,CAAC,CAAD,CAAX,EAAgB,EAAhB,CAFL;AAGRO,IAAAA,GAAG,EAAEP,UAAU,CAAC,CAAD,CAHP;AAIRQ,IAAAA,GAAG,EAAER,UAAU,CAAC,CAAD,CAAV,IAAiB;AAJd,GAAZ;;AAOA,MAAI,CAACG,KAAK,CAACC,EAAP,IACA,CAACD,KAAK,CAACE,GADP,IAEA,CAACF,KAAK,CAACI,GAFX,EAEgB;AAEZ,WAAOvB,QAAQ,CAACV,IAAI,CAACgB,UAAL,CAAgB,0BAAhB,CAAD,CAAf;AACH,GArEqE,CAuEtE;;;AAEA,MAAIG,GAAG,GAAGD,QAAQ,CAAC,CAAD,CAAlB;;AACA,MAAIA,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACbC,IAAAA,GAAG,IAAID,QAAQ,CAAC,CAAD,CAAR,GAAcA,QAAQ,CAAC,CAAD,CAA7B;AACH,GA5EqE,CA8EtE;;;AAEA,MAAIW,KAAK,CAACE,GAAN,GAAY,IAAZ,IAAoBpB,GAAxB,EAA6B;AACzB,WAAOD,QAAQ,CAACV,IAAI,CAACqB,YAAL,CAAkB,gBAAlB,EAAoC,MAApC,CAAD,EAA8C,IAA9C,EAAoDQ,KAApD,CAAf;AACH,GAlFqE,CAoFtE;;;AAEArB,EAAAA,eAAe,CAACqB,KAAK,CAACC,EAAP,EAAW,UAAUK,GAAV,EAAeC,WAAf,EAA4B;AAElD,QAAID,GAAJ,EAAS;AACL,aAAOzB,QAAQ,CAACyB,GAAD,EAAMC,WAAW,IAAI,IAArB,EAA2BP,KAAK,CAACK,GAAjC,CAAf;AACH;;AAED,QAAI,CAACE,WAAL,EAAkB;AACd,aAAO1B,QAAQ,CAACV,IAAI,CAACqB,YAAL,CAAkB,qBAAlB,EAAyC,MAAzC,CAAD,EAAmD,IAAnD,EAAyDQ,KAAzD,CAAf;AACH;;AAED,QAAI,CAACO,WAAW,CAACC,GAAb,IACA,CAACD,WAAW,CAACE,SADjB,EAC4B;AAExB,aAAO5B,QAAQ,CAACV,IAAI,CAACuC,QAAL,CAAc,qBAAd,CAAD,EAAuCH,WAAvC,EAAoDP,KAApD,CAAf;AACH;;AAED,QAAI3B,MAAM,CAACsC,UAAP,CAAkBC,OAAlB,CAA0BL,WAAW,CAACE,SAAtC,MAAqD,CAAC,CAA1D,EAA6D;AACzD,aAAO5B,QAAQ,CAACV,IAAI,CAACuC,QAAL,CAAc,mBAAd,CAAD,EAAqCH,WAArC,EAAkDP,KAAlD,CAAf;AACH,KAlBiD,CAoBlD;;;AAEA,QAAII,GAAG,GAAG/B,MAAM,CAACwC,YAAP,CAAoB,OAApB,EAA6B;AACnCN,MAAAA,WAAW,EAAEA,WADsB;AAEnCO,MAAAA,EAAE,EAAEd,KAAK,CAACE,GAFyB;AAGnCa,MAAAA,KAAK,EAAE,EAH4B;AAInCtB,MAAAA,MAAM,EAAE,KAJ2B;AAKnCJ,MAAAA,QAAQ,EAAEC,GALyB;AAMnC0B,MAAAA,IAAI,EAAEhC,OAAO,CAACgC,IANqB;AAOnCC,MAAAA,IAAI,EAAEjC,OAAO,CAACiC,IAPqB;AAQnCZ,MAAAA,GAAG,EAAEL,KAAK,CAACK;AARwB,KAA7B,CAAV;;AAWA,QAAI,CAACjC,SAAS,CAAC8C,mBAAV,CAA8Bd,GAA9B,EAAmCJ,KAAK,CAACI,GAAzC,CAAL,EAAoD;AAChD,aAAOvB,QAAQ,CAACV,IAAI,CAACqB,YAAL,CAAkB,SAAlB,EAA6B,MAA7B,CAAD,EAAuCe,WAAvC,EAAoDP,KAApD,CAAf;AACH,KAnCiD,CAqClD;;;AAEA,WAAOnB,QAAQ,CAAC,IAAD,EAAO0B,WAAP,EAAoBP,KAApB,CAAf;AACH,GAxCc,CAAf;AAyCH,CA/HD,C,CAkIA;;AAEA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAxB,OAAO,CAAC2C,QAAR,GAAmB,UAAUC,GAAV,EAAexC,OAAf,EAAwB;AAEvC;AAEA,MAAI,CAACwC,GAAD,IACC,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAD3C,IAEA,CAACxC,OAFD,IAGA,OAAOA,OAAP,KAAmB,QAHnB,IAIA,CAACA,OAAO,CAACyC,MAJb,EAIqB;AAEjB,WAAO,EAAP;AACH;;AAEDzC,EAAAA,OAAO,CAACyB,GAAR,GAAezB,OAAO,CAACyB,GAAR,KAAgB,IAAhB,IAAwBzB,OAAO,CAACyB,GAAR,KAAgBiB,SAAxC,GAAoD,EAApD,GAAyD1C,OAAO,CAACyB,GAAhF,CAbuC,CAaqD;AAE5F;;AAEA,MAAIvB,GAAG,GAAGR,KAAK,CAACQ,GAAN,MAAeF,OAAO,CAACG,mBAAR,IAA+B,CAA9C,CAAV,CAjBuC,CAmBvC;;AAEA,MAAIwB,WAAW,GAAG3B,OAAO,CAAC2B,WAA1B;;AACA,MAAI,CAACA,WAAD,IACA,CAACA,WAAW,CAACN,EADb,IAEA,CAACM,WAAW,CAACC,GAFb,IAGA,CAACD,WAAW,CAACE,SAHjB,EAG4B;AAExB,WAAO,EAAP;AACH;;AAED,MAAIpC,MAAM,CAACsC,UAAP,CAAkBC,OAAlB,CAA0BL,WAAW,CAACE,SAAtC,MAAqD,CAAC,CAA1D,EAA6D;AACzD,WAAO,EAAP;AACH,GAhCsC,CAkCvC;;;AAEA,MAAI,OAAOW,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGnD,GAAG,CAACsD,KAAJ,CAAUH,GAAV,CAAN;AACH,GAtCsC,CAwCvC;;;AAEA,MAAIlB,GAAG,GAAGsB,IAAI,CAACC,KAAL,CAAW3C,GAAG,GAAG,IAAjB,IAAyBF,OAAO,CAACyC,MAA3C;AACA,MAAIjB,GAAG,GAAG/B,MAAM,CAACwC,YAAP,CAAoB,OAApB,EAA6B;AACnCN,IAAAA,WAAW,EAAEA,WADsB;AAEnCO,IAAAA,EAAE,EAAEZ,GAF+B;AAGnCa,IAAAA,KAAK,EAAE,EAH4B;AAInCtB,IAAAA,MAAM,EAAE,KAJ2B;AAKnCJ,IAAAA,QAAQ,EAAE+B,GAAG,CAACM,QAAJ,IAAgBN,GAAG,CAACO,MAAJ,IAAc,EAA9B,CALyB;AAKqC;AACxEX,IAAAA,IAAI,EAAEI,GAAG,CAACQ,QANyB;AAOnCX,IAAAA,IAAI,EAAEG,GAAG,CAACH,IAAJ,KAAaG,GAAG,CAACS,QAAJ,KAAiB,OAAjB,GAA2B,EAA3B,GAAgC,GAA7C,CAP6B;AAQnCxB,IAAAA,GAAG,EAAEzB,OAAO,CAACyB;AARsB,GAA7B,CAAV,CA3CuC,CAsDvC;;AAEA,MAAIL,KAAK,GAAGO,WAAW,CAACN,EAAZ,GAAiB,IAAjB,GAAwBC,GAAxB,GAA8B,IAA9B,GAAqCE,GAArC,GAA2C,IAA3C,GAAkDxB,OAAO,CAACyB,GAAtE;AACA,SAAO/B,KAAK,CAACwD,eAAN,CAAsB9B,KAAtB,CAAP;AACH,CA1DD","sourcesContent":["// Load modules\n\nvar Url = require('url');\nvar Boom = require('boom');\nvar Cryptiles = require('cryptiles');\nvar Crypto = require('./crypto');\nvar Utils = require('./utils');\n\n\n// Declare internals\n\nvar internals = {};\n\n\n// Hawk authentication\n\n/*\n * Arguments and options are the same as index.js with the exception that the only supported options are:\n * 'hostHeaderName', 'localtimeOffsetMsec'\n */\n\nexports.authenticate = function (req, credentialsFunc, options, callback) {\n\n    // Application time\n\n    var now = Utils.now() + (options.localtimeOffsetMsec || 0);\n\n    // Convert node Http request object to a request configuration object\n\n    var request = Utils.parseRequest(req, options);\n    if (request instanceof Error) {\n        return callback(Boom.badRequest(request.message));\n    }\n\n    // Extract bewit\n\n    //                                 1     2             3           4     \n    var resource = request.url.match(/^(\\/.*)([\\?&])bewit\\=([^&$]*)(?:&(.+))?$/);\n    if (!resource) {\n        return callback(Boom.unauthorized(null, 'Hawk'));\n    }\n\n    // Bewit not empty\n\n    if (!resource[3]) {\n        return callback(Boom.unauthorized('Empty bewit', 'Hawk'));\n    }\n\n    // Verify method is GET\n\n    if (request.method !== 'GET' &&\n        request.method !== 'HEAD') {\n\n        return callback(Boom.unauthorized('Invalid method', 'Hawk'));\n    }\n\n    // No other authentication\n\n    if (request.authorization) {\n        return callback(Boom.badRequest('Multiple authentications', 'Hawk'));\n    }\n\n    // Parse bewit\n\n    var bewitString = Utils.base64urlDecode(resource[3]);\n    if (bewitString instanceof Error) {\n        return callback(Boom.badRequest('Invalid bewit encoding'));\n    }\n\n    // Bewit format: id\\exp\\mac\\ext ('\\' is used because it is a reserved header attribute character)\n\n    var bewitParts = bewitString.split('\\\\');\n    if (!bewitParts ||\n        bewitParts.length !== 4) {\n\n        return callback(Boom.badRequest('Invalid bewit structure'));\n    }\n\n    var bewit = {\n        id: bewitParts[0],\n        exp: parseInt(bewitParts[1], 10),\n        mac: bewitParts[2],\n        ext: bewitParts[3] || ''\n    };\n\n    if (!bewit.id ||\n        !bewit.exp ||\n        !bewit.mac) {\n\n        return callback(Boom.badRequest('Missing bewit attributes'));\n    }\n\n    // Construct URL without bewit\n\n    var url = resource[1];\n    if (resource[4]) {\n        url += resource[2] + resource[4];\n    }\n\n    // Check expiration\n\n    if (bewit.exp * 1000 <= now) {\n        return callback(Boom.unauthorized('Access expired', 'Hawk'), null, bewit);\n    }\n\n    // Fetch Hawk credentials\n\n    credentialsFunc(bewit.id, function (err, credentials) {\n\n        if (err) {\n            return callback(err, credentials || null, bewit.ext);\n        }\n\n        if (!credentials) {\n            return callback(Boom.unauthorized('Unknown credentials', 'Hawk'), null, bewit);\n        }\n\n        if (!credentials.key ||\n            !credentials.algorithm) {\n\n            return callback(Boom.internal('Invalid credentials'), credentials, bewit);\n        }\n\n        if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n            return callback(Boom.internal('Unknown algorithm'), credentials, bewit);\n        }\n\n        // Calculate MAC\n\n        var mac = Crypto.calculateMac('bewit', {\n            credentials: credentials,\n            ts: bewit.exp,\n            nonce: '',\n            method: 'GET',\n            resource: url,\n            host: request.host,\n            port: request.port,\n            ext: bewit.ext\n        });\n\n        if (!Cryptiles.fixedTimeComparison(mac, bewit.mac)) {\n            return callback(Boom.unauthorized('Bad mac', 'Hawk'), credentials, bewit);\n        }\n\n        // Successful authentication\n\n        return callback(null, credentials, bewit);\n    });\n};\n\n\n// Generate a bewit value for a given URI\n\n/*\n * credentials is an object with the following keys: 'id, 'key', 'algorithm'.\n * options is an object with the following optional keys: 'ext', 'localtimeOffsetMsec'\n */\n/*\n    uri: 'http://example.com/resource?a=b' or object from Url.parse()\n    options: {\n\n        // Required\n\n        credentials: {\n            id: 'dh37fgj492je',\n            key: 'aoijedoaijsdlaksjdl',\n            algorithm: 'sha256'                             // 'sha1', 'sha256'\n        },\n        ttlSec: 60 * 60,                                    // TTL in seconds\n\n        // Optional\n\n        ext: 'application-specific',                        // Application specific data sent via the ext attribute\n        localtimeOffsetMsec: 400                            // Time offset to sync with server time\n    };\n*/\n\nexports.getBewit = function (uri, options) {\n\n    // Validate inputs\n\n    if (!uri ||\n        (typeof uri !== 'string' && typeof uri !== 'object') ||\n        !options ||\n        typeof options !== 'object' ||\n        !options.ttlSec) {\n\n        return '';\n    }\n\n    options.ext = (options.ext === null || options.ext === undefined ? '' : options.ext);       // Zero is valid value\n\n    // Application time\n\n    var now = Utils.now() + (options.localtimeOffsetMsec || 0);\n\n    // Validate credentials\n\n    var credentials = options.credentials;\n    if (!credentials ||\n        !credentials.id ||\n        !credentials.key ||\n        !credentials.algorithm) {\n\n        return '';\n    }\n\n    if (Crypto.algorithms.indexOf(credentials.algorithm) === -1) {\n        return '';\n    }\n\n    // Parse URI\n\n    if (typeof uri === 'string') {\n        uri = Url.parse(uri);\n    }\n\n    // Calculate signature\n\n    var exp = Math.floor(now / 1000) + options.ttlSec;\n    var mac = Crypto.calculateMac('bewit', {\n        credentials: credentials,\n        ts: exp,\n        nonce: '',\n        method: 'GET',\n        resource: uri.pathname + (uri.search || ''),                            // Maintain trailing '?'\n        host: uri.hostname,\n        port: uri.port || (uri.protocol === 'http:' ? 80 : 443),\n        ext: options.ext\n    });\n\n    // Construct bewit: id\\exp\\mac\\ext\n\n    var bewit = credentials.id + '\\\\' + exp + '\\\\' + mac + '\\\\' + options.ext;\n    return Utils.base64urlEncode(bewit);\n};\n\n\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DeadlineFilterFactory = exports.DeadlineFilter = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nconst filter_1 = require(\"./filter\");\n\nconst units = [['m', 1], ['S', 1000], ['M', 60 * 1000], ['H', 60 * 60 * 1000]];\n\nfunction getDeadline(deadline) {\n  const now = new Date().getTime();\n  const timeoutMs = Math.max(deadline - now, 0);\n\n  for (const [unit, factor] of units) {\n    const amount = timeoutMs / factor;\n\n    if (amount < 1e8) {\n      return String(Math.ceil(amount)) + unit;\n    }\n  }\n\n  throw new Error('Deadline is too far in the future');\n}\n\nclass DeadlineFilter extends filter_1.BaseFilter {\n  constructor(channel, callStream) {\n    super();\n    this.channel = channel;\n    this.callStream = callStream;\n    this.timer = null;\n    this.deadline = Infinity;\n    this.retreiveDeadline();\n    this.runTimer();\n  }\n\n  retreiveDeadline() {\n    const callDeadline = this.callStream.getDeadline();\n\n    if (callDeadline instanceof Date) {\n      this.deadline = callDeadline.getTime();\n    } else {\n      this.deadline = callDeadline;\n    }\n  }\n\n  runTimer() {\n    var _a, _b;\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    const now = new Date().getTime();\n    const timeout = this.deadline - now;\n\n    if (timeout <= 0) {\n      process.nextTick(() => {\n        this.callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\n      });\n    } else if (this.deadline !== Infinity) {\n      this.timer = setTimeout(() => {\n        this.callStream.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\n      }, timeout);\n      (_b = (_a = this.timer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }\n\n  refresh() {\n    this.retreiveDeadline();\n    this.runTimer();\n  }\n\n  async sendMetadata(metadata) {\n    if (this.deadline === Infinity) {\n      return metadata;\n    }\n    /* The input metadata promise depends on the original channel.connect()\n     * promise, so when it is complete that implies that the channel is\n     * connected */\n\n\n    const finalMetadata = await metadata;\n    const timeoutString = getDeadline(this.deadline);\n    finalMetadata.set('grpc-timeout', timeoutString);\n    return finalMetadata;\n  }\n\n  receiveTrailers(status) {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    return status;\n  }\n\n}\n\nexports.DeadlineFilter = DeadlineFilter;\n\nclass DeadlineFilterFactory {\n  constructor(channel) {\n    this.channel = channel;\n  }\n\n  createFilter(callStream) {\n    return new DeadlineFilter(this.channel, callStream);\n  }\n\n}\n\nexports.DeadlineFilterFactory = DeadlineFilterFactory;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\deadline-filter.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Call, StatusObject } from './call-stream';\nimport { Channel } from './channel';\nimport { Status } from './constants';\nimport { BaseFilter, Filter, FilterFactory } from './filter';\nimport { Metadata } from './metadata';\n\nconst units: Array<[string, number]> = [\n  ['m', 1],\n  ['S', 1000],\n  ['M', 60 * 1000],\n  ['H', 60 * 60 * 1000],\n];\n\nfunction getDeadline(deadline: number) {\n  const now = new Date().getTime();\n  const timeoutMs = Math.max(deadline - now, 0);\n  for (const [unit, factor] of units) {\n    const amount = timeoutMs / factor;\n    if (amount < 1e8) {\n      return String(Math.ceil(amount)) + unit;\n    }\n  }\n  throw new Error('Deadline is too far in the future');\n}\n\nexport class DeadlineFilter extends BaseFilter implements Filter {\n  private timer: NodeJS.Timer | null = null;\n  private deadline = Infinity;\n  constructor(\n    private readonly channel: Channel,\n    private readonly callStream: Call\n  ) {\n    super();\n    this.retreiveDeadline();\n    this.runTimer();\n  }\n\n  private retreiveDeadline() {\n    const callDeadline = this.callStream.getDeadline();\n    if (callDeadline instanceof Date) {\n      this.deadline = callDeadline.getTime();\n    } else {\n      this.deadline = callDeadline;\n    }\n  }\n\n  private runTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    const now: number = new Date().getTime();\n    const timeout = this.deadline - now;\n    if (timeout <= 0) {\n      process.nextTick(() => {\n        this.callStream.cancelWithStatus(\n          Status.DEADLINE_EXCEEDED,\n          'Deadline exceeded'\n        );\n      });\n    } else if (this.deadline !== Infinity) {\n      this.timer = setTimeout(() => {\n        this.callStream.cancelWithStatus(\n          Status.DEADLINE_EXCEEDED,\n          'Deadline exceeded'\n        );\n      }, timeout);\n      this.timer.unref?.();\n    }\n  }\n\n  refresh() {\n    this.retreiveDeadline();\n    this.runTimer();\n  }\n\n  async sendMetadata(metadata: Promise<Metadata>) {\n    if (this.deadline === Infinity) {\n      return metadata;\n    }\n    /* The input metadata promise depends on the original channel.connect()\n     * promise, so when it is complete that implies that the channel is\n     * connected */\n    const finalMetadata = await metadata;\n    const timeoutString = getDeadline(this.deadline);\n    finalMetadata.set('grpc-timeout', timeoutString);\n    return finalMetadata;\n  }\n\n  receiveTrailers(status: StatusObject) {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n    return status;\n  }\n}\n\nexport class DeadlineFilterFactory implements FilterFactory<DeadlineFilter> {\n  constructor(private readonly channel: Channel) {}\n\n  createFilter(callStream: Call): DeadlineFilter {\n    return new DeadlineFilter(this.channel, callStream);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
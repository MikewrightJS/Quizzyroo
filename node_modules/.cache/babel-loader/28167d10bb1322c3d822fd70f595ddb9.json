{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = exports.callErrorFromStatus = void 0;\n\nconst events_1 = require(\"events\");\n\nconst stream_1 = require(\"stream\");\n\nconst constants_1 = require(\"./constants\");\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */\n\n\nfunction callErrorFromStatus(status) {\n  const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\n  return Object.assign(new Error(message), status);\n}\n\nexports.callErrorFromStatus = callErrorFromStatus;\n\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\n  constructor() {\n    super();\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n}\n\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\n\nclass ClientReadableStreamImpl extends stream_1.Readable {\n  constructor(deserialize) {\n    super({\n      objectMode: true\n    });\n    this.deserialize = deserialize;\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n  _read(_size) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n  }\n\n}\n\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\n\nclass ClientWritableStreamImpl extends stream_1.Writable {\n  constructor(serialize) {\n    super({\n      objectMode: true\n    });\n    this.serialize = serialize;\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n  _write(chunk, encoding, cb) {\n    var _a;\n\n    const context = {\n      callback: cb\n    };\n    const flags = Number(encoding);\n\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n    cb();\n  }\n\n}\n\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\n\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\n  constructor(serialize, deserialize) {\n    super({\n      objectMode: true\n    });\n    this.serialize = serialize;\n    this.deserialize = deserialize;\n  }\n\n  cancel() {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n\n  _read(_size) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n  }\n\n  _write(chunk, encoding, cb) {\n    var _a;\n\n    const context = {\n      callback: cb\n    };\n    const flags = Number(encoding);\n\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb) {\n    var _a;\n\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n    cb();\n  }\n\n}\n\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\call.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { EventEmitter } from 'events';\nimport { Duplex, Readable, Writable } from 'stream';\n\nimport { StatusObject, MessageContext } from './call-stream';\nimport { Status } from './constants';\nimport { EmitterAugmentation1 } from './events';\nimport { Metadata } from './metadata';\nimport { ObjectReadable, ObjectWritable, WriteCallback } from './object-stream';\nimport { InterceptingCallInterface } from './client-interceptors';\n\n/**\n * A type extending the built-in Error object with additional fields.\n */\nexport type ServiceError = StatusObject & Error;\n\n/**\n * A base type for all user-facing values returned by client-side method calls.\n */\nexport type SurfaceCall = {\n  call?: InterceptingCallInterface;\n  cancel(): void;\n  getPeer(): string;\n} & EmitterAugmentation1<'metadata', Metadata> &\n  EmitterAugmentation1<'status', StatusObject> &\n  EventEmitter;\n\n/**\n * A type representing the return value of a unary method call.\n */\nexport type ClientUnaryCall = SurfaceCall;\n\n/**\n * A type representing the return value of a server stream method call.\n */\nexport type ClientReadableStream<ResponseType> = {\n  deserialize: (chunk: Buffer) => ResponseType;\n} & SurfaceCall &\n  ObjectReadable<ResponseType>;\n\n/**\n * A type representing the return value of a client stream method call.\n */\nexport type ClientWritableStream<RequestType> = {\n  serialize: (value: RequestType) => Buffer;\n} & SurfaceCall &\n  ObjectWritable<RequestType>;\n\n/**\n * A type representing the return value of a bidirectional stream method call.\n */\nexport type ClientDuplexStream<\n  RequestType,\n  ResponseType\n> = ClientWritableStream<RequestType> & ClientReadableStream<ResponseType>;\n\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */\nexport function callErrorFromStatus(status: StatusObject): ServiceError {\n  const message = `${status.code} ${Status[status.code]}: ${status.details}`;\n  return Object.assign(new Error(message), status);\n}\n\nexport class ClientUnaryCallImpl\n  extends EventEmitter\n  implements ClientUnaryCall {\n  public call?: InterceptingCallInterface;\n  constructor() {\n    super();\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n}\n\nexport class ClientReadableStreamImpl<ResponseType>\n  extends Readable\n  implements ClientReadableStream<ResponseType> {\n  public call?: InterceptingCallInterface;\n  constructor(readonly deserialize: (chunk: Buffer) => ResponseType) {\n    super({ objectMode: true });\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n\n  _read(_size: number): void {\n    this.call?.startRead();\n  }\n}\n\nexport class ClientWritableStreamImpl<RequestType>\n  extends Writable\n  implements ClientWritableStream<RequestType> {\n  public call?: InterceptingCallInterface;\n  constructor(readonly serialize: (value: RequestType) => Buffer) {\n    super({ objectMode: true });\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n\n  _write(chunk: RequestType, encoding: string, cb: WriteCallback) {\n    const context: MessageContext = {\n      callback: cb,\n    };\n    const flags = Number(encoding);\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n    this.call?.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb: Function) {\n    this.call?.halfClose();\n    cb();\n  }\n}\n\nexport class ClientDuplexStreamImpl<RequestType, ResponseType>\n  extends Duplex\n  implements ClientDuplexStream<RequestType, ResponseType> {\n  public call?: InterceptingCallInterface;\n  constructor(\n    readonly serialize: (value: RequestType) => Buffer,\n    readonly deserialize: (chunk: Buffer) => ResponseType\n  ) {\n    super({ objectMode: true });\n  }\n\n  cancel(): void {\n    this.call?.cancelWithStatus(Status.CANCELLED, 'Cancelled on client');\n  }\n\n  getPeer(): string {\n    return this.call?.getPeer() ?? 'unknown';\n  }\n\n  _read(_size: number): void {\n    this.call?.startRead();\n  }\n\n  _write(chunk: RequestType, encoding: string, cb: WriteCallback) {\n    const context: MessageContext = {\n      callback: cb,\n    };\n    const flags = Number(encoding);\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n    this.call?.sendMessageWithContext(context, chunk);\n  }\n\n  _final(cb: Function) {\n    this.call?.halfClose();\n    cb();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\n\nconst net_1 = require(\"net\");\n\nfunction isTcpSubchannelAddress(address) {\n  return 'port' in address;\n}\n\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\n\nfunction subchannelAddressEqual(address1, address2) {\n  if (isTcpSubchannelAddress(address1)) {\n    return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\n\nexports.subchannelAddressEqual = subchannelAddressEqual;\n\nfunction subchannelAddressToString(address) {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\n\nexports.subchannelAddressToString = subchannelAddressToString;\nconst DEFAULT_PORT = 443;\n\nfunction stringToSubchannelAddress(addressString, port) {\n  if (net_1.isIP(addressString)) {\n    return {\n      host: addressString,\n      port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}\n\nexports.stringToSubchannelAddress = stringToSubchannelAddress;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\subchannel-address.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;AAeG;;;;;;;AAEH,MAAA,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA;;AAmBA,SAAgB,sBAAhB,CACE,OADF,EAC4B;AAE1B,SAAO,UAAU,OAAjB;AACD;;AAJD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAMA,SAAgB,sBAAhB,CACE,QADF,EAEE,QAFF,EAE6B;AAE3B,MAAI,sBAAsB,CAAC,QAAD,CAA1B,EAAsC;AACpC,WACE,sBAAsB,CAAC,QAAD,CAAtB,IACA,QAAQ,CAAC,IAAT,KAAkB,QAAQ,CAAC,IAD3B,IAEA,QAAQ,CAAC,IAAT,KAAkB,QAAQ,CAAC,IAH7B;AAKD,GAND,MAMO;AACL,WAAO,CAAC,sBAAsB,CAAC,QAAD,CAAvB,IAAqC,QAAQ,CAAC,IAAT,KAAkB,QAAQ,CAAC,IAAvE;AACD;AACF;;AAbD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAeA,SAAgB,yBAAhB,CAA0C,OAA1C,EAAoE;AAClE,MAAI,sBAAsB,CAAC,OAAD,CAA1B,EAAqC;AACnC,WAAO,OAAO,CAAC,IAAR,GAAe,GAAf,GAAqB,OAAO,CAAC,IAApC;AACD,GAFD,MAEO;AACL,WAAO,OAAO,CAAC,IAAf;AACD;AACF;;AAND,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAQA,MAAM,YAAY,GAAG,GAArB;;AAEA,SAAgB,yBAAhB,CAA0C,aAA1C,EAAiE,IAAjE,EAA8E;AAC5E,MAAI,KAAA,CAAA,IAAA,CAAK,aAAL,CAAJ,EAAyB;AACvB,WAAO;AACL,MAAA,IAAI,EAAE,aADD;AAEL,MAAA,IAAI,EAAE,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAA,IAAA,GAAQ;AAFT,KAAP;AAID,GALD,MAKO;AACL,WAAO;AACL,MAAA,IAAI,EAAE;AADD,KAAP;AAGD;AACF;;AAXD,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isIP } from \"net\";\n\nexport interface TcpSubchannelAddress {\n  port: number;\n  host: string;\n}\n\nexport interface IpcSubchannelAddress {\n  path: string;\n}\n/**\n * This represents a single backend address to connect to. This interface is a\n * subset of net.SocketConnectOpts, i.e. the options described at\n * https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener.\n * Those are in turn a subset of the options that can be passed to http2.connect.\n */\n\nexport type SubchannelAddress = TcpSubchannelAddress | IpcSubchannelAddress;\n\nexport function isTcpSubchannelAddress(\n  address: SubchannelAddress\n): address is TcpSubchannelAddress {\n  return 'port' in address;\n}\n\nexport function subchannelAddressEqual(\n  address1: SubchannelAddress,\n  address2: SubchannelAddress\n): boolean {\n  if (isTcpSubchannelAddress(address1)) {\n    return (\n      isTcpSubchannelAddress(address2) &&\n      address1.host === address2.host &&\n      address1.port === address2.port\n    );\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\n\nexport function subchannelAddressToString(address: SubchannelAddress): string {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\n\nconst DEFAULT_PORT = 443;\n\nexport function stringToSubchannelAddress(addressString: string, port?: number): SubchannelAddress {\n  if (isIP(addressString)) {\n    return {\n      host: addressString,\n      port: port ?? DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}"]},"metadata":{},"sourceType":"script"}
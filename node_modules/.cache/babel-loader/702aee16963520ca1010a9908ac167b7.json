{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.RoundRobinLoadBalancer = void 0;\n\nconst load_balancer_1 = require(\"./load-balancer\");\n\nconst connectivity_state_1 = require(\"./connectivity-state\");\n\nconst picker_1 = require(\"./picker\");\n\nconst subchannel_address_1 = require(\"./subchannel-address\");\n\nconst logging = require(\"./logging\");\n\nconst constants_1 = require(\"./constants\");\n\nconst TRACER_NAME = 'round_robin';\n\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst TYPE_NAME = 'round_robin';\n\nclass RoundRobinLoadBalancingConfig {\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n\n  constructor() {}\n\n  toJsonObject() {\n    return {\n      [TYPE_NAME]: {}\n    };\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  static createFromJson(obj) {\n    return new RoundRobinLoadBalancingConfig();\n  }\n\n}\n\nclass RoundRobinPicker {\n  constructor(subchannelList) {\n    let nextIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.subchannelList = subchannelList;\n    this.nextIndex = nextIndex;\n  }\n\n  pick(pickArgs) {\n    const pickedSubchannel = this.subchannelList[this.nextIndex];\n    this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;\n    return {\n      pickResultType: picker_1.PickResultType.COMPLETE,\n      subchannel: pickedSubchannel,\n      status: null,\n      extraFilterFactories: [],\n      onCallStarted: null\n    };\n  }\n  /**\n   * Check what the next subchannel returned would be. Used by the load\n   * balancer implementation to preserve this part of the picker state if\n   * possible when a subchannel connects or disconnects.\n   */\n\n\n  peekNextSubchannel() {\n    return this.subchannelList[this.nextIndex];\n  }\n\n}\n\nclass RoundRobinLoadBalancer {\n  constructor(channelControlHelper) {\n    this.channelControlHelper = channelControlHelper;\n    this.subchannels = [];\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    this.currentReadyPicker = null;\n    this.subchannelStateCounts = {\n      [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n      [connectivity_state_1.ConnectivityState.IDLE]: 0,\n      [connectivity_state_1.ConnectivityState.READY]: 0,\n      [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n      [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n    };\n\n    this.subchannelStateListener = (subchannel, previousState, newState) => {\n      this.subchannelStateCounts[previousState] -= 1;\n      this.subchannelStateCounts[newState] += 1;\n      this.calculateAndUpdateState();\n\n      if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE || newState === connectivity_state_1.ConnectivityState.IDLE) {\n        this.channelControlHelper.requestReresolution();\n        subchannel.startConnecting();\n      }\n    };\n  }\n\n  calculateAndUpdateState() {\n    if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.READY] > 0) {\n      const readySubchannels = this.subchannels.filter(subchannel => subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n      let index = 0;\n\n      if (this.currentReadyPicker !== null) {\n        index = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());\n\n        if (index < 0) {\n          index = 0;\n        }\n      }\n\n      this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index));\n    } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.CONNECTING] > 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n    } else if (this.subchannelStateCounts[connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE] > 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker());\n    } else {\n      this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n    }\n  }\n\n  updateState(newState, picker) {\n    trace(connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n\n    if (newState === connectivity_state_1.ConnectivityState.READY) {\n      this.currentReadyPicker = picker;\n    } else {\n      this.currentReadyPicker = null;\n    }\n\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker);\n  }\n\n  resetSubchannelList() {\n    for (const subchannel of this.subchannels) {\n      subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n      subchannel.unref();\n      this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n    }\n\n    this.subchannelStateCounts = {\n      [connectivity_state_1.ConnectivityState.CONNECTING]: 0,\n      [connectivity_state_1.ConnectivityState.IDLE]: 0,\n      [connectivity_state_1.ConnectivityState.READY]: 0,\n      [connectivity_state_1.ConnectivityState.SHUTDOWN]: 0,\n      [connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE]: 0\n    };\n    this.subchannels = [];\n  }\n\n  updateAddressList(addressList, lbConfig) {\n    this.resetSubchannelList();\n    trace('Connect to address list ' + addressList.map(address => subchannel_address_1.subchannelAddressToString(address)));\n    this.subchannels = addressList.map(address => this.channelControlHelper.createSubchannel(address, {}));\n\n    for (const subchannel of this.subchannels) {\n      subchannel.ref();\n      subchannel.addConnectivityStateListener(this.subchannelStateListener);\n      this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n      const subchannelState = subchannel.getConnectivityState();\n      this.subchannelStateCounts[subchannelState] += 1;\n\n      if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n        subchannel.startConnecting();\n      }\n    }\n\n    this.calculateAndUpdateState();\n  }\n\n  exitIdle() {\n    for (const subchannel of this.subchannels) {\n      subchannel.startConnecting();\n    }\n  }\n\n  resetBackoff() {\n    /* The pick first load balancer does not have a connection backoff, so this\n     * does nothing */\n  }\n\n  destroy() {\n    this.resetSubchannelList();\n  }\n\n  getTypeName() {\n    return TYPE_NAME;\n  }\n\n}\n\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\n\nfunction setup() {\n  load_balancer_1.registerLoadBalancerType(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n}\n\nexports.setup = setup;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\load-balancer-round-robin.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  LoadBalancer,\n  ChannelControlHelper,\n  LoadBalancingConfig,\n  registerLoadBalancerType,\n} from './load-balancer';\nimport { ConnectivityState } from './connectivity-state';\nimport {\n  QueuePicker,\n  Picker,\n  PickArgs,\n  CompletePickResult,\n  PickResultType,\n  UnavailablePicker,\n} from './picker';\nimport { Subchannel, ConnectivityStateListener } from './subchannel';\nimport {\n  SubchannelAddress,\n  subchannelAddressToString,\n} from './subchannel-address';\nimport * as logging from './logging';\nimport { LogVerbosity } from './constants';\n\nconst TRACER_NAME = 'round_robin';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst TYPE_NAME = 'round_robin';\n\nclass RoundRobinLoadBalancingConfig implements LoadBalancingConfig {\n  getLoadBalancerName(): string {\n    return TYPE_NAME;\n  }\n\n  constructor() {}\n\n  toJsonObject(): object {\n    return {\n      [TYPE_NAME]: {},\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static createFromJson(obj: any) {\n    return new RoundRobinLoadBalancingConfig();\n  }\n}\n\nclass RoundRobinPicker implements Picker {\n  constructor(\n    private readonly subchannelList: Subchannel[],\n    private nextIndex = 0\n  ) {}\n\n  pick(pickArgs: PickArgs): CompletePickResult {\n    const pickedSubchannel = this.subchannelList[this.nextIndex];\n    this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;\n    return {\n      pickResultType: PickResultType.COMPLETE,\n      subchannel: pickedSubchannel,\n      status: null,\n      extraFilterFactories: [],\n      onCallStarted: null,\n    };\n  }\n\n  /**\n   * Check what the next subchannel returned would be. Used by the load\n   * balancer implementation to preserve this part of the picker state if\n   * possible when a subchannel connects or disconnects.\n   */\n  peekNextSubchannel(): Subchannel {\n    return this.subchannelList[this.nextIndex];\n  }\n}\n\ninterface ConnectivityStateCounts {\n  [ConnectivityState.CONNECTING]: number;\n  [ConnectivityState.IDLE]: number;\n  [ConnectivityState.READY]: number;\n  [ConnectivityState.SHUTDOWN]: number;\n  [ConnectivityState.TRANSIENT_FAILURE]: number;\n}\n\nexport class RoundRobinLoadBalancer implements LoadBalancer {\n  private subchannels: Subchannel[] = [];\n\n  private currentState: ConnectivityState = ConnectivityState.IDLE;\n\n  private subchannelStateListener: ConnectivityStateListener;\n\n  private subchannelStateCounts: ConnectivityStateCounts;\n\n  private currentReadyPicker: RoundRobinPicker | null = null;\n\n  constructor(private readonly channelControlHelper: ChannelControlHelper) {\n    this.subchannelStateCounts = {\n      [ConnectivityState.CONNECTING]: 0,\n      [ConnectivityState.IDLE]: 0,\n      [ConnectivityState.READY]: 0,\n      [ConnectivityState.SHUTDOWN]: 0,\n      [ConnectivityState.TRANSIENT_FAILURE]: 0,\n    };\n    this.subchannelStateListener = (\n      subchannel: Subchannel,\n      previousState: ConnectivityState,\n      newState: ConnectivityState\n    ) => {\n      this.subchannelStateCounts[previousState] -= 1;\n      this.subchannelStateCounts[newState] += 1;\n      this.calculateAndUpdateState();\n\n      if (\n        newState === ConnectivityState.TRANSIENT_FAILURE ||\n        newState === ConnectivityState.IDLE\n      ) {\n        this.channelControlHelper.requestReresolution();\n        subchannel.startConnecting();\n      }\n    };\n  }\n\n  private calculateAndUpdateState() {\n    if (this.subchannelStateCounts[ConnectivityState.READY] > 0) {\n      const readySubchannels = this.subchannels.filter(\n        (subchannel) =>\n          subchannel.getConnectivityState() === ConnectivityState.READY\n      );\n      let index = 0;\n      if (this.currentReadyPicker !== null) {\n        index = readySubchannels.indexOf(\n          this.currentReadyPicker.peekNextSubchannel()\n        );\n        if (index < 0) {\n          index = 0;\n        }\n      }\n      this.updateState(\n        ConnectivityState.READY,\n        new RoundRobinPicker(readySubchannels, index)\n      );\n    } else if (this.subchannelStateCounts[ConnectivityState.CONNECTING] > 0) {\n      this.updateState(ConnectivityState.CONNECTING, new QueuePicker(this));\n    } else if (\n      this.subchannelStateCounts[ConnectivityState.TRANSIENT_FAILURE] > 0\n    ) {\n      this.updateState(\n        ConnectivityState.TRANSIENT_FAILURE,\n        new UnavailablePicker()\n      );\n    } else {\n      this.updateState(ConnectivityState.IDLE, new QueuePicker(this));\n    }\n  }\n\n  private updateState(newState: ConnectivityState, picker: Picker) {\n    trace(\n      ConnectivityState[this.currentState] +\n        ' -> ' +\n        ConnectivityState[newState]\n    );\n    if (newState === ConnectivityState.READY) {\n      this.currentReadyPicker = picker as RoundRobinPicker;\n    } else {\n      this.currentReadyPicker = null;\n    }\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker);\n  }\n\n  private resetSubchannelList() {\n    for (const subchannel of this.subchannels) {\n      subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n      subchannel.unref();\n      this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n    }\n    this.subchannelStateCounts = {\n      [ConnectivityState.CONNECTING]: 0,\n      [ConnectivityState.IDLE]: 0,\n      [ConnectivityState.READY]: 0,\n      [ConnectivityState.SHUTDOWN]: 0,\n      [ConnectivityState.TRANSIENT_FAILURE]: 0,\n    };\n    this.subchannels = [];\n  }\n\n  updateAddressList(\n    addressList: SubchannelAddress[],\n    lbConfig: LoadBalancingConfig\n  ): void {\n    this.resetSubchannelList();\n    trace(\n      'Connect to address list ' +\n        addressList.map((address) => subchannelAddressToString(address))\n    );\n    this.subchannels = addressList.map((address) =>\n      this.channelControlHelper.createSubchannel(address, {})\n    );\n    for (const subchannel of this.subchannels) {\n      subchannel.ref();\n      subchannel.addConnectivityStateListener(this.subchannelStateListener);\n      this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n      const subchannelState = subchannel.getConnectivityState();\n      this.subchannelStateCounts[subchannelState] += 1;\n      if (\n        subchannelState === ConnectivityState.IDLE ||\n        subchannelState === ConnectivityState.TRANSIENT_FAILURE\n      ) {\n        subchannel.startConnecting();\n      }\n    }\n    this.calculateAndUpdateState();\n  }\n\n  exitIdle(): void {\n    for (const subchannel of this.subchannels) {\n      subchannel.startConnecting();\n    }\n  }\n  resetBackoff(): void {\n    /* The pick first load balancer does not have a connection backoff, so this\n     * does nothing */\n  }\n  destroy(): void {\n    this.resetSubchannelList();\n  }\n  getTypeName(): string {\n    return TYPE_NAME;\n  }\n}\n\nexport function setup() {\n  registerLoadBalancerType(\n    TYPE_NAME,\n    RoundRobinLoadBalancer,\n    RoundRobinLoadBalancingConfig\n  );\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterStackFactory = exports.FilterStack = void 0;\n\nclass FilterStack {\n  constructor(filters) {\n    this.filters = filters;\n  }\n\n  sendMetadata(metadata) {\n    let result = metadata;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n\n    return result;\n  }\n\n  receiveMetadata(metadata) {\n    let result = metadata;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n\n    return result;\n  }\n\n  sendMessage(message) {\n    let result = message;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveMessage(message) {\n    let result = message;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveTrailers(status) {\n    let result = status;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n\n    return result;\n  }\n\n  refresh() {\n    for (const filter of this.filters) {\n      filter.refresh();\n    }\n  }\n\n  push(filters) {\n    this.filters.unshift(...filters);\n  }\n\n  getFilters() {\n    return this.filters;\n  }\n\n}\n\nexports.FilterStack = FilterStack;\n\nclass FilterStackFactory {\n  constructor(factories) {\n    this.factories = factories;\n  }\n\n  push(filterFactories) {\n    this.factories.unshift(...filterFactories);\n  }\n\n  createFilter(callStream) {\n    return new FilterStack(this.factories.map(factory => factory.createFilter(callStream)));\n  }\n\n}\n\nexports.FilterStackFactory = FilterStackFactory;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\filter-stack.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { Call, StatusObject, WriteObject } from './call-stream';\nimport { Filter, FilterFactory } from './filter';\nimport { Metadata } from './metadata';\n\nexport class FilterStack implements Filter {\n  constructor(private readonly filters: Filter[]) {}\n\n  sendMetadata(metadata: Promise<Metadata>) {\n    let result: Promise<Metadata> = metadata;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n\n    return result;\n  }\n\n  receiveMetadata(metadata: Metadata) {\n    let result: Metadata = metadata;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n\n    return result;\n  }\n\n  sendMessage(message: Promise<WriteObject>): Promise<WriteObject> {\n    let result: Promise<WriteObject> = message;\n\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveMessage(message: Promise<Buffer>): Promise<Buffer> {\n    let result: Promise<Buffer> = message;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n\n    return result;\n  }\n\n  receiveTrailers(status: StatusObject): StatusObject {\n    let result: StatusObject = status;\n\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n\n    return result;\n  }\n\n  refresh(): void {\n    for (const filter of this.filters) {\n      filter.refresh();\n    }\n  }\n\n  push(filters: Filter[]) {\n    this.filters.unshift(...filters);\n  }\n\n  getFilters(): Filter[] {\n    return this.filters;\n  }\n}\n\nexport class FilterStackFactory implements FilterFactory<FilterStack> {\n  constructor(private readonly factories: Array<FilterFactory<Filter>>) {}\n\n  push(filterFactories: FilterFactory<Filter>[]) {\n    this.factories.unshift(...filterFactories);\n  }\n\n  createFilter(callStream: Call): FilterStack {\n    return new FilterStack(\n      this.factories.map((factory) => factory.createFilter(callStream))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
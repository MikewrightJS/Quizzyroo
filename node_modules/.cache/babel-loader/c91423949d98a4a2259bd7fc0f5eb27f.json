{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.isLoadBalancerNameRegistered = exports.createLoadBalancer = exports.registerDefaultLoadBalancerType = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = void 0;\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */\n\nfunction createChildChannelControlHelper(parent, overrides) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n  return {\n    createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\n    updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\n    requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\n    addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\n    removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent)\n  };\n}\n\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\nconst registeredLoadBalancerTypes = {};\nlet defaultLoadBalancerType = null;\n\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType\n  };\n}\n\nexports.registerLoadBalancerType = registerLoadBalancerType;\n\nfunction registerDefaultLoadBalancerType(typeName) {\n  defaultLoadBalancerType = typeName;\n}\n\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\n\nfunction createLoadBalancer(config, channelControlHelper) {\n  const typeName = config.getLoadBalancerName();\n\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n  } else {\n    return null;\n  }\n}\n\nexports.createLoadBalancer = createLoadBalancer;\n\nfunction isLoadBalancerNameRegistered(typeName) {\n  return typeName in registeredLoadBalancerTypes;\n}\n\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\n\nfunction getFirstUsableConfig(configs) {\n  let fallbackTodefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  for (const config of configs) {\n    if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n      return config;\n    }\n  }\n\n  if (fallbackTodefault) {\n    if (defaultLoadBalancerType) {\n      return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\nexports.getFirstUsableConfig = getFirstUsableConfig; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction validateLoadBalancingConfig(obj) {\n  if (!(obj !== null && typeof obj === 'object')) {\n    throw new Error('Load balancing config must be an object');\n  }\n\n  const keys = Object.keys(obj);\n\n  if (keys.length !== 1) {\n    throw new Error('Provided load balancing config has multiple conflicting entries');\n  }\n\n  const typeName = keys[0];\n\n  if (typeName in registeredLoadBalancerTypes) {\n    return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\n\nexports.validateLoadBalancingConfig = validateLoadBalancingConfig;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\load-balancer.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelOptions } from './channel-options';\nimport { Subchannel } from './subchannel';\nimport { SubchannelAddress } from './subchannel-address';\nimport { ConnectivityState } from './connectivity-state';\nimport { Picker } from './picker';\nimport { ChannelRef, SubchannelRef } from './channelz';\n\n/**\n * A collection of functions associated with a channel that a load balancer\n * can call as necessary.\n */\nexport interface ChannelControlHelper {\n  /**\n   * Returns a subchannel connected to the specified address.\n   * @param subchannelAddress The address to connect to\n   * @param subchannelArgs Extra channel arguments specified by the load balancer\n   */\n  createSubchannel(\n    subchannelAddress: SubchannelAddress,\n    subchannelArgs: ChannelOptions\n  ): Subchannel;\n  /**\n   * Passes a new subchannel picker up to the channel. This is called if either\n   * the connectivity state changes or if a different picker is needed for any\n   * other reason.\n   * @param connectivityState New connectivity state\n   * @param picker New picker\n   */\n  updateState(connectivityState: ConnectivityState, picker: Picker): void;\n  /**\n   * Request new data from the resolver.\n   */\n  requestReresolution(): void;\n  addChannelzChild(child: ChannelRef | SubchannelRef): void;\n  removeChannelzChild(child: ChannelRef | SubchannelRef): void;\n}\n\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent \n * @param overrides \n */\nexport function createChildChannelControlHelper(parent: ChannelControlHelper, overrides: Partial<ChannelControlHelper>): ChannelControlHelper {\n  return {\n    createSubchannel: overrides.createSubchannel?.bind(overrides) ?? parent.createSubchannel.bind(parent),\n    updateState: overrides.updateState?.bind(overrides) ?? parent.updateState.bind(parent),\n    requestReresolution: overrides.requestReresolution?.bind(overrides) ?? parent.requestReresolution.bind(parent),\n    addChannelzChild: overrides.addChannelzChild?.bind(overrides) ?? parent.addChannelzChild.bind(parent),\n    removeChannelzChild: overrides.removeChannelzChild?.bind(overrides) ?? parent.removeChannelzChild.bind(parent)\n  };\n}\n\n/**\n * Tracks one or more connected subchannels and determines which subchannel\n * each request should use.\n */\nexport interface LoadBalancer {\n  /**\n   * Gives the load balancer a new list of addresses to start connecting to.\n   * The load balancer will start establishing connections with the new list,\n   * but will continue using any existing connections until the new connections\n   * are established\n   * @param addressList The new list of addresses to connect to\n   * @param lbConfig The load balancing config object from the service config,\n   *     if one was provided\n   */\n  updateAddressList(\n    addressList: SubchannelAddress[],\n    lbConfig: LoadBalancingConfig,\n    attributes: { [key: string]: unknown }\n  ): void;\n  /**\n   * If the load balancer is currently in the IDLE state, start connecting.\n   */\n  exitIdle(): void;\n  /**\n   * If the load balancer is currently in the CONNECTING or TRANSIENT_FAILURE\n   * state, reset the current connection backoff timeout to its base value and\n   * transition to CONNECTING if in TRANSIENT_FAILURE.\n   */\n  resetBackoff(): void;\n  /**\n   * The load balancer unrefs all of its subchannels and stops calling methods\n   * of its channel control helper.\n   */\n  destroy(): void;\n  /**\n   * Get the type name for this load balancer type. Must be constant across an\n   * entire load balancer implementation class and must match the name that the\n   * balancer implementation class was registered with.\n   */\n  getTypeName(): string;\n}\n\nexport interface LoadBalancerConstructor {\n  new (channelControlHelper: ChannelControlHelper): LoadBalancer;\n}\n\nexport interface LoadBalancingConfig {\n  getLoadBalancerName(): string;\n  toJsonObject(): object;\n}\n\nexport interface LoadBalancingConfigConstructor {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any): LoadBalancingConfig;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  createFromJson(obj: any): LoadBalancingConfig;\n}\n\nconst registeredLoadBalancerTypes: {\n  [name: string]: {\n    LoadBalancer: LoadBalancerConstructor;\n    LoadBalancingConfig: LoadBalancingConfigConstructor;\n  };\n} = {};\n\nlet defaultLoadBalancerType: string | null = null;\n\nexport function registerLoadBalancerType(\n  typeName: string,\n  loadBalancerType: LoadBalancerConstructor,\n  loadBalancingConfigType: LoadBalancingConfigConstructor\n) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType,\n  };\n}\n\nexport function registerDefaultLoadBalancerType(typeName: string) {\n  defaultLoadBalancerType = typeName;\n}\n\nexport function createLoadBalancer(\n  config: LoadBalancingConfig,\n  channelControlHelper: ChannelControlHelper\n): LoadBalancer | null {\n  const typeName = config.getLoadBalancerName();\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(\n      channelControlHelper\n    );\n  } else {\n    return null;\n  }\n}\n\nexport function isLoadBalancerNameRegistered(typeName: string): boolean {\n  return typeName in registeredLoadBalancerTypes;\n}\n\nexport function getFirstUsableConfig(\n  configs: LoadBalancingConfig[],\n  fallbackTodefault?: true\n): LoadBalancingConfig;\nexport function getFirstUsableConfig(\n  configs: LoadBalancingConfig[],\n  fallbackTodefault = false\n): LoadBalancingConfig | null {\n  for (const config of configs) {\n    if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n      return config;\n    }\n  }\n  if (fallbackTodefault) {\n    if (defaultLoadBalancerType) {\n      return new registeredLoadBalancerTypes[\n        defaultLoadBalancerType\n      ]!.LoadBalancingConfig();\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function validateLoadBalancingConfig(obj: any): LoadBalancingConfig {\n  if (!(obj !== null && typeof obj === 'object')) {\n    throw new Error('Load balancing config must be an object');\n  }\n  const keys = Object.keys(obj);\n  if (keys.length !== 1) {\n    throw new Error(\n      'Provided load balancing config has multiple conflicting entries'\n    );\n  }\n  const typeName = keys[0];\n  if (typeName in registeredLoadBalancerTypes) {\n    return registeredLoadBalancerTypes[\n      typeName\n    ].LoadBalancingConfig.createFromJson(obj[typeName]);\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
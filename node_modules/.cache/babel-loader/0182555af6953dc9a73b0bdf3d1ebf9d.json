{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\quiz\\\\src\\\\components\\\\Question.js\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Question(_ref) {\n  let {\n    question,\n    correct,\n    incorrect,\n    category,\n    handleQuestion,\n    id,\n    playerAnswer,\n    quizComplete\n  } = _ref;\n  let answers = incorrect.concat(correct);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: question\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: answers.map(answer => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          dangerouslySetInnerHTML: {\n            __html: answer\n          },\n          onClick: e => handleQuestion(e, answer, id),\n          className: // if player clicks and quiz is not complete grey\n          // when quiz completes answered questions turn red or green depending if right\n          // the correct answer if not selected turns green\n          quizComplete ? playerAnswer.answer === correct ? 'green answer' : answer === correct ? 'green answer' : 'red answer' : playerAnswer.answer === answer ? 'grey answer' : 'white answer'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this);\n}\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["C:/react/quiz/src/components/Question.js"],"names":["React","BrowserRouter","Router","Route","Switch","Question","question","correct","incorrect","category","handleQuestion","id","playerAnswer","quizComplete","answers","concat","__html","map","answer","e"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;;;AAGA,SAASC,QAAT,OAA4G;AAAA,MAA1F;AAACC,IAAAA,QAAD;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,SAApB;AAA+BC,IAAAA,QAA/B;AAAyCC,IAAAA,cAAzC;AAAyDC,IAAAA,EAAzD;AAA6DC,IAAAA,YAA7D;AAA2EC,IAAAA;AAA3E,GAA0F;AACxG,MAAIC,OAAO,GAAGN,SAAS,CAACO,MAAV,CAAiBR,OAAjB,CAAd;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACI;AAAA,gBAAKE;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEE;AAAK,MAAA,uBAAuB,EAAG;AAACO,QAAAA,MAAM,EAAEV;AAAT;AAA/B;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACCQ,OAAO,CAACG,GAAR,CAAYC,MAAM,IAAE;AACjB,4BAAO;AAAQ,UAAA,uBAAuB,EAAG;AAACF,YAAAA,MAAM,EAAEE;AAAT,WAAlC;AAAoD,UAAA,OAAO,EAAEC,CAAC,IAAIT,cAAc,CAACS,CAAD,EAAID,MAAJ,EAAYP,EAAZ,CAAhF;AACP,UAAA,SAAS,EAEL;AACA;AACA;AAEAE,UAAAA,YAAY,GACZD,YAAY,CAACM,MAAb,KAAwBX,OAAxB,GAAkC,cAAlC,GACAW,MAAM,KAAKX,OAAX,GAAqB,cAArB,GAAqC,YAFzB,GAGZK,YAAY,CAACM,MAAb,KAAwBA,MAAxB,GAAgC,aAAhC,GAAgD;AAV7C;AAAA;AAAA;AAAA;AAAA,gBAAP;AAcH,OAfA;AADD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;KA1BMb,Q;AA4BP,eAAeA,QAAf","sourcesContent":["import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n\r\nfunction Question({question, correct, incorrect, category, handleQuestion, id, playerAnswer, quizComplete}) {\r\n    let answers = incorrect.concat(correct);\r\n    return (\r\n      <div className=\"question\">\r\n          <h3>{category}</h3>\r\n        <div dangerouslySetInnerHTML ={{__html: question}}></div>\r\n        <div className=\"answers\">\r\n        {answers.map(answer=>{\r\n            return <button dangerouslySetInnerHTML ={{__html: answer}} onClick={e => handleQuestion(e, answer, id )} \r\n            className={\r\n\r\n                // if player clicks and quiz is not complete grey\r\n                // when quiz completes answered questions turn red or green depending if right\r\n                // the correct answer if not selected turns green\r\n\r\n                quizComplete ? \r\n                playerAnswer.answer === correct ? 'green answer' :\r\n                answer === correct ? 'green answer': 'red answer' :\r\n                playerAnswer.answer === answer? 'grey answer' : 'white answer'\r\n                }>\r\n                \r\n                </button>\r\n        })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Question;"]},"metadata":{},"sourceType":"module"}
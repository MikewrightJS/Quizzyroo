{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\n\nconst net_1 = require(\"net\");\n\nconst constants_1 = require(\"./constants\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst resolver_1 = require(\"./resolver\");\n\nconst uri_parser_1 = require(\"./uri-parser\");\n\nconst logging = require(\"./logging\");\n\nconst TRACER_NAME = 'ip_resolver';\n\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\n\nconst DEFAULT_PORT = 443;\n\nclass IpResolver {\n  constructor(target, listener, channelOptions) {\n    var _a;\n\n    this.target = target;\n    this.listener = listener;\n    this.addresses = [];\n    this.error = null;\n    trace('Resolver constructed for target ' + uri_parser_1.uriToString(target));\n    const addresses = [];\n\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new metadata_1.Metadata()\n      };\n      return;\n    }\n\n    const pathList = target.path.split(',');\n\n    for (const path of pathList) {\n      const hostPort = uri_parser_1.splitHostPort(path);\n\n      if (hostPort === null) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n\n      if (target.scheme === IPV4_SCHEME && !net_1.isIPv4(hostPort.host) || target.scheme === IPV6_SCHEME && !net_1.isIPv6(hostPort.host)) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n\n      addresses.push({\n        host: hostPort.host,\n        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n      });\n    }\n\n    this.addresses = addresses;\n    trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\n  }\n\n  updateResolution() {\n    process.nextTick(() => {\n      if (this.error) {\n        this.listener.onError(this.error);\n      } else {\n        this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});\n      }\n    });\n  }\n\n  destroy() {// This resolver owns no resources, so we do nothing here.\n  }\n\n  static getDefaultAuthority(target) {\n    return target.path.split(',')[0];\n  }\n\n}\n\nfunction setup() {\n  resolver_1.registerResolver(IPV4_SCHEME, IpResolver);\n  resolver_1.registerResolver(IPV6_SCHEME, IpResolver);\n}\n\nexports.setup = setup;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\resolver-ip.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIPv4, isIPv6 } from 'net';\nimport { StatusObject } from './call-stream';\nimport { ChannelOptions } from './channel-options';\nimport { LogVerbosity, Status } from './constants';\nimport { Metadata } from './metadata';\nimport { registerResolver, Resolver, ResolverListener } from './resolver';\nimport { SubchannelAddress } from './subchannel-address';\nimport { GrpcUri, splitHostPort, uriToString } from './uri-parser';\nimport * as logging from './logging';\n\nconst TRACER_NAME = 'ip_resolver';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\n\nclass IpResolver implements Resolver {\n  private addresses: SubchannelAddress[] = [];\n  private error: StatusObject | null = null;\n  constructor(\n    private target: GrpcUri,\n    private listener: ResolverListener,\n    channelOptions: ChannelOptions\n  ) {\n    trace('Resolver constructed for target ' + uriToString(target));\n    const addresses: SubchannelAddress[] = [];\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new Metadata(),\n      };\n      return;\n    }\n    const pathList = target.path.split(',');\n    for (const path of pathList) {\n      const hostPort = splitHostPort(path);\n      if (hostPort === null) {\n        this.error = {\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new Metadata(),\n        };\n        return;\n      }\n      if (\n        (target.scheme === IPV4_SCHEME && !isIPv4(hostPort.host)) ||\n        (target.scheme === IPV6_SCHEME && !isIPv6(hostPort.host))\n      ) {\n        this.error = {\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new Metadata(),\n        };\n        return;\n      }\n      addresses.push({\n        host: hostPort.host,\n        port: hostPort.port ?? DEFAULT_PORT,\n      });\n    }\n    this.addresses = addresses;\n    trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\n  }\n  updateResolution(): void {\n    process.nextTick(() => {\n      if (this.error) {\n        this.listener.onError(this.error);\n      } else {\n        this.listener.onSuccessfulResolution(\n          this.addresses,\n          null,\n          null,\n          null,\n          {}\n        );\n      }\n    });\n  }\n  destroy(): void {\n    // This resolver owns no resources, so we do nothing here.\n  }\n\n  static getDefaultAuthority(target: GrpcUri): string {\n    return target.path.split(',')[0];\n  }\n}\n\nexport function setup() {\n  registerResolver(IPV4_SCHEME, IpResolver);\n  registerResolver(IPV6_SCHEME, IpResolver);\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamArrayParser = void 0;\n\nconst abort_controller_1 = require(\"abort-controller\");\n\nconst stream_1 = require(\"stream\");\n\nconst fallbackRest_1 = require(\"./fallbackRest\");\n\nconst featureDetection_1 = require(\"./featureDetection\");\n\nclass StreamArrayParser extends stream_1.Transform {\n  /**\n   * StreamArrayParser processes array of valid JSON objects in random chunks\n   * through readable stream, and produces a stream of plain Javascript objects\n   * where it converted from the corresponding protobuf message instance.\n   *\n   * The default JSON parser decodes the input stream under the\n   * following rules:\n   *  1. The stream represents a valid JSON array (must start with a \"[\" and\n   * close with the corresponding \"]\"). Each element of this array is assumed to\n   * be either an array or an object, and will be decoded as a JS object and\n   *    delivered.\n   *  2. All JSON elements in the buffer will be decoded and delivered in a\n   * stream.\n   *\n   * @private\n   * @constructor\n   * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\n   * @param {Object} options - the options pass to Transform Stream. See more\n   * details\n   * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\n   */\n  constructor(rpc, options) {\n    super(Object.assign({}, options, {\n      readableObjectMode: true\n    }));\n    this._done = false;\n    this._prevBlock = Buffer.from('');\n    this._isInString = false;\n    this._isSkipped = false;\n    this._level = 0;\n    this.rpc = rpc;\n    this.cancelController = featureDetection_1.hasAbortController() ? // eslint-disable-next-line no-undef\n    new AbortController() : new abort_controller_1.AbortController();\n    this.cancelSignal = this.cancelController.signal;\n    this.cancelRequested = false;\n  }\n\n  _transform(chunk, _, callback) {\n    let objectStart = 0;\n    let curIndex = 0;\n\n    if (this._level === 0 && curIndex === 0) {\n      if (String.fromCharCode(chunk[0]) !== '[') {\n        this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\n      }\n\n      curIndex++;\n      this._level++;\n    }\n\n    while (curIndex < chunk.length) {\n      const curValue = String.fromCharCode(chunk[curIndex]);\n\n      if (!this._isSkipped) {\n        switch (curValue) {\n          case '{':\n            // Check if it's in string, we ignore the curly brace in string.\n            // Otherwise the object level++.\n            if (!this._isInString) {\n              this._level++;\n            }\n\n            if (!this._isInString && this._level === 2) {\n              objectStart = curIndex;\n            }\n\n            break;\n\n          case '\"':\n            // Flip the string status\n            this._isInString = !this._isInString;\n            break;\n\n          case '}':\n            // check if it's in string\n            // if true, do nothing\n            // if false and level = 0, push data\n            if (!this._isInString) {\n              this._level--;\n            }\n\n            if (!this._isInString && this._level === 1) {\n              // find a object\n              const objBuff = Buffer.concat([this._prevBlock, chunk.slice(objectStart, curIndex + 1)]);\n\n              try {\n                // HTTP reponse.ok is true.\n                const msgObj = fallbackRest_1.decodeResponse(this.rpc, true, objBuff);\n                this.push(msgObj);\n              } catch (err) {\n                this.emit('error', err);\n              }\n\n              objectStart = curIndex + 1;\n              this._prevBlock = Buffer.from('');\n            }\n\n            break;\n\n          case ']':\n            if (!this._isInString && this._level === 1) {\n              this._done = true;\n              this.push(null);\n            }\n\n            break;\n\n          case '\\\\':\n            // Escaping escape character.\n            this._isSkipped = true;\n            break;\n\n          default:\n            break;\n        }\n      } else {\n        this._isSkipped = false;\n      }\n\n      curIndex++;\n    }\n\n    if (this._level > 1) {\n      this._prevBlock = Buffer.concat([this._prevBlock, chunk.slice(objectStart, curIndex)]);\n    }\n\n    callback();\n  }\n\n  _flush(callback) {\n    callback();\n  }\n\n  cancel() {\n    this._done = true;\n    this.cancelRequested = true;\n    this.cancelController.abort();\n    this.end();\n  }\n\n}\n\nexports.StreamArrayParser = StreamArrayParser;","map":{"version":3,"sources":["../../src/streamArrayParser.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StreamArrayParser = void 0;\nconst abort_controller_1 = require(\"abort-controller\");\nconst stream_1 = require(\"stream\");\nconst fallbackRest_1 = require(\"./fallbackRest\");\nconst featureDetection_1 = require(\"./featureDetection\");\nclass StreamArrayParser extends stream_1.Transform {\n    /**\n     * StreamArrayParser processes array of valid JSON objects in random chunks\n     * through readable stream, and produces a stream of plain Javascript objects\n     * where it converted from the corresponding protobuf message instance.\n     *\n     * The default JSON parser decodes the input stream under the\n     * following rules:\n     *  1. The stream represents a valid JSON array (must start with a \"[\" and\n     * close with the corresponding \"]\"). Each element of this array is assumed to\n     * be either an array or an object, and will be decoded as a JS object and\n     *    delivered.\n     *  2. All JSON elements in the buffer will be decoded and delivered in a\n     * stream.\n     *\n     * @private\n     * @constructor\n     * @param {protobuf.Method} rpc - the protobuf method produce array of JSON.\n     * @param {Object} options - the options pass to Transform Stream. See more\n     * details\n     * https://nodejs.org/api/stream.html#stream_new_stream_transform_options.\n     */\n    constructor(rpc, options) {\n        super(Object.assign({}, options, { readableObjectMode: true }));\n        this._done = false;\n        this._prevBlock = Buffer.from('');\n        this._isInString = false;\n        this._isSkipped = false;\n        this._level = 0;\n        this.rpc = rpc;\n        this.cancelController = featureDetection_1.hasAbortController()\n            ? // eslint-disable-next-line no-undef\n                new AbortController()\n            : new abort_controller_1.AbortController();\n        this.cancelSignal = this.cancelController.signal;\n        this.cancelRequested = false;\n    }\n    _transform(chunk, _, callback) {\n        let objectStart = 0;\n        let curIndex = 0;\n        if (this._level === 0 && curIndex === 0) {\n            if (String.fromCharCode(chunk[0]) !== '[') {\n                this.emit('error', new Error(`Internal Error: API service stream data must start with a '[' and close with the corresponding ']', but it start with ${String.fromCharCode(chunk[0])}`));\n            }\n            curIndex++;\n            this._level++;\n        }\n        while (curIndex < chunk.length) {\n            const curValue = String.fromCharCode(chunk[curIndex]);\n            if (!this._isSkipped) {\n                switch (curValue) {\n                    case '{':\n                        // Check if it's in string, we ignore the curly brace in string.\n                        // Otherwise the object level++.\n                        if (!this._isInString) {\n                            this._level++;\n                        }\n                        if (!this._isInString && this._level === 2) {\n                            objectStart = curIndex;\n                        }\n                        break;\n                    case '\"':\n                        // Flip the string status\n                        this._isInString = !this._isInString;\n                        break;\n                    case '}':\n                        // check if it's in string\n                        // if true, do nothing\n                        // if false and level = 0, push data\n                        if (!this._isInString) {\n                            this._level--;\n                        }\n                        if (!this._isInString && this._level === 1) {\n                            // find a object\n                            const objBuff = Buffer.concat([\n                                this._prevBlock,\n                                chunk.slice(objectStart, curIndex + 1),\n                            ]);\n                            try {\n                                // HTTP reponse.ok is true.\n                                const msgObj = fallbackRest_1.decodeResponse(this.rpc, true, objBuff);\n                                this.push(msgObj);\n                            }\n                            catch (err) {\n                                this.emit('error', err);\n                            }\n                            objectStart = curIndex + 1;\n                            this._prevBlock = Buffer.from('');\n                        }\n                        break;\n                    case ']':\n                        if (!this._isInString && this._level === 1) {\n                            this._done = true;\n                            this.push(null);\n                        }\n                        break;\n                    case '\\\\':\n                        // Escaping escape character.\n                        this._isSkipped = true;\n                        break;\n                    default:\n                        break;\n                }\n            }\n            else {\n                this._isSkipped = false;\n            }\n            curIndex++;\n        }\n        if (this._level > 1) {\n            this._prevBlock = Buffer.concat([\n                this._prevBlock,\n                chunk.slice(objectStart, curIndex),\n            ]);\n        }\n        callback();\n    }\n    _flush(callback) {\n        callback();\n    }\n    cancel() {\n        this._done = true;\n        this.cancelRequested = true;\n        this.cancelController.abort();\n        this.end();\n    }\n}\nexports.StreamArrayParser = StreamArrayParser;\n"]},"metadata":{},"sourceType":"script"}
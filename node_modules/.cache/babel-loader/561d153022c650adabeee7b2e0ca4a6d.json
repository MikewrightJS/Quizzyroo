{"ast":null,"code":"\"use strict\";\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Http2CallStream = exports.InterceptingListenerImpl = exports.isInterceptingListener = void 0;\n\nconst http2 = require(\"http2\");\n\nconst os = require(\"os\");\n\nconst constants_1 = require(\"./constants\");\n\nconst metadata_1 = require(\"./metadata\");\n\nconst stream_decoder_1 = require(\"./stream-decoder\");\n\nconst logging = require(\"./logging\");\n\nconst constants_2 = require(\"./constants\");\n\nconst TRACER_NAME = 'call_stream';\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n  NGHTTP2_CANCEL\n} = http2.constants;\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */\n\nfunction getSystemErrorName(errno) {\n  for (const [name, num] of Object.entries(os.constants.errno)) {\n    if (num === errno) {\n      return name;\n    }\n  }\n\n  return 'Unknown system error ' + errno;\n}\n\nfunction getMinDeadline(deadlineList) {\n  let minValue = Infinity;\n\n  for (const deadline of deadlineList) {\n    const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\n\n    if (deadlineMsecs < minValue) {\n      minValue = deadlineMsecs;\n    }\n  }\n\n  return minValue;\n}\n\nfunction isInterceptingListener(listener) {\n  return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\n\nexports.isInterceptingListener = isInterceptingListener;\n\nclass InterceptingListenerImpl {\n  constructor(listener, nextListener) {\n    this.listener = listener;\n    this.nextListener = nextListener;\n    this.processingMetadata = false;\n    this.hasPendingMessage = false;\n    this.processingMessage = false;\n    this.pendingStatus = null;\n  }\n\n  processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n\n  processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n\n  onReceiveMetadata(metadata) {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, metadata => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  onReceiveMessage(message) {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, msg => {\n      this.processingMessage = false;\n\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n\n  onReceiveStatus(status) {\n    this.listener.onReceiveStatus(status, processedStatus => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n\n}\n\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\n\nclass Http2CallStream {\n  constructor(methodName, channel, options, filterStackFactory, channelCallCredentials, callNumber) {\n    this.methodName = methodName;\n    this.channel = channel;\n    this.options = options;\n    this.channelCallCredentials = channelCallCredentials;\n    this.callNumber = callNumber;\n    this.http2Stream = null;\n    this.pendingRead = false;\n    this.isWriteFilterPending = false;\n    this.pendingWrite = null;\n    this.pendingWriteCallback = null;\n    this.writesClosed = false;\n    this.decoder = new stream_decoder_1.StreamDecoder();\n    this.isReadFilterPending = false;\n    this.canPush = false;\n    /**\n     * Indicates that an 'end' event has come from the http2 stream, so there\n     * will be no more data events.\n     */\n\n    this.readsClosed = false;\n    this.statusOutput = false;\n    this.unpushedReadMessages = [];\n    this.unfilteredReadMessages = []; // Status code mapped from :status. To be used if grpc-status is not received\n\n    this.mappedStatusCode = constants_1.Status.UNKNOWN; // This is populated (non-null) if and only if the call has ended\n\n    this.finalStatus = null;\n    this.subchannel = null;\n    this.listener = null;\n    this.internalError = null;\n    this.configDeadline = Infinity;\n    this.statusWatchers = [];\n    this.streamEndWatchers = [];\n    this.callStatsTracker = null;\n    this.filterStack = filterStackFactory.createFilter(this);\n    this.credentials = channelCallCredentials;\n\n    this.disconnectListener = () => {\n      this.endCall({\n        code: constants_1.Status.UNAVAILABLE,\n        details: 'Connection dropped',\n        metadata: new metadata_1.Metadata()\n      });\n    };\n\n    if (this.options.parentCall && this.options.flags & constants_1.Propagate.CANCELLATION) {\n      this.options.parentCall.on('cancelled', () => {\n        this.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled by parent call');\n      });\n    }\n  }\n\n  outputStatus() {\n    /* Precondition: this.finalStatus !== null */\n    if (this.listener && !this.statusOutput) {\n      this.statusOutput = true;\n      const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);\n      this.statusWatchers.forEach(watcher => watcher(filteredStatus));\n      /* We delay the actual action of bubbling up the status to insulate the\n       * cleanup code in this class from any errors that may be thrown in the\n       * upper layers as a result of bubbling up the status. In particular,\n       * if the status is not OK, the \"error\" event may be emitted\n       * synchronously at the top level, which will result in a thrown error if\n       * the user does not handle that event. */\n\n      process.nextTick(() => {\n        var _a;\n\n        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\n      });\n\n      if (this.subchannel) {\n        this.subchannel.callUnref();\n        this.subchannel.removeDisconnectListener(this.disconnectListener);\n      }\n    }\n  }\n\n  trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  /**\n   * On first call, emits a 'status' event with the given StatusObject.\n   * Subsequent calls are no-ops.\n   * @param status The status of the call.\n   */\n\n\n  endCall(status) {\n    /* If the status is OK and a new status comes in (e.g. from a\n     * deserialization failure), that new status takes priority */\n    if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n      this.trace('ended with status: code=' + status.code + ' details=\"' + status.details + '\"');\n      this.finalStatus = status;\n      this.maybeOutputStatus();\n    }\n\n    this.destroyHttp2Stream();\n  }\n\n  maybeOutputStatus() {\n    if (this.finalStatus !== null) {\n      /* The combination check of readsClosed and that the two message buffer\n       * arrays are empty checks that there all incoming data has been fully\n       * processed */\n      if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {\n        this.outputStatus();\n      }\n    }\n  }\n\n  push(message) {\n    this.trace('pushing to reader message of length ' + (message instanceof Buffer ? message.length : null));\n    this.canPush = false;\n    process.nextTick(() => {\n      var _a;\n      /* If we have already output the status any later messages should be\n       * ignored, and can cause out-of-order operation errors higher up in the\n       * stack. Checking as late as possible here to avoid any race conditions.\n       */\n\n\n      if (this.statusOutput) {\n        return;\n      }\n\n      (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMessage(message);\n      this.maybeOutputStatus();\n    });\n  }\n\n  handleFilterError(error) {\n    this.cancelWithStatus(constants_1.Status.INTERNAL, error.message);\n  }\n\n  handleFilteredRead(message) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.isReadFilterPending = false;\n\n    if (this.canPush) {\n      this.http2Stream.pause();\n      this.push(message);\n    } else {\n      this.trace('unpushedReadMessages.push message of length ' + message.length);\n      this.unpushedReadMessages.push(message);\n    }\n\n    if (this.unfilteredReadMessages.length > 0) {\n      /* nextMessage is guaranteed not to be undefined because\n         unfilteredReadMessages is non-empty */\n      const nextMessage = this.unfilteredReadMessages.shift();\n      this.filterReceivedMessage(nextMessage);\n    }\n  }\n\n  filterReceivedMessage(framedMessage) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.trace('filterReceivedMessage of length ' + framedMessage.length);\n    this.isReadFilterPending = true;\n    this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));\n  }\n\n  tryPush(messageBytes) {\n    if (this.isReadFilterPending) {\n      this.trace('unfilteredReadMessages.push message of length ' + (messageBytes && messageBytes.length));\n      this.unfilteredReadMessages.push(messageBytes);\n    } else {\n      this.filterReceivedMessage(messageBytes);\n    }\n  }\n\n  handleTrailers(headers) {\n    this.streamEndWatchers.forEach(watcher => watcher(true));\n    let headersString = '';\n\n    for (const header of Object.keys(headers)) {\n      headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n    }\n\n    this.trace('Received server trailers:\\n' + headersString);\n    let metadata;\n\n    try {\n      metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n    } catch (e) {\n      metadata = new metadata_1.Metadata();\n    }\n\n    const metadataMap = metadata.getMap();\n    let code = this.mappedStatusCode;\n\n    if (code === constants_1.Status.UNKNOWN && typeof metadataMap['grpc-status'] === 'string') {\n      const receivedStatus = Number(metadataMap['grpc-status']);\n\n      if (receivedStatus in constants_1.Status) {\n        code = receivedStatus;\n        this.trace('received status code ' + receivedStatus + ' from server');\n      }\n\n      metadata.remove('grpc-status');\n    }\n\n    let details = '';\n\n    if (typeof metadataMap['grpc-message'] === 'string') {\n      details = decodeURI(metadataMap['grpc-message']);\n      metadata.remove('grpc-message');\n      this.trace('received status details string \"' + details + '\" from server');\n    }\n\n    const status = {\n      code,\n      details,\n      metadata\n    }; // This is a no-op if the call was already ended when handling headers.\n\n    this.endCall(status);\n  }\n\n  writeMessageToStream(message, callback) {\n    var _a;\n\n    (_a = this.callStatsTracker) === null || _a === void 0 ? void 0 : _a.addMessageSent();\n    this.http2Stream.write(message, callback);\n  }\n\n  attachHttp2Stream(stream, subchannel, extraFilters, callStatsTracker) {\n    this.filterStack.push(extraFilters);\n\n    if (this.finalStatus !== null) {\n      stream.close(NGHTTP2_CANCEL);\n    } else {\n      this.trace('attachHttp2Stream from subchannel ' + subchannel.getAddress());\n      this.http2Stream = stream;\n      this.subchannel = subchannel;\n      this.callStatsTracker = callStatsTracker;\n      subchannel.addDisconnectListener(this.disconnectListener);\n      subchannel.callRef();\n      stream.on('response', (headers, flags) => {\n        var _a;\n\n        let headersString = '';\n\n        for (const header of Object.keys(headers)) {\n          headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n\n        this.trace('Received server headers:\\n' + headersString);\n\n        switch (headers[':status']) {\n          // TODO(murgatroid99): handle 100 and 101\n          case 400:\n            this.mappedStatusCode = constants_1.Status.INTERNAL;\n            break;\n\n          case 401:\n            this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n            break;\n\n          case 403:\n            this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n            break;\n\n          case 404:\n            this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n            break;\n\n          case 429:\n          case 502:\n          case 503:\n          case 504:\n            this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\n            break;\n\n          default:\n            this.mappedStatusCode = constants_1.Status.UNKNOWN;\n        }\n\n        if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n          this.handleTrailers(headers);\n        } else {\n          let metadata;\n\n          try {\n            metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n          } catch (error) {\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n            return;\n          }\n\n          try {\n            const finalMetadata = this.filterStack.receiveMetadata(metadata);\n            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMetadata(finalMetadata);\n          } catch (error) {\n            this.endCall({\n              code: constants_1.Status.UNKNOWN,\n              details: error.message,\n              metadata: new metadata_1.Metadata()\n            });\n          }\n        }\n      });\n      stream.on('trailers', this.handleTrailers.bind(this));\n      stream.on('data', data => {\n        this.trace('receive HTTP/2 data frame of length ' + data.length);\n        const messages = this.decoder.write(data);\n\n        for (const message of messages) {\n          this.trace('parsed message of length ' + message.length);\n          this.callStatsTracker.addMessageReceived();\n          this.tryPush(message);\n        }\n      });\n      stream.on('end', () => {\n        this.readsClosed = true;\n        this.maybeOutputStatus();\n      });\n      stream.on('close', () => {\n        /* Use process.next tick to ensure that this code happens after any\n         * \"error\" event that may be emitted at about the same time, so that\n         * we can bubble up the error message from that event. */\n        process.nextTick(() => {\n          var _a;\n\n          this.trace('HTTP/2 stream closed with code ' + stream.rstCode);\n          /* If we have a final status with an OK status code, that means that\n           * we have received all of the messages and we have processed the\n           * trailers and the call completed successfully, so it doesn't matter\n           * how the stream ends after that */\n\n          if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n            return;\n          }\n\n          let code;\n          let details = '';\n\n          switch (stream.rstCode) {\n            case http2.constants.NGHTTP2_NO_ERROR:\n              /* If we get a NO_ERROR code and we already have a status, the\n               * stream completed properly and we just haven't fully processed\n               * it yet */\n              if (this.finalStatus !== null) {\n                return;\n              }\n\n              code = constants_1.Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n              break;\n\n            case http2.constants.NGHTTP2_REFUSED_STREAM:\n              code = constants_1.Status.UNAVAILABLE;\n              details = 'Stream refused by server';\n              break;\n\n            case http2.constants.NGHTTP2_CANCEL:\n              code = constants_1.Status.CANCELLED;\n              details = 'Call cancelled';\n              break;\n\n            case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n              code = constants_1.Status.RESOURCE_EXHAUSTED;\n              details = 'Bandwidth exhausted or memory limit exceeded';\n              break;\n\n            case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n              code = constants_1.Status.PERMISSION_DENIED;\n              details = 'Protocol not secure enough';\n              break;\n\n            case http2.constants.NGHTTP2_INTERNAL_ERROR:\n              code = constants_1.Status.INTERNAL;\n\n              if (this.internalError === null) {\n                /* This error code was previously handled in the default case, and\n                 * there are several instances of it online, so I wanted to\n                 * preserve the original error message so that people find existing\n                 * information in searches, but also include the more recognizable\n                 * \"Internal server error\" message. */\n                details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;\n              } else {\n                if (this.internalError.code === 'ECONNRESET' || this.internalError.code === 'ETIMEDOUT') {\n                  code = constants_1.Status.UNAVAILABLE;\n                  details = this.internalError.message;\n                } else {\n                  /* The \"Received RST_STREAM with code ...\" error is preserved\n                   * here for continuity with errors reported online, but the\n                   * error message at the end will probably be more relevant in\n                   * most cases. */\n                  details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                }\n              }\n\n              break;\n\n            default:\n              code = constants_1.Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n          } // This is a no-op if trailers were received at all.\n          // This is OK, because status codes emitted here correspond to more\n          // catastrophic issues that prevent us from receiving trailers in the\n          // first place.\n\n\n          this.endCall({\n            code,\n            details,\n            metadata: new metadata_1.Metadata()\n          });\n        });\n      });\n      stream.on('error', err => {\n        /* We need an error handler here to stop \"Uncaught Error\" exceptions\n         * from bubbling up. However, errors here should all correspond to\n         * \"close\" events, where we will handle the error more granularly */\n\n        /* Specifically looking for stream errors that were *not* constructed\n         * from a RST_STREAM response here:\n         * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n         */\n        if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\n          this.trace('Node error event: message=' + err.message + ' code=' + err.code + ' errno=' + getSystemErrorName(err.errno) + ' syscall=' + err.syscall);\n          this.internalError = err;\n        }\n\n        this.streamEndWatchers.forEach(watcher => watcher(false));\n      });\n\n      if (!this.pendingRead) {\n        stream.pause();\n      }\n\n      if (this.pendingWrite) {\n        if (!this.pendingWriteCallback) {\n          throw new Error('Invalid state in write handling code');\n        }\n\n        this.trace('sending data chunk of length ' + this.pendingWrite.length + ' (deferred)');\n\n        try {\n          this.writeMessageToStream(this.pendingWrite, this.pendingWriteCallback);\n        } catch (error) {\n          this.endCall({\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new metadata_1.Metadata()\n          });\n        }\n      }\n\n      this.maybeCloseWrites();\n    }\n  }\n\n  start(metadata, listener) {\n    this.trace('Sending metadata');\n    this.listener = listener;\n\n    this.channel._startCallStream(this, metadata);\n\n    this.maybeOutputStatus();\n  }\n\n  destroyHttp2Stream() {\n    var _a; // The http2 stream could already have been destroyed if cancelWithStatus\n    // is called in response to an internal http2 error.\n\n\n    if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n      /* If the call has ended with an OK status, communicate that when closing\n       * the stream, partly to avoid a situation in which we detect an error\n       * RST_STREAM as a result after we have the status */\n      let code;\n\n      if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n        code = http2.constants.NGHTTP2_NO_ERROR;\n      } else {\n        code = http2.constants.NGHTTP2_CANCEL;\n      }\n\n      this.trace('close http2 stream with code ' + code);\n      this.http2Stream.close(code);\n    }\n  }\n\n  cancelWithStatus(status, details) {\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    this.endCall({\n      code: status,\n      details,\n      metadata: new metadata_1.Metadata()\n    });\n  }\n\n  getDeadline() {\n    const deadlineList = [this.options.deadline];\n\n    if (this.options.parentCall && this.options.flags & constants_1.Propagate.DEADLINE) {\n      deadlineList.push(this.options.parentCall.getDeadline());\n    }\n\n    if (this.configDeadline) {\n      deadlineList.push(this.configDeadline);\n    }\n\n    return getMinDeadline(deadlineList);\n  }\n\n  getCredentials() {\n    return this.credentials;\n  }\n\n  setCredentials(credentials) {\n    this.credentials = this.channelCallCredentials.compose(credentials);\n  }\n\n  getStatus() {\n    return this.finalStatus;\n  }\n\n  getPeer() {\n    var _a, _b;\n\n    return (_b = (_a = this.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n  }\n\n  getMethod() {\n    return this.methodName;\n  }\n\n  getHost() {\n    return this.options.host;\n  }\n\n  setConfigDeadline(configDeadline) {\n    this.configDeadline = configDeadline;\n  }\n\n  addStatusWatcher(watcher) {\n    this.statusWatchers.push(watcher);\n  }\n\n  addStreamEndWatcher(watcher) {\n    this.streamEndWatchers.push(watcher);\n  }\n\n  addFilters(extraFilters) {\n    this.filterStack.push(extraFilters);\n  }\n\n  startRead() {\n    /* If the stream has ended with an error, we should not emit any more\n     * messages and we should communicate that the stream has ended */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n      return;\n    }\n\n    this.canPush = true;\n\n    if (this.http2Stream === null) {\n      this.pendingRead = true;\n    } else {\n      if (this.unpushedReadMessages.length > 0) {\n        const nextMessage = this.unpushedReadMessages.shift();\n        this.push(nextMessage);\n        return;\n      }\n      /* Only resume reading from the http2Stream if we don't have any pending\n       * messages to emit */\n\n\n      this.http2Stream.resume();\n    }\n  }\n\n  maybeCloseWrites() {\n    if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {\n      this.trace('calling end() on HTTP/2 stream');\n      this.http2Stream.end();\n    }\n  }\n\n  sendMessageWithContext(context, message) {\n    var _a;\n\n    this.trace('write() called with message of length ' + message.length);\n    const writeObj = {\n      message,\n      flags: context.flags\n    };\n    const cb = (_a = context.callback) !== null && _a !== void 0 ? _a : () => {};\n    this.isWriteFilterPending = true;\n    this.filterStack.sendMessage(Promise.resolve(writeObj)).then(message => {\n      this.isWriteFilterPending = false;\n\n      if (this.http2Stream === null) {\n        this.trace('deferring writing data chunk of length ' + message.message.length);\n        this.pendingWrite = message.message;\n        this.pendingWriteCallback = cb;\n      } else {\n        this.trace('sending data chunk of length ' + message.message.length);\n\n        try {\n          this.writeMessageToStream(message.message, cb);\n        } catch (error) {\n          this.endCall({\n            code: constants_1.Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new metadata_1.Metadata()\n          });\n        }\n\n        this.maybeCloseWrites();\n      }\n    }, this.handleFilterError.bind(this));\n  }\n\n  halfClose() {\n    this.trace('end() called');\n    this.writesClosed = true;\n    this.maybeCloseWrites();\n  }\n\n}\n\nexports.Http2CallStream = Http2CallStream;","map":{"version":3,"sources":["C:\\react\\quiz\\node_modules\\@grpc\\grpc-js\\src\\call-stream.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport * as http2 from 'http2';\nimport * as os from 'os';\n\nimport { CallCredentials } from './call-credentials';\nimport { Propagate, Status } from './constants';\nimport { Filter, FilterFactory } from './filter';\nimport { FilterStackFactory, FilterStack } from './filter-stack';\nimport { Metadata } from './metadata';\nimport { StreamDecoder } from './stream-decoder';\nimport { ChannelImplementation } from './channel';\nimport { SubchannelCallStatsTracker, Subchannel } from './subchannel';\nimport * as logging from './logging';\nimport { LogVerbosity } from './constants';\nimport { ServerSurfaceCall } from './server-call';\n\nconst TRACER_NAME = 'call_stream';\n\nconst {\n  HTTP2_HEADER_STATUS,\n  HTTP2_HEADER_CONTENT_TYPE,\n  NGHTTP2_CANCEL,\n} = http2.constants;\n\n/**\n * https://nodejs.org/api/errors.html#errors_class_systemerror\n */\ninterface SystemError extends Error {\n  address?: string;\n  code: string;\n  dest?: string;\n  errno: number;\n  info?: object;\n  message: string;\n  path?: string;\n  port?: number;\n  syscall: string;\n}\n\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */\nfunction getSystemErrorName(errno: number): string {\n  for (const [name, num] of Object.entries(os.constants.errno)) {\n    if (num === errno) {\n      return name;\n    }\n  }\n  return 'Unknown system error ' + errno;\n}\n\nexport type Deadline = Date | number;\n\nfunction getMinDeadline(deadlineList: Deadline[]): Deadline {\n  let minValue = Infinity;\n  for (const deadline of deadlineList) {\n    const deadlineMsecs =\n      deadline instanceof Date ? deadline.getTime() : deadline;\n    if (deadlineMsecs < minValue) {\n      minValue = deadlineMsecs;\n    }\n  }\n  return minValue;\n}\n\nexport interface CallStreamOptions {\n  deadline: Deadline;\n  flags: number;\n  host: string;\n  parentCall: ServerSurfaceCall | null;\n}\n\nexport type PartialCallStreamOptions = Partial<CallStreamOptions>;\n\nexport interface StatusObject {\n  code: Status;\n  details: string;\n  metadata: Metadata;\n}\n\nexport const enum WriteFlags {\n  BufferHint = 1,\n  NoCompress = 2,\n  WriteThrough = 4,\n}\n\nexport interface WriteObject {\n  message: Buffer;\n  flags?: number;\n}\n\nexport interface MetadataListener {\n  (metadata: Metadata, next: (metadata: Metadata) => void): void;\n}\n\nexport interface MessageListener {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (message: any, next: (message: any) => void): void;\n}\n\nexport interface StatusListener {\n  (status: StatusObject, next: (status: StatusObject) => void): void;\n}\n\nexport interface FullListener {\n  onReceiveMetadata: MetadataListener;\n  onReceiveMessage: MessageListener;\n  onReceiveStatus: StatusListener;\n}\n\nexport type Listener = Partial<FullListener>;\n\n/**\n * An object with methods for handling the responses to a call.\n */\nexport interface InterceptingListener {\n  onReceiveMetadata(metadata: Metadata): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message: any): void;\n  onReceiveStatus(status: StatusObject): void;\n}\n\nexport function isInterceptingListener(\n  listener: Listener | InterceptingListener\n): listener is InterceptingListener {\n  return (\n    listener.onReceiveMetadata !== undefined &&\n    listener.onReceiveMetadata.length === 1\n  );\n}\n\nexport class InterceptingListenerImpl implements InterceptingListener {\n  private processingMetadata = false;\n  private hasPendingMessage = false;\n  private pendingMessage: any;\n  private processingMessage = false;\n  private pendingStatus: StatusObject | null = null;\n  constructor(\n    private listener: FullListener,\n    private nextListener: InterceptingListener\n  ) {}\n\n  private processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n\n  private processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n\n  onReceiveMetadata(metadata: Metadata): void {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, (metadata) => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message: any): void {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, (msg) => {\n      this.processingMessage = false;\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n  onReceiveStatus(status: StatusObject): void {\n    this.listener.onReceiveStatus(status, (processedStatus) => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n}\n\nexport interface WriteCallback {\n  (error?: Error | null): void;\n}\n\nexport interface MessageContext {\n  callback?: WriteCallback;\n  flags?: number;\n}\n\nexport interface Call {\n  cancelWithStatus(status: Status, details: string): void;\n  getPeer(): string;\n  start(metadata: Metadata, listener: InterceptingListener): void;\n  sendMessageWithContext(context: MessageContext, message: Buffer): void;\n  startRead(): void;\n  halfClose(): void;\n\n  getDeadline(): Deadline;\n  getCredentials(): CallCredentials;\n  setCredentials(credentials: CallCredentials): void;\n  getMethod(): string;\n  getHost(): string;\n}\n\nexport class Http2CallStream implements Call {\n  credentials: CallCredentials;\n  filterStack: FilterStack;\n  private http2Stream: http2.ClientHttp2Stream | null = null;\n  private pendingRead = false;\n  private isWriteFilterPending = false;\n  private pendingWrite: Buffer | null = null;\n  private pendingWriteCallback: WriteCallback | null = null;\n  private writesClosed = false;\n\n  private decoder = new StreamDecoder();\n\n  private isReadFilterPending = false;\n  private canPush = false;\n  /**\n   * Indicates that an 'end' event has come from the http2 stream, so there\n   * will be no more data events.\n   */\n  private readsClosed = false;\n\n  private statusOutput = false;\n\n  private unpushedReadMessages: Buffer[] = [];\n  private unfilteredReadMessages: Buffer[] = [];\n\n  // Status code mapped from :status. To be used if grpc-status is not received\n  private mappedStatusCode: Status = Status.UNKNOWN;\n\n  // This is populated (non-null) if and only if the call has ended\n  private finalStatus: StatusObject | null = null;\n\n  private subchannel: Subchannel | null = null;\n  private disconnectListener: () => void;\n\n  private listener: InterceptingListener | null = null;\n\n  private internalError: SystemError | null = null;\n\n  private configDeadline: Deadline = Infinity;\n\n  private statusWatchers: ((status: StatusObject) => void)[] = [];\n  private streamEndWatchers: ((success: boolean) => void)[] = [];\n\n  private callStatsTracker: SubchannelCallStatsTracker | null = null;\n\n  constructor(\n    private readonly methodName: string,\n    private readonly channel: ChannelImplementation,\n    private readonly options: CallStreamOptions,\n    filterStackFactory: FilterStackFactory,\n    private readonly channelCallCredentials: CallCredentials,\n    private readonly callNumber: number\n  ) {\n    this.filterStack = filterStackFactory.createFilter(this);\n    this.credentials = channelCallCredentials;\n    this.disconnectListener = () => {\n      this.endCall({\n        code: Status.UNAVAILABLE,\n        details: 'Connection dropped',\n        metadata: new Metadata(),\n      });\n    };\n    if (\n      this.options.parentCall &&\n      this.options.flags & Propagate.CANCELLATION\n    ) {\n      this.options.parentCall.on('cancelled', () => {\n        this.cancelWithStatus(Status.CANCELLED, 'Cancelled by parent call');\n      });\n    }\n  }\n\n  private outputStatus() {\n    /* Precondition: this.finalStatus !== null */\n    if (this.listener && !this.statusOutput) {\n      this.statusOutput = true;\n      const filteredStatus = this.filterStack.receiveTrailers(\n        this.finalStatus!\n      );\n      this.statusWatchers.forEach(watcher => watcher(filteredStatus));\n      /* We delay the actual action of bubbling up the status to insulate the\n       * cleanup code in this class from any errors that may be thrown in the\n       * upper layers as a result of bubbling up the status. In particular,\n       * if the status is not OK, the \"error\" event may be emitted\n       * synchronously at the top level, which will result in a thrown error if\n       * the user does not handle that event. */\n      process.nextTick(() => {\n        this.listener?.onReceiveStatus(filteredStatus);\n      });\n      if (this.subchannel) {\n        this.subchannel.callUnref();\n        this.subchannel.removeDisconnectListener(this.disconnectListener);\n      }\n    }\n  }\n\n  private trace(text: string): void {\n    logging.trace(\n      LogVerbosity.DEBUG,\n      TRACER_NAME,\n      '[' + this.callNumber + '] ' + text\n    );\n  }\n\n  /**\n   * On first call, emits a 'status' event with the given StatusObject.\n   * Subsequent calls are no-ops.\n   * @param status The status of the call.\n   */\n  private endCall(status: StatusObject): void {\n    /* If the status is OK and a new status comes in (e.g. from a\n     * deserialization failure), that new status takes priority */\n    if (this.finalStatus === null || this.finalStatus.code === Status.OK) {\n      this.trace(\n        'ended with status: code=' +\n          status.code +\n          ' details=\"' +\n          status.details +\n          '\"'\n      );\n      this.finalStatus = status;\n      this.maybeOutputStatus();\n    }\n    this.destroyHttp2Stream();\n  }\n\n  private maybeOutputStatus() {\n    if (this.finalStatus !== null) {\n      /* The combination check of readsClosed and that the two message buffer\n       * arrays are empty checks that there all incoming data has been fully\n       * processed */\n      if (\n        this.finalStatus.code !== Status.OK ||\n        (this.readsClosed &&\n          this.unpushedReadMessages.length === 0 &&\n          this.unfilteredReadMessages.length === 0 &&\n          !this.isReadFilterPending)\n      ) {\n        this.outputStatus();\n      }\n    }\n  }\n\n  private push(message: Buffer): void {\n    this.trace(\n      'pushing to reader message of length ' +\n        (message instanceof Buffer ? message.length : null)\n    );\n    this.canPush = false;\n    process.nextTick(() => {\n      /* If we have already output the status any later messages should be\n       * ignored, and can cause out-of-order operation errors higher up in the\n       * stack. Checking as late as possible here to avoid any race conditions.\n       */\n      if (this.statusOutput) {\n        return;\n      }\n      this.listener?.onReceiveMessage(message);\n      this.maybeOutputStatus();\n    });\n  }\n\n  private handleFilterError(error: Error) {\n    this.cancelWithStatus(Status.INTERNAL, error.message);\n  }\n\n  private handleFilteredRead(message: Buffer) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n    this.isReadFilterPending = false;\n    if (this.canPush) {\n      this.http2Stream!.pause();\n      this.push(message);\n    } else {\n      this.trace(\n        'unpushedReadMessages.push message of length ' + message.length\n      );\n      this.unpushedReadMessages.push(message);\n    }\n    if (this.unfilteredReadMessages.length > 0) {\n      /* nextMessage is guaranteed not to be undefined because\n         unfilteredReadMessages is non-empty */\n      const nextMessage = this.unfilteredReadMessages.shift()!;\n      this.filterReceivedMessage(nextMessage);\n    }\n  }\n\n  private filterReceivedMessage(framedMessage: Buffer) {\n    /* If we the call has already ended with an error, we don't want to do\n     * anything with this message. Dropping it on the floor is correct\n     * behavior */\n    if (this.finalStatus !== null && this.finalStatus.code !== Status.OK) {\n      this.maybeOutputStatus();\n      return;\n    }\n    this.trace('filterReceivedMessage of length ' + framedMessage.length);\n    this.isReadFilterPending = true;\n    this.filterStack\n      .receiveMessage(Promise.resolve(framedMessage))\n      .then(\n        this.handleFilteredRead.bind(this),\n        this.handleFilterError.bind(this)\n      );\n  }\n\n  private tryPush(messageBytes: Buffer): void {\n    if (this.isReadFilterPending) {\n      this.trace(\n        'unfilteredReadMessages.push message of length ' +\n          (messageBytes && messageBytes.length)\n      );\n      this.unfilteredReadMessages.push(messageBytes);\n    } else {\n      this.filterReceivedMessage(messageBytes);\n    }\n  }\n\n  private handleTrailers(headers: http2.IncomingHttpHeaders) {\n    this.streamEndWatchers.forEach(watcher => watcher(true));\n    let headersString = '';\n    for (const header of Object.keys(headers)) {\n      headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n    }\n    this.trace('Received server trailers:\\n' + headersString);\n    let metadata: Metadata;\n    try {\n      metadata = Metadata.fromHttp2Headers(headers);\n    } catch (e) {\n      metadata = new Metadata();\n    }\n    const metadataMap = metadata.getMap();\n    let code: Status = this.mappedStatusCode;\n    if (\n      code === Status.UNKNOWN &&\n      typeof metadataMap['grpc-status'] === 'string'\n    ) {\n      const receivedStatus = Number(metadataMap['grpc-status']);\n      if (receivedStatus in Status) {\n        code = receivedStatus;\n        this.trace('received status code ' + receivedStatus + ' from server');\n      }\n      metadata.remove('grpc-status');\n    }\n    let details = '';\n    if (typeof metadataMap['grpc-message'] === 'string') {\n      details = decodeURI(metadataMap['grpc-message']);\n      metadata.remove('grpc-message');\n      this.trace(\n        'received status details string \"' + details + '\" from server'\n      );\n    }\n    const status: StatusObject = { code, details, metadata };\n    // This is a no-op if the call was already ended when handling headers.\n    this.endCall(status);\n  }\n\n  private writeMessageToStream(message: Buffer, callback: WriteCallback) {\n    this.callStatsTracker?.addMessageSent();\n    this.http2Stream!.write(message, callback);\n  }\n\n  attachHttp2Stream(\n    stream: http2.ClientHttp2Stream,\n    subchannel: Subchannel,\n    extraFilters: Filter[],\n    callStatsTracker: SubchannelCallStatsTracker\n  ): void {\n    this.filterStack.push(extraFilters);\n    if (this.finalStatus !== null) {\n      stream.close(NGHTTP2_CANCEL);\n    } else {\n      this.trace(\n        'attachHttp2Stream from subchannel ' + subchannel.getAddress()\n      );\n      this.http2Stream = stream;\n      this.subchannel = subchannel;\n      this.callStatsTracker = callStatsTracker;\n      subchannel.addDisconnectListener(this.disconnectListener);\n      subchannel.callRef();\n      stream.on('response', (headers, flags) => {\n        let headersString = '';\n        for (const header of Object.keys(headers)) {\n          headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n        }\n        this.trace('Received server headers:\\n' + headersString);\n        switch (headers[':status']) {\n          // TODO(murgatroid99): handle 100 and 101\n          case 400:\n            this.mappedStatusCode = Status.INTERNAL;\n            break;\n          case 401:\n            this.mappedStatusCode = Status.UNAUTHENTICATED;\n            break;\n          case 403:\n            this.mappedStatusCode = Status.PERMISSION_DENIED;\n            break;\n          case 404:\n            this.mappedStatusCode = Status.UNIMPLEMENTED;\n            break;\n          case 429:\n          case 502:\n          case 503:\n          case 504:\n            this.mappedStatusCode = Status.UNAVAILABLE;\n            break;\n          default:\n            this.mappedStatusCode = Status.UNKNOWN;\n        }\n\n        if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n          this.handleTrailers(headers);\n        } else {\n          let metadata: Metadata;\n          try {\n            metadata = Metadata.fromHttp2Headers(headers);\n          } catch (error) {\n            this.endCall({\n              code: Status.UNKNOWN,\n              details: error.message,\n              metadata: new Metadata(),\n            });\n            return;\n          }\n          try {\n            const finalMetadata = this.filterStack.receiveMetadata(metadata);\n            this.listener?.onReceiveMetadata(finalMetadata);\n          } catch (error) {\n            this.endCall({\n              code: Status.UNKNOWN,\n              details: error.message,\n              metadata: new Metadata(),\n            });\n          }\n        }\n      });\n      stream.on('trailers', this.handleTrailers.bind(this));\n      stream.on('data', (data: Buffer) => {\n        this.trace('receive HTTP/2 data frame of length ' + data.length);\n        const messages = this.decoder.write(data);\n\n        for (const message of messages) {\n          this.trace('parsed message of length ' + message.length);\n          this.callStatsTracker!.addMessageReceived();\n          this.tryPush(message);\n        }\n      });\n      stream.on('end', () => {\n        this.readsClosed = true;\n        this.maybeOutputStatus();\n      });\n      stream.on('close', () => {\n        /* Use process.next tick to ensure that this code happens after any\n         * \"error\" event that may be emitted at about the same time, so that\n         * we can bubble up the error message from that event. */\n        process.nextTick(() => {\n          this.trace('HTTP/2 stream closed with code ' + stream.rstCode);\n          /* If we have a final status with an OK status code, that means that\n           * we have received all of the messages and we have processed the\n           * trailers and the call completed successfully, so it doesn't matter\n           * how the stream ends after that */\n          if (this.finalStatus?.code === Status.OK) {\n            return;\n          }\n          let code: Status;\n          let details = '';\n          switch (stream.rstCode) {\n            case http2.constants.NGHTTP2_NO_ERROR:\n              /* If we get a NO_ERROR code and we already have a status, the\n               * stream completed properly and we just haven't fully processed\n               * it yet */\n              if (this.finalStatus !== null) {\n                return;\n              }\n              code = Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n              break;\n            case http2.constants.NGHTTP2_REFUSED_STREAM:\n              code = Status.UNAVAILABLE;\n              details = 'Stream refused by server';\n              break;\n            case http2.constants.NGHTTP2_CANCEL:\n              code = Status.CANCELLED;\n              details = 'Call cancelled';\n              break;\n            case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n              code = Status.RESOURCE_EXHAUSTED;\n              details = 'Bandwidth exhausted or memory limit exceeded';\n              break;\n            case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n              code = Status.PERMISSION_DENIED;\n              details = 'Protocol not secure enough';\n              break;\n            case http2.constants.NGHTTP2_INTERNAL_ERROR:\n              code = Status.INTERNAL;\n              if (this.internalError === null) {\n                /* This error code was previously handled in the default case, and\n                 * there are several instances of it online, so I wanted to\n                 * preserve the original error message so that people find existing\n                 * information in searches, but also include the more recognizable\n                 * \"Internal server error\" message. */\n                details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;\n              } else {\n                if (this.internalError.code === 'ECONNRESET' || this.internalError.code === 'ETIMEDOUT') {\n                  code = Status.UNAVAILABLE;\n                  details = this.internalError.message;\n                } else {\n                  /* The \"Received RST_STREAM with code ...\" error is preserved\n                   * here for continuity with errors reported online, but the\n                   * error message at the end will probably be more relevant in\n                   * most cases. */\n                  details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n                }\n              }\n              break;\n            default:\n              code = Status.INTERNAL;\n              details = `Received RST_STREAM with code ${stream.rstCode}`;\n          }\n          // This is a no-op if trailers were received at all.\n          // This is OK, because status codes emitted here correspond to more\n          // catastrophic issues that prevent us from receiving trailers in the\n          // first place.\n          this.endCall({ code, details, metadata: new Metadata() });\n        });\n      });\n      stream.on('error', (err: SystemError) => {\n        /* We need an error handler here to stop \"Uncaught Error\" exceptions\n         * from bubbling up. However, errors here should all correspond to\n         * \"close\" events, where we will handle the error more granularly */\n        /* Specifically looking for stream errors that were *not* constructed\n         * from a RST_STREAM response here:\n         * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n         */\n        if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\n          this.trace(\n            'Node error event: message=' +\n              err.message +\n              ' code=' +\n              err.code +\n              ' errno=' +\n              getSystemErrorName(err.errno) +\n              ' syscall=' +\n              err.syscall\n          );\n          this.internalError = err;\n        }\n        this.streamEndWatchers.forEach(watcher => watcher(false));\n      });\n      if (!this.pendingRead) {\n        stream.pause();\n      }\n      if (this.pendingWrite) {\n        if (!this.pendingWriteCallback) {\n          throw new Error('Invalid state in write handling code');\n        }\n        this.trace(\n          'sending data chunk of length ' +\n            this.pendingWrite.length +\n            ' (deferred)'\n        );\n        try {\n          this.writeMessageToStream(this.pendingWrite, this.pendingWriteCallback);\n        } catch (error) {\n          this.endCall({\n            code: Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new Metadata()\n          });\n        }\n      }\n      this.maybeCloseWrites();\n    }\n  }\n\n  start(metadata: Metadata, listener: InterceptingListener) {\n    this.trace('Sending metadata');\n    this.listener = listener;\n    this.channel._startCallStream(this, metadata);\n    this.maybeOutputStatus();\n  }\n\n  private destroyHttp2Stream() {\n    // The http2 stream could already have been destroyed if cancelWithStatus\n    // is called in response to an internal http2 error.\n    if (this.http2Stream !== null && !this.http2Stream.destroyed) {\n      /* If the call has ended with an OK status, communicate that when closing\n       * the stream, partly to avoid a situation in which we detect an error\n       * RST_STREAM as a result after we have the status */\n      let code: number;\n      if (this.finalStatus?.code === Status.OK) {\n        code = http2.constants.NGHTTP2_NO_ERROR;\n      } else {\n        code = http2.constants.NGHTTP2_CANCEL;\n      }\n      this.trace('close http2 stream with code ' + code);\n      this.http2Stream.close(code);\n    }\n  }\n\n  cancelWithStatus(status: Status, details: string): void {\n    this.trace(\n      'cancelWithStatus code: ' + status + ' details: \"' + details + '\"'\n    );\n    this.endCall({ code: status, details, metadata: new Metadata() });\n  }\n\n  getDeadline(): Deadline {\n    const deadlineList = [this.options.deadline];\n    if (this.options.parentCall && this.options.flags & Propagate.DEADLINE) {\n      deadlineList.push(this.options.parentCall.getDeadline());\n    }\n    if (this.configDeadline) {\n      deadlineList.push(this.configDeadline);\n    }\n    return getMinDeadline(deadlineList);\n  }\n\n  getCredentials(): CallCredentials {\n    return this.credentials;\n  }\n\n  setCredentials(credentials: CallCredentials): void {\n    this.credentials = this.channelCallCredentials.compose(credentials);\n  }\n\n  getStatus(): StatusObject | null {\n    return this.finalStatus;\n  }\n\n  getPeer(): string {\n    return this.subchannel?.getAddress() ?? this.channel.getTarget();\n  }\n\n  getMethod(): string {\n    return this.methodName;\n  }\n\n  getHost(): string {\n    return this.options.host;\n  }\n\n  setConfigDeadline(configDeadline: Deadline) {\n    this.configDeadline = configDeadline;\n  }\n\n  addStatusWatcher(watcher: (status: StatusObject) => void) {\n    this.statusWatchers.push(watcher);\n  }\n\n  addStreamEndWatcher(watcher: (success: boolean) => void) {\n    this.streamEndWatchers.push(watcher);\n  }\n\n  addFilters(extraFilters: Filter[]) {\n    this.filterStack.push(extraFilters);\n  }\n\n  startRead() {\n    /* If the stream has ended with an error, we should not emit any more\n     * messages and we should communicate that the stream has ended */\n    if (this.finalStatus !== null && this.finalStatus.code !== Status.OK) {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n      return;\n    }\n    this.canPush = true;\n    if (this.http2Stream === null) {\n      this.pendingRead = true;\n    } else {\n      if (this.unpushedReadMessages.length > 0) {\n        const nextMessage: Buffer = this.unpushedReadMessages.shift()!;\n        this.push(nextMessage);\n        return;\n      }\n      /* Only resume reading from the http2Stream if we don't have any pending\n       * messages to emit */\n      this.http2Stream.resume();\n    }\n  }\n\n  private maybeCloseWrites() {\n    if (\n      this.writesClosed &&\n      !this.isWriteFilterPending &&\n      this.http2Stream !== null\n    ) {\n      this.trace('calling end() on HTTP/2 stream');\n      this.http2Stream.end();\n    }\n  }\n\n  sendMessageWithContext(context: MessageContext, message: Buffer) {\n    this.trace('write() called with message of length ' + message.length);\n    const writeObj: WriteObject = {\n      message,\n      flags: context.flags,\n    };\n    const cb: WriteCallback = context.callback ?? (() => {});\n    this.isWriteFilterPending = true;\n    this.filterStack.sendMessage(Promise.resolve(writeObj)).then((message) => {\n      this.isWriteFilterPending = false;\n      if (this.http2Stream === null) {\n        this.trace(\n          'deferring writing data chunk of length ' + message.message.length\n        );\n        this.pendingWrite = message.message;\n        this.pendingWriteCallback = cb;\n      } else {\n        this.trace('sending data chunk of length ' + message.message.length);\n        try {\n        this.writeMessageToStream(message.message, cb);\n        }  catch (error) {\n          this.endCall({\n            code: Status.UNAVAILABLE,\n            details: `Write failed with error ${error.message}`,\n            metadata: new Metadata()\n          });\n        }\n        this.maybeCloseWrites();\n      }\n    }, this.handleFilterError.bind(this));\n  }\n\n  halfClose() {\n    this.trace('end() called');\n    this.writesClosed = true;\n    this.maybeCloseWrites();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
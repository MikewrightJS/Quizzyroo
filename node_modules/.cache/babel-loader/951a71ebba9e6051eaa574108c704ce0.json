{"ast":null,"code":"// Load modules\nvar Hoek = require('hoek');\n\nvar Sntp = require('sntp');\n\nvar Boom = require('boom'); // Declare internals\n\n\nvar internals = {}; // Import Hoek Utilities\n\ninternals.import = function () {\n  for (var i in Hoek) {\n    if (Hoek.hasOwnProperty(i)) {\n      exports[i] = Hoek[i];\n    }\n  }\n};\n\ninternals.import(); // Hawk version\n\nexports.version = function () {\n  return exports.loadPackage(__dirname + '/..').version;\n}; // Extract host and port from request\n\n\nexports.parseHost = function (req, hostHeaderName) {\n  hostHeaderName = hostHeaderName ? hostHeaderName.toLowerCase() : 'host';\n  var hostHeader = req.headers[hostHeaderName];\n\n  if (!hostHeader) {\n    return null;\n  }\n\n  var hostHeaderRegex = /^(?:(?:\\r\\n)?[\\t ])*([^:]+)(?::(\\d+))?(?:(?:\\r\\n)?[\\t ])*$/; // Does not support IPv6\n\n  var hostParts = hostHeader.match(hostHeaderRegex);\n\n  if (!hostParts || hostParts.length !== 3 || !hostParts[1]) {\n    return null;\n  }\n\n  return {\n    name: hostParts[1],\n    port: hostParts[2] ? hostParts[2] : req.connection && req.connection.encrypted ? 443 : 80\n  };\n}; // Parse Content-Type header content\n\n\nexports.parseContentType = function (header) {\n  if (!header) {\n    return '';\n  }\n\n  return header.split(';')[0].trim().toLowerCase();\n}; // Convert node's  to request configuration object\n\n\nexports.parseRequest = function (req, options) {\n  if (!req.headers) {\n    return req;\n  } // Obtain host and port information\n\n\n  var host = exports.parseHost(req, options.hostHeaderName);\n\n  if (!host) {\n    return new Error('Invalid Host header');\n  }\n\n  var request = {\n    method: req.method,\n    url: req.url,\n    host: host.name,\n    port: host.port,\n    authorization: req.headers.authorization,\n    contentType: req.headers['content-type'] || ''\n  };\n  return request;\n};\n\nexports.now = function () {\n  return Sntp.now();\n}; // Parse Hawk HTTP Authorization header\n\n\nexports.parseAuthorizationHeader = function (header, keys) {\n  keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];\n\n  if (!header) {\n    return Boom.unauthorized(null, 'Hawk');\n  }\n\n  var headerParts = header.match(/^(\\w+)(?:\\s+(.*))?$/); // Header: scheme[ something]\n\n  if (!headerParts) {\n    return Boom.badRequest('Invalid header syntax');\n  }\n\n  var scheme = headerParts[1];\n\n  if (scheme.toLowerCase() !== 'hawk') {\n    return Boom.unauthorized(null, 'Hawk');\n  }\n\n  var attributesString = headerParts[2];\n\n  if (!attributesString) {\n    return Boom.badRequest('Invalid header syntax');\n  }\n\n  var attributes = {};\n  var errorMessage = '';\n  var verify = attributesString.replace(/(\\w+)=\"([^\"\\\\]*)\"\\s*(?:,\\s*|$)/g, function ($0, $1, $2) {\n    // Check valid attribute names\n    if (keys.indexOf($1) === -1) {\n      errorMessage = 'Unknown attribute: ' + $1;\n      return;\n    } // Allowed attribute value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9\n\n\n    if ($2.match(/^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~]+$/) === null) {\n      errorMessage = 'Bad attribute value: ' + $1;\n      return;\n    } // Check for duplicates\n\n\n    if (attributes.hasOwnProperty($1)) {\n      errorMessage = 'Duplicate attribute: ' + $1;\n      return;\n    }\n\n    attributes[$1] = $2;\n    return '';\n  });\n\n  if (verify !== '') {\n    return Boom.badRequest(errorMessage || 'Bad header format');\n  }\n\n  return attributes;\n};","map":{"version":3,"sources":["C:/react/quiz/node_modules/hawk/lib/utils.js"],"names":["Hoek","require","Sntp","Boom","internals","import","i","hasOwnProperty","exports","version","loadPackage","__dirname","parseHost","req","hostHeaderName","toLowerCase","hostHeader","headers","hostHeaderRegex","hostParts","match","length","name","port","connection","encrypted","parseContentType","header","split","trim","parseRequest","options","host","Error","request","method","url","authorization","contentType","now","parseAuthorizationHeader","keys","unauthorized","headerParts","badRequest","scheme","attributesString","attributes","errorMessage","verify","replace","$0","$1","$2","indexOf"],"mappings":"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","sourcesContent":["// Load modules\n\nvar Hoek = require('hoek');\nvar Sntp = require('sntp');\nvar Boom = require('boom');\n\n\n// Declare internals\n\nvar internals = {};\n\n\n// Import Hoek Utilities\n\ninternals.import = function () {\n\n    for (var i in Hoek) {\n        if (Hoek.hasOwnProperty(i)) {\n            exports[i] = Hoek[i];\n        }\n    }\n};\n\ninternals.import();\n\n\n// Hawk version\n\nexports.version = function () {\n\n    return exports.loadPackage(__dirname + '/..').version;\n};\n\n\n// Extract host and port from request\n\nexports.parseHost = function (req, hostHeaderName) {\n\n    hostHeaderName = (hostHeaderName ? hostHeaderName.toLowerCase() : 'host');\n    var hostHeader = req.headers[hostHeaderName];\n    if (!hostHeader) {\n        return null;\n    }\n\n    var hostHeaderRegex = /^(?:(?:\\r\\n)?[\\t ])*([^:]+)(?::(\\d+))?(?:(?:\\r\\n)?[\\t ])*$/;     // Does not support IPv6\n    var hostParts = hostHeader.match(hostHeaderRegex);\n\n    if (!hostParts ||\n        hostParts.length !== 3 ||\n        !hostParts[1]) {\n\n        return null;\n    }\n\n    return {\n        name: hostParts[1],\n        port: (hostParts[2] ? hostParts[2] : (req.connection && req.connection.encrypted ? 443 : 80))\n    };\n};\n\n\n// Parse Content-Type header content\n\nexports.parseContentType = function (header) {\r\n\n    if (!header) {\r\n        return '';\r\n    }\n\n    return header.split(';')[0].trim().toLowerCase();\n};\n\n\n// Convert node's  to request configuration object\n\nexports.parseRequest = function (req, options) {\n\n    if (!req.headers) {\n        return req;\n    }\n\n    // Obtain host and port information\n\n    var host = exports.parseHost(req, options.hostHeaderName);\n    if (!host) {\n        return new Error('Invalid Host header');\n    }\n\n    var request = {\n        method: req.method,\n        url: req.url,\n        host: host.name,\n        port: host.port,\n        authorization: req.headers.authorization,\n        contentType: req.headers['content-type'] || ''\n    };\n\n    return request;\n};\n\n\nexports.now = function () {\n\n    return Sntp.now();\n};\n\n\n// Parse Hawk HTTP Authorization header\n\nexports.parseAuthorizationHeader = function (header, keys) {\r\n\n    keys = keys || ['id', 'ts', 'nonce', 'hash', 'ext', 'mac', 'app', 'dlg'];\n\n    if (!header) {\r\n        return Boom.unauthorized(null, 'Hawk');\r\n    }\n\n    var headerParts = header.match(/^(\\w+)(?:\\s+(.*))?$/);       // Header: scheme[ something]\n    if (!headerParts) {\r\n        return Boom.badRequest('Invalid header syntax');\r\n    }\n\n    var scheme = headerParts[1];\n    if (scheme.toLowerCase() !== 'hawk') {\r\n        return Boom.unauthorized(null, 'Hawk');\r\n    }\n\n    var attributesString = headerParts[2];\n    if (!attributesString) {\r\n        return Boom.badRequest('Invalid header syntax');\r\n    }\n\n    var attributes = {};\n    var errorMessage = '';\n    var verify = attributesString.replace(/(\\w+)=\"([^\"\\\\]*)\"\\s*(?:,\\s*|$)/g, function ($0, $1, $2) {\n\n        // Check valid attribute names\n\n        if (keys.indexOf($1) === -1) {\r\n            errorMessage = 'Unknown attribute: ' + $1;\n            return;\r\n        }\n\n        // Allowed attribute value characters: !#$%&'()*+,-./:;<=>?@[]^_`{|}~ and space, a-z, A-Z, 0-9\n\n        if ($2.match(/^[ \\w\\!#\\$%&'\\(\\)\\*\\+,\\-\\.\\/\\:;<\\=>\\?@\\[\\]\\^`\\{\\|\\}~]+$/) === null) {\r\n            errorMessage = 'Bad attribute value: ' + $1;\n            return;\r\n        }\n\n        // Check for duplicates\n\n        if (attributes.hasOwnProperty($1)) {\r\n            errorMessage = 'Duplicate attribute: ' + $1;\n            return;\r\n        }\n\n        attributes[$1] = $2;\n        return '';\r\n    });\n\n    if (verify !== '') {\r\n        return Boom.badRequest(errorMessage || 'Bad header format');\r\n    }\r\n\r\n    return attributes;\r\n};\n"]},"metadata":{},"sourceType":"script"}